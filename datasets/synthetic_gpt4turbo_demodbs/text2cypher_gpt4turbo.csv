cypher,type,database,syntax_error,timeout,returns_results
"MATCH (u:User)-[r:INTERACTED]->(:User)
WHERE r.weight > 5
WITH u, count(r) AS interactions
ORDER BY interactions DESC
LIMIT 5
RETURN u",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
WHERE r.key = 'specific_key'
WITH u, count(r) AS interactions
ORDER BY interactions DESC
LIMIT 5
RETURN u.label, interactions",Complex Retrieval Queries,bluesky,False,False,False
"MATCH (u:User)
WHERE u.color = '#3CB371' AND u.size IS NOT NULL
RETURN u
ORDER BY u.size DESC
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(v:User {color: '#FF4500'})
WITH u, count{(u)-[:INTERACTED]->(v)} AS interactions
ORDER BY interactions DESC
LIMIT 5
RETURN u",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User {label: 'sarahp.bsky.social'})-[:INTERACTED]->(interactedUser:User)
RETURN interactedUser
ORDER BY count{(u)-[:INTERACTED]->(interactedUser)} DESC
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u1:User)-[r:INTERACTED]->(u2:User)
WHERE r.ogWeight > r.weight
RETURN u1, r, u2",Pathfinding Queries,bluesky,False,False,False
"MATCH (u:User)
RETURN u
ORDER BY u.area ASC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u2.y > 10000
RETURN u1
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(v:User)
WHERE v.size > 2
WITH u, count(v) AS interactions
ORDER BY interactions DESC
LIMIT 5
RETURN u",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.label CONTAINS 'bsky.social'
RETURN u
ORDER BY u.size DESC
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.color = '#4A708B' AND u.size > 2.5
RETURN u
ORDER BY u.size DESC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(v:User {color: '#FF4500'})
RETURN u
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.y < 0
RETURN u
ORDER BY u.y ASC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.x < -5000
RETURN u
ORDER BY u.x DESC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
WHERE u.size < 2
RETURN u, count(r) AS interactions
ORDER BY interactions DESC
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.x > 10000
RETURN u
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u, count{(u)-[:INTERACTED]->(:User)} AS interactions
ORDER BY interactions ASC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u.label, u.area + u.size AS combined_area_size
ORDER BY combined_area_size DESC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.size > 2 AND u.color = '#FF7F50'
RETURN u
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
RETURN u.label, count(r) AS interactions
ORDER BY interactions DESC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
RETURN u.label, sum(r.weight) AS totalWeight
ORDER BY totalWeight DESC
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.x IS NOT NULL
RETURN u
ORDER BY u.x ASC
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User {color: '#3CB371'})
RETURN u
ORDER BY u.size DESC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.y DESC
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User {label: 'louisgray.com'})-[:INTERACTED]->(other:User)
RETURN other
ORDER BY count{(u)-[:INTERACTED]->(other)} DESC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.size ASC
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.area DESC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.y >= 5000 AND u.y <= 6000
RETURN u
ORDER BY u.y DESC
LIMIT 5",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.x IS NOT NULL
RETURN u
ORDER BY abs(u.x)
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.size > 3.0
RETURN u.area
ORDER BY u.area DESC
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User {color: '#FF4500'})
RETURN u
ORDER BY u.size DESC
LIMIT 5",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(v:User)
WHERE v.area > 5
RETURN u
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u1:User)-[r:INTERACTED]->(u2:User)
WHERE r.weight = 1
RETURN u1.label
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(v:User {color: '#87CEFA'})
RETURN u
ORDER BY count{(u)-[:INTERACTED]->(v)} DESC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u.label, (u.area + u.size) AS totalValue
ORDER BY totalValue DESC
LIMIT 5",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u:User {label: 'vtcodes.dev'})-[r:INTERACTED]->(other:User)
WHERE r.size > 0.5
RETURN u, r, other",Pathfinding Queries,bluesky,False,False,True
"MATCH (u:User {label: 'dwither.bsky.social'})-[:INTERACTED]->(interactedUser:User)
RETURN interactedUser.x, interactedUser.y
LIMIT 3",Pathfinding Queries,bluesky,False,False,True
"MATCH (u1:User)-[r:INTERACTED]->(u2:User)
WHERE r.size < 2
RETURN u1, r, u2",Pathfinding Queries,bluesky,False,True,False
"MATCH (u:User)-[:INTERACTED]->(:User {label: 'inchristbl.bsky.social'})
WHERE u.area < 3
RETURN u",Pathfinding Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(:User)
WHERE u.x < -5000
RETURN u",Pathfinding Queries,bluesky,False,True,False
"MATCH (u:User)-[:INTERACTED]->(target:User {label: 'sarahgerrard.me'})
WHERE u.size > 2
RETURN u",Pathfinding Queries,bluesky,False,False,True
"MATCH (u1:User)-[r:INTERACTED]->(u2:User {label: 'tagomoris.bsky.social'})
WHERE r.weight = 1
RETURN u1, r, u2",Pathfinding Queries,bluesky,False,False,True
"MATCH (u:User {label: 'r0yart.bsky.social'})-[:INTERACTED]->(interactedUser:User)
RETURN interactedUser.color
LIMIT 3",Pathfinding Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(:User {label: 'vtcodes.dev'})
RETURN u.label AS UserLabel, u.area AS UserArea
ORDER BY u.area DESC
LIMIT 5",Pathfinding Queries,bluesky,False,False,True
"MATCH (u:User {label: 'curvylliptic.bsky.social'})-[:INTERACTED]->(interactedUser:User)
RETURN interactedUser",Pathfinding Queries,bluesky,False,False,True
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u1.area > 4 AND u2.area < 3
RETURN u1
LIMIT 3",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
WHERE u.color = '#4A708B'
RETURN u.label, sum(r.weight) AS totalWeight
ORDER BY totalWeight DESC
LIMIT 5",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u1.y > 5000 AND u2.y < -5000
RETURN u1
LIMIT 5",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User {color: '#FF4500'})-[:INTERACTED]->(v:User)
WITH u, sum(r.size) AS totalInteractionSize
ORDER BY totalInteractionSize DESC
LIMIT 3
RETURN u.label, u.key, totalInteractionSize",Simple Aggregation Queries,bluesky,True,False,False
"MATCH (u:User)
WHERE u.label CONTAINS 'com'
RETURN u
ORDER BY u.size DESC
LIMIT 3",Complex Retrieval Queries,bluesky,False,False,True
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u2.y > 10000
WITH u1
ORDER BY u1.y DESC
LIMIT 3
RETURN u1",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u1:User {color: '#1E90FF'})-[:INTERACTED]->(u2:User {color: '#3CB371'})
RETURN u1
LIMIT 5",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(v:User)
WHERE u.size > 2 AND v.size > 2
RETURN u.label AS UserLabel, count(r) AS InteractionCount
ORDER BY InteractionCount DESC
LIMIT 3",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.x < -5000
RETURN u
ORDER BY u.x
LIMIT 3",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(:User)
WHERE u.y < 0
RETURN u
ORDER BY u.y
LIMIT 5",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u2.x > -500
RETURN u1
LIMIT 3",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
WHERE r.weight = 1
RETURN u.label, u.area
ORDER BY u.area DESC
LIMIT 3",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
WITH u, count(r) AS interactions
ORDER BY interactions DESC, u.size DESC
RETURN u.label, u.size, interactions
LIMIT 5",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(v:User {color: '#FF4500'})
RETURN u
LIMIT 3",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.color = '#3CB371' AND u.area < 3
RETURN u
LIMIT 5",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.y IS NOT NULL
RETURN u
ORDER BY u.y ASC
LIMIT 3",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.x ASC
LIMIT 5",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User {label: 'chromevoid.bsky.social'})-[:INTERACTED]->(interactedUser:User)
RETURN interactedUser
LIMIT 3",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.area > 5
RETURN u
ORDER BY u.area DESC
LIMIT 3",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.size DESC
LIMIT 5",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u1.x > -1000 AND u2.x < -5000
RETURN u1
LIMIT 3",Simple Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
RETURN u, count(r) AS interactions
ORDER BY interactions DESC
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
WHERE r.size > 0.1
RETURN u.key
ORDER BY r.size DESC
LIMIT 5",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u1:User)-[r:INTERACTED]->(u2:User)
RETURN u1, r, u2
ORDER BY r.ogWeight DESC
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u2.size < 2
RETURN avg(u1.x) AS averageX, avg(u1.y) AS averageY",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
RETURN u.label AS UserLabel, sum(r.ogWeight) AS TotalOgWeight
ORDER BY TotalOgWeight DESC
LIMIT 5",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(:User)
WHERE u.x IS NOT NULL
RETURN u
ORDER BY u.x ASC
LIMIT 3",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(:User)
WITH u
ORDER BY u.y DESC
LIMIT 5
RETURN u",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(:User)
WHERE u.color = '#FF4500'
RETURN u",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
WITH u, r.weight AS weight, count(DISTINCT r) AS interactions
WHERE interactions > 2
RETURN weight, count(weight) AS frequency
ORDER BY frequency DESC",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
RETURN u.label, count(r) AS interactions
ORDER BY interactions DESC
LIMIT 3",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(:User)
WHERE u.area = 2.6
RETURN u",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u1:User)-[r:INTERACTED]->(u2:User)
WHERE u1.label CONTAINS 'social' OR u2.label CONTAINS 'social'
RETURN r.ogWeight, r.weight",Complex Aggregation Queries,bluesky,False,True,False
"MATCH (u1:User)-[i:INTERACTED]->(u2:User)
WITH u1, i, u2
ORDER BY u1.size DESC
LIMIT 5
RETURN u1, i, u2",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User {color: ""#3CB371""})
RETURN u
ORDER BY u.key
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)
WHERE u.area > 4.0
RETURN u
ORDER BY u.area DESC
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)
WHERE u.size < 2.0
RETURN u
ORDER BY u.size
LIMIT 3",Verbose query,bluesky,False,False,True
"MATCH (u:User {color: ""#1E90FF""})<-[:INTERACTED]-(interactor:User)
RETURN interactor
ORDER BY count{(interactor)-[:INTERACTED]->(u)} DESC
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u1:User)-[r:INTERACTED]->(u2:User)
WHERE u1.area > 3.0 AND u2.area > 3.0
RETURN r.weight, r.ogWeight, r.size, r.key",Complex Aggregation Queries,bluesky,False,True,False
"MATCH (u:User)-[r:INTERACTED]->(:User)
WHERE r.weight > 1
RETURN u
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)
WHERE u.y > 10000
RETURN u
ORDER BY u.y ASC
LIMIT 3",Verbose query,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
WHERE r.weight > 5
RETURN u.label AS UserLabel, r.weight AS InteractionWeight
ORDER BY r.weight DESC
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(target:User {label: 'vtcodes.dev'})
RETURN u
ORDER BY u.size DESC
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u1:User)-[r:INTERACTED]->(u2:User)
WHERE u2.area > 3.0
RETURN u1.label AS UserLabel, count(r) AS Interactions
ORDER BY Interactions DESC
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User {label: 'sarahgerrard.me'})-[:INTERACTED]->(interactedUser:User)
RETURN interactedUser
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
WHERE r.size = 0.2
RETURN u.label
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(:User {label: 'dwither.bsky.social'})
RETURN u
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.size DESC
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)
WHERE u.y IS NOT NULL
RETURN u
ORDER BY u.y ASC
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)
WHERE u.label CONTAINS 'social' AND u.area > 2.0
RETURN u
ORDER BY u.area DESC
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u2.y < -5000
RETURN u1
LIMIT 3",Verbose query,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
WHERE r.ogWeight = 1
RETURN u
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(other:User {color: '#FF4500'})
RETURN u.label, count{(u)-[:INTERACTED]->(other)} AS interactions
ORDER BY interactions DESC
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.area DESC
LIMIT 3",Verbose query,bluesky,False,False,True
"MATCH (u:User)
WHERE u.x >= -5000 AND u.x <= 0
RETURN u.label
ORDER BY u.x DESC
LIMIT 5",Verbose query,bluesky,False,False,True
"MATCH (u:User)-[r:INTERACTED]->(:User)
RETURN u.label AS UserLabel, sum(r.size) AS TotalInteractionSize
ORDER BY TotalInteractionSize DESC
LIMIT 5",Pathfinding Queries,bluesky,False,False,True
"MATCH (greenUser:User {color: ""#3CB371""})-[:INTERACTED]->(redUser:User {color: ""#FF0000""})
RETURN greenUser",Complex Aggregation Queries,bluesky,False,False,False
"MATCH (u:User)-[r:INTERACTED]->(:User)
WITH u, count(r) AS interactions
WHERE interactions > 5
RETURN avg(r.weight) AS averageWeight",Complex Aggregation Queries,bluesky,True,False,False
"MATCH (u:User)-[r:INTERACTED]->(:User)
RETURN u.label, sum(r.weight) AS totalWeight
ORDER BY totalWeight DESC
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User {label: 'chromevoid.bsky.social'})-[:INTERACTED]->(interactedUser:User)
RETURN interactedUser.label
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.size < 2.0
RETURN u
ORDER BY u.size DESC
LIMIT 5",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.y < -5000
RETURN u
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.area > 5.0
RETURN u
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u.key
ORDER BY u.x DESC
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.area ASC
LIMIT 5",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User {color: '#3CB371'})
RETURN u
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.size DESC
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.y IS NOT NULL
RETURN u
ORDER BY u.y ASC
LIMIT 5",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.x ASC
LIMIT 3",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
RETURN u.label
ORDER BY u.area DESC
LIMIT 5",Simple Retrieval Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE u.y > 5000 AND count{(u)-[:INTERACTED]->(:User)} >= 2
RETURN u",Pathfinding Queries,bluesky,False,False,True
"MATCH (u1:User)-[r:INTERACTED]->(u2:User)
RETURN u1, u2, r.weight AS interactionWeight
ORDER BY r.weight DESC
LIMIT 5",Pathfinding Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(other:User)
WITH u, count(DISTINCT other) AS interactions
WHERE interactions > 3
RETURN u",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u2.x < -10000
RETURN u1",Pathfinding Queries,bluesky,False,False,True
"MATCH (u1:User)-[r:INTERACTED]->(u2:User)
WHERE u1.label CONTAINS 'social' AND u1.size > 1.5
RETURN u1, r, u2",Pathfinding Queries,bluesky,False,True,False
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u2.y > 10000
RETURN u1",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u1.label CONTAINS 'bsky' AND u2.label CONTAINS 'dev'
RETURN u1, u2",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(:User)
WHERE u.color IS NOT NULL
RETURN DISTINCT u.color",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)
WHERE NOT exists{ (u)-[:INTERACTED]->(:User) }
RETURN u
ORDER BY u.size DESC
LIMIT 3",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(:User)
WHERE u.area IS NOT NULL
RETURN u
ORDER BY u.area DESC
LIMIT 5",Complex Aggregation Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(v:User {area: 4.94})
RETURN u",Pathfinding Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(v:User {color: ""#0000FF""})
RETURN u",Complex Aggregation Queries,bluesky,False,False,False
"MATCH (u:User)-[:INTERACTED]->(:User)
WITH u
ORDER BY u.x DESC
RETURN u
LIMIT 3",Pathfinding Queries,bluesky,False,False,True
"MATCH (u1:User)-[i:INTERACTED]->(u2:User)
WHERE u1.label STARTS WITH 'r' AND u2.size > 2
RETURN u1, i, u2",Pathfinding Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(:User {label: 'dwither.bsky.social'})
WHERE u.size = 3.25
RETURN u",Pathfinding Queries,bluesky,False,False,True
"MATCH (u1:User)-[:INTERACTED]->(u2:User)
WHERE u2.y < -5000
RETURN u1",Pathfinding Queries,bluesky,False,True,False
"MATCH (u1:User)-[r:INTERACTED]->(u2:User {label: 'vtcodes.dev'})
WHERE r.key = 'geid_68_0'
RETURN u1",Pathfinding Queries,bluesky,False,False,False
"MATCH (u1:User {label: 'sarahgerrard.me'})-[:INTERACTED]->(u2:User {color: '#7EC0EE'})
RETURN u2.label
LIMIT 3",Pathfinding Queries,bluesky,False,False,True
"MATCH (u1:User)-[r:INTERACTED]->(u2:User)
WITH u1, u2, r, abs(u1.area - u2.area) AS areaDifference
ORDER BY areaDifference DESC
RETURN u1.label AS User1, u2.label AS User2, r.weight AS InteractionWeight, areaDifference
LIMIT 5",Pathfinding Queries,bluesky,False,False,True
"MATCH (u:User)-[:INTERACTED]->(v:User {color: '#3CB371'})
RETURN DISTINCT u",Pathfinding Queries,bluesky,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.upVotes > 0 AND q.downVotes > 0
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question {answered: true})
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.score <= 0
RETURN q
ORDER BY q.score ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
RETURN q
ORDER BY q.upVotes DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'node.js'})
WHERE q.score > 3
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score < 0
WITH u, count(q) AS numNegativeScoreQuestions
ORDER BY numNegativeScoreQuestions DESC
LIMIT 5
RETURN u.display_name, numNegativeScoreQuestions",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image IS NULL
RETURN q
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.favorites IS NOT NULL AND q.answered = true
RETURN q
ORDER BY q.favorites ASC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE u.reputation > 5000
RETURN q",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 10000
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.link CONTAINS 'stackoverflow'
RETURN q
ORDER BY q.favorites DESC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE size((q)-[:TAGGED]->(:Tag)) > 2
RETURN u
LIMIT 3",Complex Aggregation Queries,buzzoverflow,True,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.answered = FALSE AND q.score < -1
RETURN u",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
RETURN u.display_name, u.reputation
ORDER BY u.reputation DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt < datetime('2019-01-01T00:00:00Z')
RETURN q
ORDER BY q.downVotes DESC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.downVotes DESC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score <= 0 AND u.image IS NOT NULL
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.downVotes > 5
RETURN q",Complex Aggregation Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u.id, u.display_name, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = FALSE AND q.upVotes = 0
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation < 500
RETURN q
ORDER BY q.score DESC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'node.js'})
RETURN u
ORDER BY q.createdAt
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WITH t, count(q) AS usageCount
WHERE usageCount > 2
RETURN t.name, usageCount",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User {display_name: 'Christopher'})-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 2000 AND q.score < 0
RETURN q",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.favorites > 1
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 5
RETURN u.display_name, questions_asked",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true
RETURN q
ORDER BY q.favorites DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.downVotes IS NOT NULL
RETURN u, SUM(q.downVotes) AS TotalDownVotes
ORDER BY TotalDownVotes DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User {reputation: 0})-[:ASKED]->(q:Question)
RETURN q
LIMIT 5",Verbose query,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count{(q)-[:TAGGED]->(:Tag)} AS numTags
ORDER BY numTags DESC
LIMIT 5
RETURN u, numTags",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY length(q.title)
LIMIT 3",Verbose query,buzzoverflow,True,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image CONTAINS 'gravatar'
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.createdAt.month = q.answeredAt.month AND q.answered = TRUE
RETURN u
LIMIT 5",Verbose query,buzzoverflow,False,False,False
"MATCH (q:Question)
RETURN q
ORDER BY q.score ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY length(q.text) DESC
LIMIT 5",Verbose query,buzzoverflow,True,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, sum(q.upVotes + q.downVotes) AS totalVotes
ORDER BY totalVotes DESC
LIMIT 3
RETURN u.display_name AS UserName, totalVotes",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE size((q)-[:TAGGED]->(:Tag)) > 3
RETURN q
LIMIT 5",Verbose query,buzzoverflow,True,False,False
"MATCH (q:Question)
WHERE date(q.createdAt).dayOfWeek IN [6, 7]
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.link CONTAINS 'github'
RETURN u
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u.id, u.display_name, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt < datetime('2021-01-01T00:00:00Z')
RETURN q
ORDER BY q.favorites DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.score > 0
RETURN q
ORDER BY q.createdAt
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, AVG(q.score) AS avgScore
ORDER BY avgScore DESC
LIMIT 3
RETURN u.display_name AS UserName, avgScore",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.downVotes IS NOT NULL
RETURN q
ORDER BY q.downVotes DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'error' AND q.upVotes > 0
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS questionsCount
WHERE questionsCount > 1 AND exists {
    (q)-[:TAGGED]->(:Tag)
    WITH q, count{(q)-[:TAGGED]->(:Tag)} AS tagCount
    WHERE tagCount > 1
}
RETURN u
ORDER BY questionsCount DESC
LIMIT 5",Verbose query,buzzoverflow,True,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= '2020-06-01T00:00:00Z' AND q.createdAt < '2020-07-01T00:00:00Z'
RETURN u
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE exists{(q)-[:HAS_COMMENT]->(:Comment)}
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.upVotes = 0
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE NOT exists{ (u)-[:ASKED]->(:Question {downVotes: 1}) }
RETURN u
ORDER BY u.reputation DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)
WITH u ORDER BY u.reputation DESC LIMIT 1
MATCH (u)-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.createdAt DESC LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score < 0
RETURN q
ORDER BY q.createdAt
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name STARTS WITH 'A'
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name STARTS WITH 'Alex'
RETURN q.link",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'apollo-server-lambda'})
RETURN u",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.score < -5
RETURN t.name",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE NOT exists{ (q)-[:TAGGED]->(:Tag) WHERE q.downVotes > 0 }
RETURN u
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image IS NOT NULL
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, AVG(q.score) AS avgScore
ORDER BY avgScore ASC
LIMIT 3
RETURN u.display_name AS UserName, avgScore",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User {id: 10251021})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY size(split(q.text, ' ')) DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.upVotes = 0 AND q.downVotes = 0
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE NOT EXISTS {
  MATCH (q)-[:ANSWERED]->()
}
WITH u, COUNT(q) AS questionsCount
WHERE questionsCount = 3
RETURN u
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, avg(q.favorites) AS avgFavorites
ORDER BY avgFavorites DESC
LIMIT 3
RETURN u.display_name AS UserName, avgFavorites",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 100000
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt >= '2020-01-01T00:00:00Z' AND q.createdAt <= '2020-12-31T23:59:59Z'
RETURN q
ORDER BY q.score DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.link IS NOT NULL
RETURN q
ORDER BY q.link DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score >= 10
RETURN u
ORDER BY u.reputation ASC
LIMIT 1",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'error' OR q.title CONTAINS 'issue'
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY length(q.text) DESC
LIMIT 5",Verbose query,buzzoverflow,True,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.downVotes > 1
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, AVG(q.favorites) AS avgFavorites
ORDER BY avgFavorites DESC
LIMIT 3
RETURN u.display_name AS UserName, avgFavorites",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score = 0 AND q.createdAt >= '2020-06-01T00:00:00Z' AND q.createdAt < '2020-07-01T00:00:00Z'
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.favorites > 5
RETURN t.name, count(q) AS question_count
ORDER BY question_count DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.answered = FALSE AND q.upVotes > 10
WITH u, count(q) AS totalQuestions
WHERE NOT exists{ (u)-[:ASKED]->(:Question {answered: TRUE}) }
RETURN u
ORDER BY totalQuestions DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE date(q.createdAt).weekday IN [6, 7]
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.answered = true AND q.score < 0
RETURN t.name
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.link CONTAINS ""comments""
RETURN q
ORDER BY q.score DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count{(q)-[:TAGGED]->(:Tag)} AS numTags
ORDER BY numTags DESC
LIMIT 3
RETURN u",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = false
RETURN q
ORDER BY q.upVotes DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 1",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.text CONTAINS 'apollo'
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt < datetime('2021-01-01T00:00:00Z')
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.downVotes > 3
RETURN u",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.favorites IS NOT NULL AND q.upVotes > 1
RETURN q
ORDER BY q.favorites ASC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= datetime('2020-06-05T00:00:00Z') AND q.createdAt < datetime('2020-06-06T00:00:00Z')
RETURN u
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score < -3
RETURN q",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 50 AND NOT EXISTS {
  (u)-[:ANSWERED]->(q)
}
RETURN u
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.upVotes DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.favorites = 0 AND q.score > 0
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(:Question)
RETURN u
ORDER BY u.reputation DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.downVotes DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)
WITH u ORDER BY u.reputation DESC LIMIT 1
MATCH (u)-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u, count(q) AS num_questions
ORDER BY num_questions DESC
LIMIT 1",Verbose query,buzzoverflow,False,False,True
"MATCH (:Question)-[r:TAGGED]->(t:Tag)
RETURN t.name, count(r) AS frequency
ORDER BY frequency DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.downVotes IS NOT NULL
RETURN u, SUM(q.downVotes) AS totalDownVotes
ORDER BY totalDownVotes DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.score < 0
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.createdAt
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= datetime('2020-06-01T00:00:00Z')
RETURN u
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name, q.favorites
ORDER BY q.favorites DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE u.image IS NULL
RETURN t.name
LIMIT 3",Verbose query,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, AVG(q.downVotes) AS avgDownVotes
ORDER BY avgDownVotes DESC
LIMIT 3
RETURN u.display_name, avgDownVotes",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score > 5
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo-server-lambda'})
WHERE q.favorites = 0
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.link IS NOT NULL
RETURN u.display_name, count(q) AS num_questions
ORDER BY num_questions DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN q
ORDER BY u.id DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q, (q.upVotes - q.downVotes) AS voteDifference
ORDER BY voteDifference DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'loading'
RETURN q
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WITH u, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 3
RETURN u.display_name, questions_asked",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.createdAt IN ['2020-01-01T00:00:00Z', '2020-07-04T00:00:00Z', '2020-12-25T00:00:00Z']  // Example public holidays
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 5
MATCH (u)-[:ASKED]->(top_question:Question)
RETURN u.display_name, top_question.title, top_question.id, questions_asked
ORDER BY questions_asked DESC, top_question.score DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score < 0 AND q.upVotes = 0
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.text CONTAINS 'http'
RETURN q
ORDER BY size([link IN split(q.text, ' ') WHERE link STARTS WITH 'http']) DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'})
WITH u, count(q) AS questionsCount
ORDER BY questionsCount DESC
LIMIT 3
RETURN u.display_name, questionsCount",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.link CONTAINS 'stackoverflow'
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt = datetime(""T12:00:00Z"")
RETURN q
LIMIT 3",Verbose query,buzzoverflow,True,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score >= 5
WITH u, count(q) AS questionsCount
ORDER BY questionsCount DESC
LIMIT 3
RETURN u.display_name, questionsCount",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation = 1000
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score = 0
WITH u, count(q) AS questionsCount
ORDER BY questionsCount DESC
LIMIT 5
RETURN u.display_name, questionsCount",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'})
WHERE q.score < -1
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WITH u, count(DISTINCT t) AS numTags
ORDER BY numTags DESC
LIMIT 3
RETURN u.display_name, numTags",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.text CONTAINS 'software' OR q.text CONTAINS 'technology'
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score < -1
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.answered = true
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, q, count(q) AS times_asked
WHERE times_asked > 1
RETURN u, q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-js'})
WITH u, count(q) AS questionsCount
ORDER BY questionsCount DESC
LIMIT 3
RETURN u.display_name, questionsCount",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.text CONTAINS 'bug'
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN q
ORDER BY u.id DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE size((q)-[:TAGGED]->(:Tag)) = 2
RETURN u
LIMIT 3",Verbose query,buzzoverflow,True,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(DISTINCT q.favorites) AS favVariations
ORDER BY favVariations DESC
LIMIT 3
RETURN u.display_name, favVariations",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User {image: 'https://lh3.googleusercontent.com/-NcFYSuXU0nk/AAA'})-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,False
"MATCH (q:Question)
RETURN q
ORDER BY length(q.text)
LIMIT 5",Verbose query,buzzoverflow,True,False,False
"MATCH (q:Question)
WHERE q.title CONTAINS 'playground'
RETURN q
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.answered = true
WITH u, count(q) AS answeredQuestions
ORDER BY answeredQuestions DESC
LIMIT 3
RETURN u.display_name, answeredQuestions",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-subscriptions'})
WHERE q.score > 0
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation < 500
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt = datetime('2020-01-01T00:00:00Z')
RETURN q
LIMIT 3",Verbose query,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE size{(q)-[:TAGGED]->(:Tag)} > 3
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Verbose query,buzzoverflow,True,False,False
"MATCH (q:Question)
RETURN q
ORDER BY length(q.title) ASC
LIMIT 5",Verbose query,buzzoverflow,True,False,False
"MATCH (q:Question)-[:TAGGED]->(t1:Tag), (q)-[:TAGGED]->(t2:Tag)
WHERE t1.name = 'apollo' AND t2.name = 'graphql'
RETURN q
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.downVotes = 0
WITH u, count(q) AS questionsCount
ORDER BY questionsCount DESC
LIMIT 3
RETURN u.display_name, questionsCount",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY size(q.text) DESC
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt >= 'T08:00:00Z' AND q.createdAt <= 'T10:00:00Z'
RETURN q
ORDER BY q.createdAt ASC
LIMIT 5",Verbose query,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.score = 2
RETURN q
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score < 0
WITH u, count(q) AS NegativeQuestions
ORDER BY NegativeQuestions DESC
LIMIT 3
RETURN u.display_name, NegativeQuestions",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name STARTS WITH 'A'
RETURN q
ORDER BY q.createdAt
LIMIT 3",Verbose query,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Verbose query,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u ORDER BY u.reputation ASC LIMIT 1
MATCH (u)-[:ASKED]->(q)
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE t.name = 'graphql'
RETURN u",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (:Question)-[r:TAGGED]->(t:Tag)
RETURN t.name, count(r) AS frequency
ORDER BY frequency DESC
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.favorites DESC
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.text CONTAINS 'Internal server error' AND q.createdAt < datetime('2021-01-01T00:00:00Z')
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt < datetime('2021-01-01T00:00:00Z')
RETURN u.id, u.display_name, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.upVotes = 3
RETURN q.title",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes > 0 AND q.score > 0
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'})
WITH q, count{(q)<-[:ASKED]-(:User)} AS userCount
WHERE userCount > 1
RETURN q",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'apollo-server-lambda'})
RETURN u.image AS UserImageLink",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.answered = FALSE
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.upVotes > 10
RETURN t.name, count(q) AS questionCount
ORDER BY questionCount DESC",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.score = 0
RETURN count(DISTINCT u) AS NumberOfUsers",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name ENDS WITH 'Le'
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name CONTAINS 'Alex'
RETURN q
ORDER BY q.createdAt",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation < 500
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.createdAt > datetime('2019-01-01T00:00:00Z') AND q.downVotes > 0
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.link CONTAINS 'apollo'
RETURN q, collect(t.name) AS Tags",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.upVotes = 0 AND q.downVotes = 0
RETURN count(q) AS NumberOfQuestions",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt >= datetime('2021-01-01T00:00:00Z') AND q.favorites < 5
RETURN q.title",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.link ENDS WITH '.com'
RETURN u",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.answered = true AND q.score < 0
RETURN t.name",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE t.name = 'graphql-js' AND u.reputation > 100000
RETURN q",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo-server-lambda'})
RETURN q
ORDER BY q.score DESC
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
RETURN q
ORDER BY q.downVotes DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image ENDS WITH '.com'
RETURN q",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 50000 AND q.answered = true
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image IS NULL
RETURN q
ORDER BY q.createdAt DESC",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS questions_count
WHERE questions_count > 3
RETURN count(u) AS users_with_more_than_3_questions",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.favorites = 0
RETURN q.title",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image CONTAINS 'googleusercontent'
RETURN q
ORDER BY q.createdAt DESC",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.title CONTAINS 'subscription'
RETURN q.title, collect(t.name) AS Tags",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
RETURN q.createdAt AS CreationDate",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= datetime('2020-06-01T00:00:00Z') AND q.createdAt < datetime('2020-07-01T00:00:00Z')
RETURN u.display_name, u.reputation
ORDER BY u.reputation DESC",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q.text AS Text, q.id AS QuestionID
ORDER BY length(q.text) DESC
LIMIT 3",Pathfinding Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
WHERE size((q)-[:TAGGED]->(:Tag)) > 2
RETURN q.title AS Title, q.link AS Link",Pathfinding Queries,buzzoverflow,True,False,False
"MATCH (u:User)
WITH u ORDER BY u.reputation ASC LIMIT 1
MATCH (u)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name AS TagName",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-js'})
WHERE q.score > 5
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes = 0 AND q.createdAt >= '2020-01-01T00:00:00Z' AND q.createdAt < '2021-01-01T00:00:00Z'
RETURN q",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
RETURN q
ORDER BY q.favorites DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score = 0 AND u.image IS NOT NULL
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = false AND q.upVotes > 5
RETURN q.createdAt",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-subscriptions'})
RETURN q.createdAt AS CreationDate",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score < 0
RETURN u.link",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.upVotes > 10
RETURN q.title",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE date(q.createdAt).day = 1
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.link CONTAINS 'stackoverflow' AND q.favorites > 1
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE q.text CONTAINS 'mongodb'
RETURN u, collect(t) AS Tags",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.answered = true
RETURN t.name, count(q) AS question_count
ORDER BY question_count DESC",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-subscriptions'})
RETURN u
ORDER BY u.reputation DESC",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE u.reputation > 50000
RETURN t.name, count(q) AS question_count
ORDER BY question_count DESC",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.score < 0
RETURN count(q) AS NegativeScoredGraphQLQuestions",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
RETURN u.id AS UserId, u.display_name AS UserName, u.reputation AS UserReputation, u.link AS UserLink
ORDER BY u.reputation DESC
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 100000 AND q.downVotes > 0
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 50000 AND q.text CONTAINS 'error'
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE q.upVotes > 10 AND u.reputation > 100000
RETURN t.name",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.link CONTAINS 'apollo' AND q.answered = true
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image CONTAINS 'googleusercontent' AND q.favorites > 3
RETURN q.title AS Title, q.link AS Link",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WITH u, q, count(q) AS questions_asked
WHERE questions_asked > 1
RETURN u, collect(q) AS repeated_questions",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE u.reputation < 500 AND q.answered = true
RETURN t.name",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE u.display_name CONTAINS 'Le'
RETURN t.name, count(q) AS question_count
ORDER BY question_count DESC",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-subscriptions'})
WHERE q.score > 5
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.favorites > 5 AND u.image ENDS WITH '.com'
RETURN q",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt < datetime('2021-01-01T00:00:00Z')
  AND u.reputation > 100000
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-js'})
RETURN q
ORDER BY q.upVotes DESC
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.upVotes DESC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 100
RETURN q",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'angular'})
RETURN u",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes > 5
RETURN q",Complex Aggregation Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.score < 0
RETURN t.name",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.upVotes = 0 AND q.downVotes = 0
RETURN u",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation < 50000
RETURN q
ORDER BY q.favorites DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE q.title CONTAINS 'Apollo'
RETURN u, collect(t.name) AS Tags",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE exists {
  MATCH (u)-[:ASKED]->()
  WITH count{(u)-[:ASKED]->()} AS questionsCount
  WHERE questionsCount > 20
}
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE q.score = 0 AND u.reputation > 100000
RETURN q.title AS QuestionTitle, collect(t.name) AS Tags",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User {reputation: 420137})-[:ASKED]->(q:Question)
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 100000 AND q.answered = true
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.score = 0
RETURN q, collect(t.name) AS Tags",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.downVotes > 5 AND u.reputation < 1000
RETURN q",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'})
RETURN u.display_name, u.reputation
ORDER BY u.reputation DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.text CONTAINS 'Internal server error'
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name CONTAINS 'Le' AND u.reputation > 10000
RETURN q.title AS Title, q.link AS Link",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score = -1 AND u.display_name STARTS WITH 'A'
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.answered = true AND q.favorites > 5 AND q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt < datetime('2021-01-01T00:00:00Z')
RETURN q",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.text CONTAINS 'error' AND u.image IS NOT NULL
RETURN q.title",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
MATCH (u:User)-[:ASKED]->(q)
WHERE q.score > 0 AND u.reputation > 50000
RETURN q",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt < datetime('2021-01-01T00:00:00Z')
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.downVotes > 5
RETURN t.name, count(t) AS frequency
ORDER BY frequency DESC",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.favorites > 10 AND u.reputation < 5000
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE q.score > 0 AND u.reputation > 50000
RETURN t.name",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name CONTAINS 'Alexandre' AND q.upVotes > 5
RETURN q",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation < 1000
RETURN q.link
ORDER BY q.score DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.score > 10
RETURN q.createdAt AS CreationDate",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-js'})
WHERE u.reputation < 5000
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes > 0 AND q.score < -5
RETURN q.title",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation IS NOT NULL AND q.link CONTAINS 'stackoverflow'
RETURN q
ORDER BY u.reputation DESC
LIMIT 1",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'})
RETURN u.display_name AS UserName, u.reputation AS Reputation
ORDER BY u.reputation DESC
LIMIT 1",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.favorites DESC
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.favorites IS NOT NULL AND q.answered = true
RETURN q
ORDER BY q.favorites DESC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'react-apollo'})
WHERE q.score < 0
RETURN q",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY length(q.title) ASC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,True,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= '2019-01-01T00:00:00Z' AND q.createdAt < '2020-01-01T00:00:00Z'
RETURN u
ORDER BY q.createdAt ASC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.downVotes > 5
RETURN q
ORDER BY q.downVotes DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.answered = true
RETURN u, count(q) AS AnsweredQuestions
ORDER BY AnsweredQuestions DESC
LIMIT 1",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.createdAt < datetime('2018-01-01T00:00:00Z')
RETURN t.name, count(q) AS question_count
ORDER BY question_count DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image CONTAINS 'googleusercontent'
RETURN q
ORDER BY q.createdAt
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.favorites = 0
RETURN u
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE apoc.date.format(apoc.date.parse(q.createdAt, 'ms', ""yyyy-MM-dd'T'HH:mm:ss'Z'""), 'ms', 'E') IN ['Sat', 'Sun']
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.createdAt ASC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 1000
RETURN u, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 1",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question {upVotes: 2})
RETURN q
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'react-apollo'})
RETURN q
ORDER BY q.score DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u
ORDER BY q.createdAt DESC
LIMIT 1",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation < 500
RETURN u
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(:Question)-[:TAGGED]->(t:Tag)
WHERE u.reputation > 3000
RETURN DISTINCT t.name
LIMIT 5",Complex Retrieval Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
RETURN q
ORDER BY length(q.text) DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z')
RETURN u
ORDER BY q.createdAt ASC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'error'
RETURN q
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.link CONTAINS 'stackoverflow'
RETURN u
LIMIT 3",Complex Retrieval Queries,buzzoverflow,True,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name AS Tag, length(q.text) AS TextLength
ORDER BY TextLength DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.createdAt >= '2020-01-01T00:00:00Z' AND q.createdAt < '2021-01-01T00:00:00Z'
RETURN q
ORDER BY q.createdAt
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(:Question)
RETURN u
ORDER BY u.reputation ASC
LIMIT 1",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes > q.upVotes
RETURN q
ORDER BY q.createdAt ASC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS questionsCount
WHERE questionsCount > 3
RETURN u
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.upVotes DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question {answered: true})
RETURN q
ORDER BY q.score DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(:Question)
RETURN u.display_name, u.reputation
ORDER BY u.reputation DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes >= 1
RETURN q
ORDER BY q.createdAt
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name AS Tag, sum(q.favorites) AS TotalFavorites
ORDER BY TotalFavorites DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u
ORDER BY q.score DESC
LIMIT 1",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
RETURN q
ORDER BY q.score DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,True,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name, count(q) AS question_count
ORDER BY q.createdAt DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
RETURN u.display_name, u.reputation
ORDER BY u.reputation DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = false
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.upVotes > 2
RETURN t.name
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u
ORDER BY q.createdAt ASC
LIMIT 1",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score < 0
RETURN q
ORDER BY q.score ASC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'node.js'})
RETURN u
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.favorites DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u, count(q) AS questions_count
ORDER BY questions_count DESC
LIMIT 1",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (t:Tag)<-[:TAGGED]-(:Question)
WITH t, count{(t)<-[:TAGGED]-(:Question)} AS questionCount
WHERE questionCount > 1
RETURN t.name
ORDER BY questionCount DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.favorites = 0
RETURN u.id, u.display_name, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 2000
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws'})
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u
ORDER BY q.score ASC
LIMIT 1",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WITH u, count(q) AS questionsAsked
ORDER BY questionsAsked DESC
LIMIT 3
RETURN u.display_name AS UserName, questionsAsked",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 100000
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.downVotes > 2
RETURN t.name",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u
ORDER BY q.createdAt ASC
LIMIT 1",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.upVotes = 0 AND q.downVotes = 0
RETURN q.title",Simple Aggregation Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= '2020-01-01T00:00:00Z' AND q.createdAt < '2021-01-01T00:00:00Z'
RETURN q
ORDER BY q.score DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-js'})
RETURN u",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WITH q, count{(q)-[:TAGGED]->(:Tag)} AS tagCount
WHERE tagCount > 1
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.favorites IS NOT NULL
RETURN q
ORDER BY q.favorites ASC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.link CONTAINS 'apollo-server'
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score < 0
RETURN count(q) AS NegativeScoreQuestionsCount",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'node.js'})
WHERE u.reputation < 5000
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt < datetime('2021-01-01T00:00:00Z')
RETURN u.id, u.display_name, u.reputation
ORDER BY u.reputation DESC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.createdAt >= '2018-01-01T00:00:00Z' AND q.createdAt <= '2018-12-31T23:59:59Z' AND q.answered = TRUE
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image IS NOT NULL
RETURN q
ORDER BY q.score ASC
LIMIT 1",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question {favorites: 0})
RETURN count(DISTINCT u) AS NumberOfUsers",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = TRUE AND q.favorites > 5
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes = 1
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH q, count{(q)-[:TAGGED]->(:Tag)} AS tagCount
ORDER BY tagCount DESC
LIMIT 1
MATCH (u:User)-[:ASKED]->(q)
RETURN u",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt >= '2020-06-05T00:00:00Z' AND q.createdAt < '2020-06-06T00:00:00Z'
RETURN count(q) AS questionsCount",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'error'
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score < -1
RETURN u",Simple Aggregation Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.upVotes > 5 AND q.downVotes > 5
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.upVotes = 0 AND q.downVotes = 0
RETURN q
ORDER BY q.createdAt
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.createdAt >= datetime('2020-06-01T00:00:00Z') AND q.createdAt < datetime('2020-07-01T00:00:00Z')
RETURN t.name, count(q) AS questionCount
ORDER BY questionCount DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= '2019-01-01T00:00:00Z' AND q.createdAt < '2020-01-01T00:00:00Z'
RETURN u, q
ORDER BY q.score DESC
LIMIT 1",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score > 0
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-subscriptions'})
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question {title: 'GraphQL subscription delay on first time'})
RETURN u.display_name AS asked_by",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.upVotes DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User {id: 10251021})-[:ASKED]->(q:Question)
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS questionsCount
WHERE questionsCount > 3
RETURN u",Simple Aggregation Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image IS NULL
RETURN q
ORDER BY q.score DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true
RETURN count(q) AS AnsweredQuestionsCount",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.answered = false
RETURN DISTINCT t.name",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(:Question)
RETURN u.display_name, u.reputation
ORDER BY u.reputation DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q.link
ORDER BY q.favorites DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt < datetime('2020-06-01T00:00:00Z')
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.score <= 0
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'react-apollo'})
RETURN u",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (:Tag {name: 'aws-lambda'})<-[:TAGGED]-(q:Question)<-[:ASKED]-(u:User)
RETURN COUNT(DISTINCT u) AS distinct_users",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.favorites IS NOT NULL
RETURN q
ORDER BY q.favorites DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.downVotes DESC
LIMIT 1",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question {favorites: 0})
RETURN u.id",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.score > 0
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'})
WHERE q.downVotes > 0
RETURN q
ORDER BY q.createdAt
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'node.js'})
RETURN MAX(u.reputation) AS highestReputation",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 100000
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.link CONTAINS 'stackoverflow.com/questions'
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score = 0
RETURN q
ORDER BY q.createdAt ASC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'})
WHERE q.answered = true
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt >= datetime('2020-06-05T00:00:00Z') AND q.score > 0
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.title CONTAINS 'GraphQL'
RETURN u",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo-server-lambda'})
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q.title
ORDER BY q.favorites DESC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.answered = true
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
RETURN u.id",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.favorites IS NOT NULL
RETURN q
ORDER BY q.favorites ASC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
WHERE length(q.text) > 500
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u, q
ORDER BY u.reputation DESC
LIMIT 1",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt < datetime('2021-01-01T00:00:00Z')
RETURN q.title
ORDER BY q.createdAt ASC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.downVotes > 2
RETURN t.name",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'})
RETURN u.link AS UserProfileLink",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.upVotes = 1
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation < 5000
RETURN q.title",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'not loading'
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.text CONTAINS 'error'
RETURN u",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.score < 0
RETURN t.name, count(q) AS usage
ORDER BY usage DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
RETURN q
ORDER BY q.createdAt
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
RETURN u.display_name, u.reputation
ORDER BY u.reputation DESC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.favorites > 5
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt < datetime('2020-06-01T00:00:00Z')
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.upVotes DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score < 0
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS questionsCount
WHERE questionsCount > 3
RETURN u",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true
RETURN q.title",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.downVotes DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.score < -1
RETURN t.name",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.createdAt = datetime('2020-06-05T00:00:00Z')
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE t.name = 'apollo'
WITH u, count(q) AS questionsAsked
ORDER BY questionsAsked DESC
LIMIT 3
RETURN u.display_name, questionsAsked",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.upVotes > 0 AND q.downVotes > 0
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.upVotes = 0 AND q.downVotes = 0
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 3
RETURN u.link AS UserProfileLink",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (:Tag {name: 'react-apollo'})<-[:TAGGED]-(q:Question)
RETURN count(q) AS NumberOfQuestionsTaggedWithReactApollo",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.favorites >= 1
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.createdAt >= '2020-02-01T00:00:00Z' AND q.createdAt <= '2020-02-29T23:59:59Z'
RETURN q.title",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE NOT exists{ (q)-[:ASKED]->(:User) WHERE q.downVotes > 0 }
RETURN u",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User {id: 10251021})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= datetime('2020-06-01T00:00:00Z') AND q.createdAt < datetime('2020-07-01T00:00:00Z')
RETURN u",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes = 1
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image IS NOT NULL
RETURN q.title",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt = datetime('2020-06-05T21:49:16Z')
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.text CONTAINS 'expected behavior'
RETURN q
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.createdAt >= '2019-08-01T00:00:00Z' AND q.createdAt < '2019-09-01T00:00:00Z'
RETURN q.title",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.title CONTAINS 'error'
RETURN u.link AS UserProfileLink",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt <= datetime('2020-12-31T23:59:59Z')
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'apollo'})
WHERE q.score > 1
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.createdAt >= '2019-01-01T00:00:00Z' AND q.createdAt <= '2019-12-31T23:59:59Z' AND q.answered = true
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score < -1
RETURN u.id",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'nuxt.js'})
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.title CONTAINS 'loading'
RETURN u",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt >= datetime('2020-06-01T00:00:00Z') AND q.createdAt < datetime('2020-07-01T00:00:00Z')
RETURN q.title
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.title CONTAINS 'playground'
RETURN u",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'mongoose'})
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question {score: -1})
RETURN q.title
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation = 420137
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.text CONTAINS 'deployment'
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes = 0
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image ENDS WITH '.com'
RETURN q.title",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 100000
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation = 1
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.createdAt >= '2020-01-01T00:00:00Z' AND q.createdAt <= '2020-12-31T23:59:59Z'
RETURN t.name",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.score = 0
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.score = 0
RETURN t.name",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.link CONTAINS 'mongodb.net'
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.link IS NOT NULL
RETURN q
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation = 420137
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'react-apollo'})
WHERE q.upVotes > 0
RETURN q
ORDER BY q.createdAt ASC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes > 0 AND q.text CONTAINS 'internal'
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.id > 60000000
RETURN q.title
ORDER BY q.id ASC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE u.reputation > 10000
RETURN u",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.favorites > 3
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation < 1000
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE u.image IS NULL
RETURN t.name AS TagName",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true
RETURN q
ORDER BY q.upVotes DESC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.text CONTAINS 'schema'
RETURN q;",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes > q.upVotes
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt <= datetime('2020-12-31T23:59:59Z') AND q.favorites = 0
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.id < 1000000
RETURN q
ORDER BY q.createdAt
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question {score: 0})
RETURN q.title
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.createdAt = datetime('2020-06-05T00:00:00Z')
RETURN t.name",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.title CONTAINS 'apollo-server'
RETURN u",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'mongodb'})
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 300000
RETURN q.title
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name CONTAINS 'Le'
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User {display_name: 'Alexandre'})-[:ASKED]->(q:Question)
RETURN q.title",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt = datetime('2020-06-05T00:00:00Z')
RETURN u
ORDER BY u.reputation DESC
LIMIT 1",Simple Aggregation Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image IS NULL
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
WHERE length(q.text) > 500
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q.id AS QuestionID, q.title AS Title, (q.upVotes + q.downVotes) AS TotalVotes
ORDER BY TotalVotes DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.score ASC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name AS Tag, sum(q.favorites) AS TotalFavorites
ORDER BY TotalFavorites DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WITH u, count(t) AS numTags
ORDER BY numTags DESC
LIMIT 3
RETURN u",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'error'
RETURN q
ORDER BY q.score DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(:Question)
RETURN u
ORDER BY u.reputation ASC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
RETURN q
ORDER BY length(q.link) DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
RETURN q
ORDER BY length(q.text) DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.createdAt >= datetime({year: date().year - 1})
WITH u, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 5
RETURN u.display_name, u.id, questions_asked",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
RETURN u
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
RETURN q
ORDER BY q.upVotes DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question {answered: true})
WHERE q.favorites IS NOT NULL
RETURN q
ORDER BY q.favorites ASC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (t:Tag)<-[:TAGGED]-(:Question)
WITH t, count(*) AS usageCount
ORDER BY usageCount ASC
LIMIT 3
RETURN t.name, usageCount",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u, q.createdAt AS QuestionDate
ORDER BY q.createdAt DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY abs(q.upVotes - q.downVotes)
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, AVG(q.score) AS avgScore
ORDER BY avgScore DESC
LIMIT 3
RETURN u.display_name AS UserName, avgScore",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.answered = false
RETURN t.name, count(q) AS UnansweredCount
ORDER BY UnansweredCount DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.upVotes = 0
WITH u, count(q) AS questionsCount
ORDER BY questionsCount DESC
LIMIT 3
RETURN u.display_name, questionsCount",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE NOT exists{ (u)-[:ASKED]->(:Question {downVotes: 0}) }
RETURN u
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = FALSE
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
RETURN q
ORDER BY length(q.title) DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.text CONTAINS 'error' AND u.image IS NOT NULL
RETURN q, u",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'react-apollo'})
WHERE q.title CONTAINS 'Drupal'
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.createdAt = datetime('2019-08-15T00:00:00Z') AND q.answered = true
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score < -3
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'angular'})
WITH u, count(q) AS questionsCount
ORDER BY questionsCount DESC
LIMIT 1
RETURN u.display_name AS user, questionsCount",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.createdAt >= datetime('2020-06-01T00:00:00Z') AND q.createdAt < datetime('2020-07-01T00:00:00Z')
  AND q.answered = true AND t.name = 'node.js'
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 50000
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question {answered: true})
RETURN q
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.reputation DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.favorites DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.upVotes DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (:Question)-[:TAGGED]->(t:Tag)
RETURN t.name, count(*) AS frequency
ORDER BY frequency DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.downVotes DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u.id, u.display_name, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name AS TagName, q.createdAt AS DateAdded
ORDER BY q.createdAt DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.score ASC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.commentsCount DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WITH u, count(q) AS questionsCount
ORDER BY questionsCount DESC
LIMIT 5
RETURN u.display_name, questionsCount",Simple Aggregation Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
RETURN q
ORDER BY length(q.text)
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.upVotes = 0
RETURN u
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation < 100
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.text CONTAINS 'http'
RETURN q
ORDER BY size([link IN split(q.text, ' ') WHERE link STARTS WITH 'http']) DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE t.name = 'graphql-subscriptions'
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.upVotes > 0 AND q.downVotes > 0
RETURN q",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.createdAt >= '2018-01-01T00:00:00Z' AND q.createdAt <= '2018-12-31T23:59:59Z'
RETURN t.name",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score = 1 AND q.createdAt >= datetime('2017-01-01T00:00:00Z') AND q.createdAt < datetime('2018-01-01T00:00:00Z')
RETURN q",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE t.name = 'GraphQL'
RETURN u
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.link CONTAINS 'github'
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name STARTS WITH 'A'
RETURN q.title AS QuestionTitle, u.display_name AS UserName",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.text CONTAINS 'subscription'
RETURN q
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.answered = true
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-js'})
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt <= datetime('2020-12-31T23:59:59Z')
RETURN t.name
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.upVotes = 0
RETURN u
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q.title, q.favorites
ORDER BY q.favorites DESC
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question {downVotes: 1})
RETURN q.title, q.link
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE u.reputation > 1000 AND t.name = 'graphql'
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.link CONTAINS 'stackoverflow' AND q.answered = true
RETURN q
ORDER BY q.createdAt
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.createdAt < datetime('2018-01-01T00:00:00Z')
RETURN t.name",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS questionsCount
WHERE questionsCount > 5
RETURN u",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.upVotes DESC
LIMIT 5",Complex Aggregation Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.downVotes > 10
RETURN t.name
LIMIT 3",Complex Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.favorites >= 1
RETURN u
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.title CONTAINS 'graphql'
RETURN u
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE t.name = 'graphql' AND q.link CONTAINS 'stackoverflow'
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation < 500
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.upVotes DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.title CONTAINS ""GraphQL""
RETURN t.name
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.score >= 1
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS numQuestions
WHERE numQuestions > 1
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-js'})
WHERE q.downVotes > 0
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 2000
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
RETURN count(q) AS NumberOfQuestions",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image ENDS WITH 'identicon'
RETURN q
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = FALSE AND q.score < 0
RETURN q.title",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS totalQuestions, sum(CASE WHEN q.answered = true THEN 1 ELSE 0 END) AS answeredQuestions
WHERE totalQuestions > 0
RETURN u.display_name, u.id, u.reputation, (toFloat(answeredQuestions) / totalQuestions) AS answerRate
ORDER BY answerRate DESC, totalQuestions DESC
LIMIT 3",Simple Aggregation Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE t.name = 'GraphQL' AND q.title CONTAINS 'hierarchical data types'
RETURN u.display_name, u.reputation
ORDER BY u.reputation DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.favorites = 0 AND q.upVotes >= 1
RETURN q
ORDER BY q.createdAt
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-subscriptions'})
RETURN u
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.createdAt >= datetime('2020-06-05T00:00:00Z')
RETURN count(q) AS NumberOfQuestions",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.answered = true
RETURN q.link",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score = 0 AND q.answered = FALSE
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.downVotes DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score >= 3
RETURN q.title
ORDER BY q.createdAt ASC
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.downVotes > 0
RETURN DISTINCT t.name",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User {display_name: 'Christopher'})-[:ASKED]->(q:Question)
WITH q
ORDER BY q.createdAt ASC
LIMIT 3
MATCH (q)-[:TAGGED]->(t:Tag)
RETURN q.id, q.title, t.name",Pathfinding Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE t.name = 'GraphQL' AND q.createdAt >= '2020-06-01T00:00:00Z' AND q.createdAt < '2020-07-01T00:00:00Z'
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.link CONTAINS 'stackoverflow' AND q.favorites > 1
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.favorites DESC
LIMIT 5",Simple Aggregation Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
WHERE size((q)-[:TAGGED]->(:Tag)) > 1
RETURN q
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (t:Tag)<-[:TAGGED]-(q:Question)
WITH t, count(q) AS numQuestions
WHERE numQuestions > 1
RETURN t.name
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.downVotes DESC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u.id, u.display_name, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = false
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.score ASC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
RETURN q
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)
WHERE u.image IS NOT NULL
RETURN u.image, u.display_name, u.reputation
ORDER BY u.reputation DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question {answered: true})
RETURN q
ORDER BY q.downVotes DESC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt < datetime('2021-01-01T00:00:00Z')
RETURN q
ORDER BY q.createdAt
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 2000
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.createdAt
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.text CONTAINS 'schema'
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.favorites ASC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'react-apollo'})
RETURN u
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation < 1000
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)
WHERE NOT EXISTS {
  MATCH (u)-[:ASKED]->(:Question)-[:TAGGED]->(:Tag {name: 'node.js'})
}
RETURN u
ORDER BY u.reputation DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
RETURN q
ORDER BY length(q.title) ASC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.link IS NOT NULL
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.upVotes DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.reputation DESC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.score DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question {answered: true})
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql-js'})
WHERE q.upVotes > 1
RETURN q.title",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name STARTS WITH 'A'
RETURN count(q) AS NumberOfQuestions",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.title CONTAINS 'subscription'
RETURN u",Simple Aggregation Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.createdAt >= '2019-01-01T00:00:00Z' AND q.createdAt < '2020-01-01T00:00:00Z' AND q.score < 0
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.link CONTAINS 'stackoverflow' AND q.score > 2
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE date(q.createdAt).dayOfWeek = 1
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.createdAt >= '2018-01-01T00:00:00Z' AND q.createdAt <= '2018-12-31T23:59:59Z'
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 10000
RETURN AVG(q.score) AS average_score",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.score = 1 AND u.display_name CONTAINS 'Le'
RETURN q",Simple Aggregation Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
RETURN q
ORDER BY length(q.text) DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.favorites > 3 AND u.id < 100000
RETURN q",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.favorites > 5
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
RETURN u",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.upVotes > 10
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.downVotes DESC
LIMIT 3",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WHERE u.reputation > 100000
RETURN t.name AS TagName",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = FALSE AND q.createdAt < datetime('2020-01-01T00:00:00Z')
RETURN q",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true
RETURN q
ORDER BY q.score DESC
LIMIT 5",Pathfinding Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.favorites DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'react-apollo'})
WHERE q.createdAt >= '2019-01-01T00:00:00Z' AND q.createdAt < '2020-01-01T00:00:00Z'
RETURN count(q) AS NumberOfQuestions",Simple Aggregation Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'error'
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY size(split(q.text, ' ')) DESC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
RETURN q
ORDER BY q.score DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.upVotes > 2
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.favorites > 5
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.downVotes >= 5
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.createdAt >= datetime('2020-01-01T00:00:00Z') AND q.createdAt <= datetime('2020-12-31T23:59:59Z')
RETURN q
ORDER BY q.upVotes DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question {title: 'Playground is not loading with apollo-server-lambda'})
RETURN u",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'react-apollo'})
WHERE q.answered = FALSE
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.reputation > 100
RETURN q
ORDER BY q.createdAt DESC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.text CONTAINS 'GraphQL' AND t.name = 'angular'
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image CONTAINS 'googleusercontent'
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.favorites DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.createdAt = datetime('2020-06-05T00:00:00Z') AND q.score < 0
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'Apollo' AND q.createdAt < datetime('2020-01-01T00:00:00Z')
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'node.js'})
WHERE q.downVotes > 3
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score = 0 AND q.favorites = 0
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'GraphQL'})
RETURN u.display_name, u.reputation
ORDER BY u.reputation DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User {display_name: 'Stzl'})-[:ASKED]->(q:Question)
WHERE q.title CONTAINS 'bad request'
RETURN u, q",Complex Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE q.createdAt >= '2019-01-01T00:00:00Z' AND q.createdAt <= '2019-12-31T23:59:59Z' AND q.upVotes = 0
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name STARTS WITH 'Alex'
RETURN q
ORDER BY q.createdAt
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.downVotes DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.id > 9000000
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.link ENDS WITH 'alexandre'
RETURN q
ORDER BY q.score DESC
LIMIT 5",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User {reputation: 65})-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.createdAt ASC
LIMIT 3",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'aws-lambda'})
WHERE q.score < 0
RETURN q",Complex Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE date(q.createdAt).month = 1 AND date(q.createdAt).day = 1 OR
      date(q.createdAt).month = 12 AND date(q.createdAt).day = 25
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(:Question)
RETURN u
ORDER BY u.reputation ASC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WITH q, count(t) AS numTags
ORDER BY numTags DESC
LIMIT 5
RETURN q",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.image CONTAINS 'googleusercontent'
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
RETURN q.id AS QuestionID, q.title AS Title, (q.upVotes + q.downVotes) AS TotalVotes
ORDER BY TotalVotes DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.text CONTAINS 'http'
RETURN q
ORDER BY size([link IN split(q.text, ' ') WHERE link STARTS WITH 'http']) DESC
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.id < 5000
RETURN q
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score = 0
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.favorites = 0
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,True,False,False
"MATCH (t:Tag)
WHERE size((t)<-[:TAGGED]-(:Question)) = 1
RETURN t.name
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
WITH u, count(DISTINCT t) AS distinctTags
ORDER BY distinctTags DESC
LIMIT 5
RETURN u.display_name, distinctTags",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.answered = true AND q.score < 0
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,False
"MATCH (q:Question)
WHERE exists{(q)<-[:ANSWERS]-(:Answer)}
WITH q, count{(q)<-[:ANSWERS]-(:Answer)} AS answersCount
WHERE answersCount > 1
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.text CONTAINS 'schema'
RETURN q
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE q.score > 5
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
WHERE size((q)-[:TAGGED]->(:Tag)) = 3
RETURN q
ORDER BY q.score DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.title CONTAINS 'variables'
RETURN u
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'graphql'})
WHERE q.answered = true
RETURN q
ORDER BY q.createdAt DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name STARTS WITH 'A'
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,True,False,False
"MATCH (q:Question)
RETURN q.title, length(q.title) AS titleLength
ORDER BY titleLength DESC
LIMIT 5",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (q:Question)
WHERE date(q.createdAt).dayOfWeek IN [6, 7]
RETURN q
ORDER BY q.createdAt
LIMIT 3",Simple Retrieval Queries,buzzoverflow,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
WITH o, count(s) AS subsidiariesCount
ORDER BY subsidiariesCount DESC
LIMIT 3
RETURN o.name AS OrganizationName, subsidiariesCount",Verbose query,companies,False,False,True
"MATCH (ic:IndustryCategory)
RETURN ic.name
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees > 100
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (c:City)-[:IN_COUNTRY]->(co:Country {name: ""United States of America""})
RETURN c.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
RETURN o.name AS Organization, p.name AS CEO
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue > 100000000
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""Accenture""})<-[:MENTIONS]-(a:Article)
RETURN a
ORDER BY a.date DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN o",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
WHERE o.summary CONTAINS 'Accenture'
RETURN o",Verbose query,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_BOARD_MEMBER]-(o:Organization)
WHERE o.revenue > 100000000
RETURN o.name",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'})
RETURN a
ORDER BY a.date DESC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'Accenture' AND o.revenue > 100000000
RETURN o.name",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE EXISTS {
  MATCH (a:Article)-[:MENTIONS]->(o)
  WITH p, COUNT(a) AS articlesCount
  WHERE articlesCount > 1
  RETURN p
}
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)
WHERE sub.nbrEmployees IS NOT NULL
RETURN o.name AS ParentOrganization, sub.name AS Subsidiary, sub.nbrEmployees AS NumberOfEmployees
ORDER BY sub.nbrEmployees DESC
LIMIT 3",Verbose query,companies,False,False,False
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)-[:AUTHORED]->(article:Article)
WHERE article.sentiment > 0.5
RETURN org.name AS OrganizationName, ceo.name AS CEOName, article.title AS ArticleTitle, article.sentiment AS SentimentScore",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'})
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'Accenture' AND o.revenue > 50000000
RETURN o
ORDER BY o.revenue DESC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (a:Article {author: ""James Blackman""})
RETURN a.title
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)<-[:MENTIONS]-(a:Article)
WHERE o.revenue > 50000000
WITH o, p, count(DISTINCT a) AS articlesCount
WHERE articlesCount >= 2
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = true
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {isDissolved: true})
RETURN o.name
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Chattanooga""})
MATCH (o)-[:HAS_CATEGORY]->(ic:IndustryCategory)
RETURN o.name AS OrganizationName, ic.name AS IndustryCategory",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})-[:IN_CITY]->(c:City)
RETURN DISTINCT c.name AS CityName",Complex Aggregation Queries,companies,False,False,False
"MATCH (childOrg:Organization)-[:HAS_PARENT]->(parentOrg:Organization)
WHERE parentOrg.revenue > 100000000
RETURN childOrg",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS 'cybersecurity'
MATCH (a)-[:MENTIONS]->(o:Organization)
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees IS NOT NULL
RETURN o.name, o.nbrEmployees
ORDER BY o.nbrEmployees DESC
LIMIT 5",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: 'Julie Spellman Sweet'})
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)
WHERE a.sentiment < 0.3
RETURN a",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 10000 AND NOT EXISTS {
  (c)-[:IS_CAPITAL_OF]->(:Country)
}
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Rome""})
RETURN o.name AS OrganizationName, o.revenue AS Revenue, o.nbrEmployees AS NumberOfEmployees",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization {name: ""Accenture""})<-[:HAS_INVESTOR]-(p:Person)
RETURN p",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.summary CONTAINS 'software'
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: false})-[:HAS_SUBSIDIARY]->(sub:Organization)
RETURN o, collect(sub) AS Subsidiaries",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WITH a.author AS author, COUNT(DISTINCT o) AS orgCount
WHERE orgCount > 3
RETURN author",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.motto CONTAINS 'technology'
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {name: ""New Energy Group""})-[:IN_CITY]->(c:City)
RETURN c.summary AS CitySummary",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)
WITH o, count(sub) AS numSubsidiaries
ORDER BY numSubsidiaries DESC
LIMIT 3
RETURN o.name AS Organization, numSubsidiaries",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE a.sentiment > 0.8
WITH o, a.date AS articleDate
ORDER BY articleDate DESC
RETURN DISTINCT o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE count{(o)-[:HAS_SUPPLIER]->(:Organization)} > 3
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Accenture""})
RETURN o.name AS OrganizationName",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.nbrEmployees IS NULL
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (parent:Organization {name: ""Accenture""})-[:HAS_SUBSIDIARY]->(subsidiary:Organization)
RETURN subsidiary.name AS SubsidiaryName",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WHERE o.revenue > 500000000
RETURN o.name AS Organization, p.name AS BoardMember",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk), (a)-[:MENTIONS]->(o:Organization)
WHERE a.siteName = ""MrWeb""
RETURN DISTINCT o.name AS OrganizationName",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country)
WHERE o.motto IS NOT NULL
RETURN DISTINCT c.name AS CountryName",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.date.year = 2022
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WITH c, count(o) AS orgCount
WHERE orgCount > 3
RETURN c.name, orgCount",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)<-[:MENTIONS]-(a:Article)
WHERE a.sentiment > 0
RETURN o.name AS Organization, c.name AS City, a.title AS ArticleTitle",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)-[:AUTHORED]->(a:Article)
RETURN o.name AS Organization, p.name AS CEO, collect(a.title) AS Articles",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment < 0
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (child:Organization)-[:HAS_PARENT]->(parent:Organization {name: 'Accenture'})
RETURN child",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
WITH supplier, count(o) AS numClients
WHERE numClients > 3
RETURN supplier.name",Complex Aggregation Queries,companies,True,False,False
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN o.name AS Organization, collect(p.name) AS BoardMembers
ORDER BY o.revenue DESC
LIMIT 5",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees > 500 AND o.isDissolved = true
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CEO]->(org:Organization)
MATCH (org)-[:HAS_CATEGORY]->(ind:IndustryCategory)
RETURN ind.name AS IndustryName",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
WITH o, count(supplier) AS suppliersCount
ORDER BY suppliersCount DESC
LIMIT 1
MATCH (o)-[:IN_CITY]->(city:City)
RETURN city.name AS CityName",Complex Aggregation Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
WHERE EXISTS { 
    (org)-[:HAS_CATEGORY]->(:IndustryCategory {name: ""Energy""})
}
RETURN supplier",Complex Aggregation Queries,companies,False,True,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
RETURN a",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(:Person)
WHERE exists{ (o)-[:HAS_SUBSIDIARY]->(:Organization) }
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE o.revenue < 10000000
RETURN DISTINCT country.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE NOT EXISTS {
  MATCH (c)-[:IS_CAPITAL_OF]->(country)
}
RETURN o.name AS Organization, c.name AS City, country.name AS Country",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})-[:HAS_CEO]->(ceo:Person)
RETURN o.name AS OrganizationName, ceo.name AS CEOName",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:MENTIONS]->(a:Article)
WITH o, avg(a.sentiment) AS avgSentiment
ORDER BY avgSentiment DESC
LIMIT 3
RETURN o.name AS Organization, avgSentiment",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE count{(o)-[:HAS_COMPETITOR]->(:Organization)} > 2
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)-[:HAS_CHILD]->(child:Person)
RETURN o.name AS Organization, p.name AS BoardMember, collect(child.name) AS Children",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = false AND exists{(o)-[:HAS_SUBSIDIARY]->(:Organization)}
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (c:City)-[:IN_COUNTRY]->(country:Country)
WHERE EXISTS {
    (c)<-[:IN_CITY]-(org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory)
    WHERE cat.name = ""Software Companies"" AND org.isPublic = true
}
RETURN DISTINCT country.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
MATCH (a:Article)-[:MENTIONS]->(o)
RETURN a.summary AS ArticleSummary",Complex Aggregation Queries,companies,False,False,False
"MATCH (ceo:Person)-[:HAS_CEO]->(org:Organization)
WHERE org.revenue >= 1E8
MATCH (ceo)-[:HAS_PARENT]->(parent:Person)
RETURN ceo.name AS CEOName, parent.name AS ParentName",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
RETURN o.name AS OrganizationName, c.name AS CityName",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WITH o, count(p) AS boardMembersCount
WHERE boardMembersCount > 3
RETURN o.name AS OrganizationName",Complex Aggregation Queries,companies,False,False,True
"MATCH (c:City)-[:IN_COUNTRY]->(country:Country)
WHERE exists {
  (c)<-[:IN_CITY]-(o:Organization)<-[:MENTIONS]-(a:Article)
  WHERE a.sentiment > 0.5
}
RETURN DISTINCT country",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {name: ""New Energy Group""})<-[:MENTIONS]-(a:Article)
RETURN a",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {name: ""New Energy Group""})<-[:MENTIONS]-(a:Article)
RETURN a
ORDER BY a.date DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE o.nbrEmployees > 100
RETURN DISTINCT country
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE o.motto CONTAINS 'security'
RETURN o
ORDER BY o.revenue DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (c:City)<-[:IN_CITY]-(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Healthcare""})
WITH c, count(o) AS orgCount
ORDER BY orgCount DESC
LIMIT 5
RETURN c.name AS City, orgCount AS NumberOfOrganizations",Pathfinding Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_PARENT]->(parent:Person)
RETURN parent
ORDER BY parent.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WITH o, count(p) AS boardMembersCount
WHERE boardMembersCount > 2
RETURN o
ORDER BY boardMembersCount DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN a.title, a.sentiment, a.date, a.author
ORDER BY a.sentiment DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = false AND o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue ASC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
RETURN o",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
RETURN o, count{(o)-[:HAS_SUPPLIER]->(:Organization)} AS supplierCount
ORDER BY supplierCount DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.revenue < 10000000
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Pathfinding Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: ""Technology""})
WITH org
ORDER BY org.id
LIMIT 3
MATCH (org)-[:HAS_BOARD_MEMBER]->(person:Person)
RETURN org.name AS OrganizationName, collect(person.name) AS BoardMembers",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE count{(o)-[:HAS_SUBSIDIARY]->(:Organization)} > 3
RETURN o
ORDER BY count{(o)-[:HAS_SUBSIDIARY]->(:Organization)} DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_COMPETITOR]->(:Organization {name: ""Google""})
RETURN o
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
RETURN a
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (i:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization)
WITH i, count(o) AS orgCount
WHERE orgCount > 5
RETURN i.name AS Industry, orgCount
ORDER BY orgCount DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE o.revenue > 50000000
RETURN p.name AS CEO_Name, o.name AS Organization_Name, o.revenue AS Revenue
ORDER BY o.revenue DESC
LIMIT 5",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})<-[:HAS_SUPPLIER]-(supplier:Organization)
RETURN supplier
ORDER BY supplier.revenue DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_INVESTOR]->(invested:Organization)
WITH o, count(invested) AS investments
WHERE investments > 3
RETURN o
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE EXISTS { (o)-[:HAS_CATEGORY]->(:IndustryCategory {name: ""Software""}) }
RETURN c.name, count(o) AS NumberOfCompanies
ORDER BY NumberOfCompanies DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.nbrEmployees IS NOT NULL
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article {author: 'David Correa'})-[:MENTIONS]->(o:Organization)
RETURN o",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.sentiment < 0.5
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 5",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Software""})
WHERE EXISTS { (o)-[:IN_CITY]->(:City {name: ""Rome""}) }
RETURN o
ORDER BY o.revenue DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (ceo:Person {name: ""Julie Spellman Sweet""})-[:HAS_CEO]-(org:Organization)
WITH org
MATCH (org)-[:HAS_CATEGORY]->(industry:IndustryCategory)
WITH industry, count(org) AS orgCount
ORDER BY orgCount DESC
RETURN industry.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: ""Accenture""})
RETURN a.id, a.title, a.date
ORDER BY a.date ASC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 100
RETURN DISTINCT c.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (c:City {name: ""Houston""})<-[:IN_CITY]-(o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN p",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {name: ""New Energy Group""})-[:HAS_CATEGORY]->(ic:IndustryCategory)
RETURN ic.name AS IndustryCategory",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization {name: ""Accenture""})
RETURN o.name AS OrganizationName",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)<-[:HAS_INVESTOR]-(investor:Organization {name: ""Accenture""})
RETURN o.name AS OrganizationName",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees > 1000 AND o.isPublic = false
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization {name: ""Deja vu Security""})-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
MATCH (o)-[:HAS_CEO]->(p:Person)
RETURN o.name AS Organization, p.name AS CEO",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = true AND o.isPublic = true
RETURN o.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue > 1000000000
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article {author: ""David Correa""})-[:MENTIONS]->(o:Organization)
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Chicago""})
WHERE EXISTS {
    (a:Article)-[:MENTIONS]->(o)
    WHERE a.sentiment < 0.6
}
RETURN o
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""New York City""})
MATCH (supplier:Organization)-[:HAS_SUPPLIER]->(o)
RETURN supplier.name, count(o) AS numSupplied
ORDER BY numSupplied DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_INVESTOR]->(o:Organization)
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_BOARD_MEMBER]-(o:Organization)
RETURN o
ORDER BY o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.summary CONTAINS 'financial services'
RETURN a
ORDER BY a.date DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Transportation""})
WHERE o.revenue IS NOT NULL
RETURN o.name, o.revenue
ORDER BY o.revenue DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE o.nbrEmployees < 50
RETURN p.name AS CEO_Name, o.name AS Organization_Name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_COMPETITOR]->(:Organization {name: ""Apple""})
RETURN o.name AS OrganizationName
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
MATCH (o)-[:IN_CITY]->(c:City)
RETURN c.name, count(o) AS numOrganizations
ORDER BY numOrganizations DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE org.isDissolved = true
RETURN ceo.name AS CEO_Name, org.name AS Organization_Name
ORDER BY org.revenue DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment > 0.7
RETURN o
ORDER BY a.sentiment DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CHILD]->(child:Person)
RETURN child.name AS ChildName",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE EXISTS {
  MATCH (p)-[:HAS_BOARD_MEMBER]->(:Organization)
}
RETURN o.name AS Organization, p.name AS CEO",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization), (o)-[:IN_CITY]->(c:City)
WHERE c.nbrResidents > 500000
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_INVESTOR]->(investor)
WHERE o.revenue > 500000000
RETURN o.name AS Organization, collect(investor.name) AS Investors",Complex Aggregation Queries,companies,False,False,False
"MATCH (p:Person {summary: ""CEO at Accenture""})-[:HAS_CEO]->(org:Organization)
RETURN org.name AS OrganizationName",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
WHERE supplier.revenue > 100000000
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WITH o, count(p) AS boardMembersCount
ORDER BY boardMembersCount DESC
LIMIT 3
RETURN o.name AS OrganizationName, boardMembersCount",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'})
RETURN o.name AS OrganizationName, sub.name AS SubsidiaryName",Verbose query,companies,False,False,False
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)-[:HAS_BOARD_MEMBER]->(:Person)-[:HAS_COMPETITOR]->(competitor:Organization)
WHERE org.id <> competitor.id
RETURN org.name AS Organization, ceo.name AS CEO
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk), (a)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(city:City)
WHERE a.sentiment IS NOT NULL
RETURN city.name, avg(a.sentiment) AS averageSentiment
ORDER BY averageSentiment DESC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'Accenture'
RETURN o.name",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization)
WHERE s.summary CONTAINS 'Dublin'
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WITH o, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3
RETURN o.name, mentions",Verbose query,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
WHERE o.revenue > 100000000
RETURN o",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WITH ic, count(o) AS numOrganizations
ORDER BY numOrganizations DESC
LIMIT 3
RETURN ic.name AS IndustryCategory, numOrganizations",Verbose query,companies,False,False,False
"MATCH (p:Person)-[:HAS_CHILD]->(child:Person)-[:HAS_CEO]->(org:Organization)
RETURN p.name AS ParentName, child.name AS ChildName, org.name AS OrganizationName
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
WHERE supplier.revenue < 5000000
RETURN o.name AS OrganizationName",Verbose query,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE exists {
  (p)-[:HAS_BOARD_MEMBER]->(:Organization)
}
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_SUBSIDIARY]->(:Organization)} AS numSubsidiaries
ORDER BY numSubsidiaries DESC
LIMIT 3
RETURN o.name, numSubsidiaries",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment > 0.8
RETURN o",Verbose query,companies,False,False,True
"MATCH (ic:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization)
WHERE o.summary CONTAINS 'technology'
RETURN ic.name
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: ""Rome""})
RETURN a
ORDER BY a.date DESC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'CEO at Accenture'
RETURN o.name",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_COMPETITOR]->(:Organization)
WHERE o.revenue > 50000000
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.nbrEmployees IS NOT NULL
RETURN o
ORDER BY o.nbrEmployees ASC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE c.summary CONTAINS 'county seat'
RETURN o",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE o.isPublic = true
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (org1:Organization)-[:HAS_BOARD_MEMBER]->(p:Person),
      (org2:Organization)-[:HAS_CEO]->(p)
RETURN org1.name AS OrganizationWithBoardMember, org2.name AS OrganizationWithCEO
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization {name: 'Accenture'})
RETURN o.name AS OrganizationName",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(child:Organization)
WITH o, count(child) AS numSubsidiaries
ORDER BY numSubsidiaries DESC
LIMIT 3
RETURN o.name AS OrganizationName, numSubsidiaries",Verbose query,companies,False,False,False
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)-[:MENTIONED_IN]->(a:Article)
WITH p, count(DISTINCT a) AS articlesCount, collect(o) AS organizations
WHERE articlesCount > 1
RETURN p.name AS boardMemberName, organizations",Verbose query,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'software'
RETURN o
LIMIT 5",Verbose query,companies,False,False,False
"MATCH (o:Organization)<-[:HAS_BOARD_MEMBER]-(p:Person)-[:HAS_CEO]->(otherOrg:Organization)
WITH o, COUNT(DISTINCT p) AS ceoBoardMembers
ORDER BY ceoBoardMembers DESC
LIMIT 3
RETURN o.name AS Organization, ceoBoardMembers",Verbose query,companies,False,True,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk), (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE a.sentiment > 0.8 AND c.text CONTAINS p.name
RETURN o.name",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
RETURN o
LIMIT 5",Verbose query,companies,True,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)-[:AUTHORED]->(a:Article)
RETURN o.name AS OrganizationName, p.name AS CEOName, collect(a.title) AS Articles
ORDER BY count(a) DESC
LIMIT 3",Verbose query,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CEO]->(o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN o",Verbose query,companies,False,False,False
"MATCH (o:Organization {isPublic: true})-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'Accenture'
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)
RETURN o, count{(o)-[:HAS_SUPPLIER]->(:Organization)} AS supplierCount
ORDER BY supplierCount DESC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization)
WHERE s.revenue > 50000000
RETURN o.name AS OrganizationName",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WHERE o.summary CONTAINS 'software company'
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'Accenture'
RETURN o
ORDER BY o.revenue DESC
LIMIT 3",Verbose query,companies,False,False,False
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)-[:AUTHORED]->(a:Article)
RETURN o.name AS OrganizationName, p.name AS BoardMemberName, a.title AS ArticleTitle",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
WHERE o.revenue > 10000000
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: ""Chicago""})
RETURN a.title, a.sentiment, a.date
ORDER BY a.sentiment ASC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: 'Julie Spellman Sweet'})
MATCH (o)-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor.name",Verbose query,companies,False,False,False
"MATCH (o:Organization)<-[:HAS_INVESTOR]-(p:Person)-[:MENTIONED_IN]->(a:Article)
WITH o, p, count(DISTINCT a) AS articlesCount
WHERE articlesCount >= 2
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_COMPETITOR]->(:Organization)} AS competitors
ORDER BY competitors DESC
LIMIT 3
RETURN o.name, competitors",Verbose query,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE EXISTS {
  MATCH (p)-[:MENTIONED_IN]->(a:Article)
  WITH p, count(DISTINCT a) AS articlesCount
  WHERE articlesCount > 1
  RETURN p
}
RETURN o",Verbose query,companies,False,False,False
"MATCH (o:Organization)
WHERE o.motto CONTAINS 'security' AND o.nbrEmployees > 500
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (c:City)-[:IN_COUNTRY]->(country:Country)
WITH country, count(c) AS citiesCount
ORDER BY citiesCount DESC
LIMIT 3
RETURN country.name AS Country, citiesCount",Verbose query,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_BOARD_MEMBER]->(o:Organization)
RETURN o.name AS OrganizationName",Verbose query,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)-[:AUTHORED]->(a:Article)
WITH o, p, count(a) AS articlesCount
WHERE articlesCount > 1
RETURN o
LIMIT 5",Verbose query,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)-[:AUTHORED]->(a:Article)
RETURN o.name AS Organization, p.name AS CEO, a.title AS ArticleTitle
LIMIT 5",Verbose query,companies,True,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WITH country, a.sentiment AS sentiment
ORDER BY sentiment ASC
RETURN country.name AS Country, collect(a.title)[..3] AS Top_3_Lowest_Sentiment_Articles
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization {name: 'Accenture'})
RETURN o.name",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization)
WHERE o.nbrEmployees IS NOT NULL
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.date.year = 2022
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization) WHERE o.revenue > 1000000
MATCH (o)-[:HAS_BOARD_MEMBER]->(bm:Person)
MATCH (bm)-[:HAS_PARENT]->(p:Person)
RETURN bm.name AS BoardMember, p.name AS Parent",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.revenue < 500000
RETURN a",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE c.summary CONTAINS 'county seat'
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
WHERE EXISTS { (org)-[:HAS_CATEGORY]->(:IndustryCategory {name: ""Telecommunications""}) }
RETURN supplier.name",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""David Correa""})
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE o.isDissolved = true AND EXISTS {
  (o)<-[:MENTIONS]-(a:Article)
}
RETURN p.name AS CEO_Name, o.name AS Organization_Name",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory)
WITH o, count(c) AS numCategories
WHERE numCategories > 5
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.title CONTAINS 'security'
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE o.isPublic = true
RETURN DISTINCT country.name",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE o.summary CONTAINS 'consumer behavior'
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment = 0.5
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (org:Organization {isPublic: true})-[:HAS_CEO]->(ceo:Person)
MATCH (ceo)-[:HAS_PARENT]->(parent:Person)
RETURN org.name AS Organization, ceo.name AS CEO, parent.name AS Parent",Complex Aggregation Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_BOARD_MEMBER]->(o:Organization)
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(:Person)
WHERE o.isDissolved = true
RETURN o.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WITH o, count(DISTINCT country) AS countriesCount
WHERE countriesCount > 3
RETURN o.name AS Organization, countriesCount",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 500
RETURN DISTINCT c.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)-[:HAS_CHILD]->(child:Person)
WHERE org.revenue > 1E9
RETURN ceo.name AS CEOName, child.name AS ChildName",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: 'Rome'})
RETURN o.name AS OrganizationName, o.id AS OrganizationID",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.motto CONTAINS 'innovation'
RETURN o.name",Complex Aggregation Queries,companies,False,True,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE NOT country.name IN ['United States of America', 'Canada', 'Mexico']
RETURN a",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WITH o, count(ic) AS numCategories
WHERE numCategories > 1
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Electronic Products Manufacturers""})
WHERE o.revenue IS NOT NULL
RETURN o.name AS OrganizationName, o.revenue AS Revenue
ORDER BY o.revenue DESC
LIMIT 3",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(:Person)
WHERE count{(o)-[:HAS_SUPPLIER]->(:Organization)} > 10
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (c:City)-[:IN_COUNTRY]->(country:Country)
WITH country, count(c) AS citiesCount
ORDER BY citiesCount DESC
LIMIT 5
RETURN country.name AS Country, citiesCount",Pathfinding Queries,companies,True,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)<-[:HAS_INVESTOR]-(investor)
WHERE a.sentiment > 0
RETURN o.name AS Organization, collector(investor.name) AS Investors",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.date >= date('2020-01-01')
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization {isDissolved: true})-[:HAS_CEO]->(p:Person)
RETURN o.name AS OrganizationName, p.name AS CEOName
ORDER BY o.revenue DESC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WHERE o.summary CONTAINS 'software' AND o.isPublic = true
RETURN o",Verbose query,companies,False,False,False
"MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization)
WITH p, count(o) AS numOrgs
WHERE numOrgs > 1
RETURN p
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.nbrEmployees > 1000
RETURN a.title, a.sentiment, a.date
ORDER BY a.sentiment DESC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: 'Electronic Products Manufacturers'})
RETURN o.name",Verbose query,companies,False,False,True
"MATCH (org:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country)
WHERE NOT EXISTS {
  MATCH (capital:City)-[:IS_CAPITAL_OF]->(country)
  WHERE capital.name = city.name
}
RETURN org",Verbose query,companies,False,False,False
"MATCH (o:Organization)
WHERE o.motto CONTAINS 'security'
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.revenue < 10000000
RETURN c.name, count(o) AS numOrganizations
ORDER BY numOrganizations DESC
LIMIT 3",Verbose query,companies,False,False,False
"MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization)
WITH p, count(DISTINCT o) AS orgCount
WHERE orgCount >= 2
RETURN p.name AS BoardMemberNames",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = true AND o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 3",Verbose query,companies,False,False,False
"MATCH (org:Organization)-[:HAS_BOARD_MEMBER]->(person:Person)
WHERE exists {
    (person)-[:HAS_CEO]->(:Organization)
}
RETURN org",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
RETURN a
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE c.summary CONTAINS 'county seat'
RETURN o.name",Verbose query,companies,False,False,False
"MATCH (o:Organization)<-[:HAS_INVESTOR]-(p:Person)
WITH o, count(DISTINCT p) AS investorCount
WHERE investorCount > 1
RETURN o
ORDER BY investorCount DESC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
RETURN o",Verbose query,companies,False,False,True
"MATCH (o1:Organization)-[:HAS_COMPETITOR]->(o2:Organization)
WHERE o1.isPublic = true AND o2.isPublic = true
RETURN o1, o2
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_SUPPLIER]->(:Organization)} AS supplierCount
ORDER BY supplierCount DESC
LIMIT 3
RETURN o.name, supplierCount",Verbose query,companies,False,False,True
"MATCH (p:Person)
WHERE exists{(p)-[:HAS_PARENT]->(:Person)} AND exists{(p)-[:HAS_CHILD]->(:Person)}
RETURN p.name",Verbose query,companies,False,False,True
"MATCH (c:City)-[:IN_COUNTRY]->(country:Country)
WITH country, count(c) AS cityCount
WHERE cityCount > 1
RETURN country
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization)
WHERE s.nbrEmployees < 50
RETURN o.name AS Organization, s.name AS Subsidiary, s.nbrEmployees AS Employees",Verbose query,companies,False,False,False
"MATCH (p:Person)-[:HAS_CEO]->(o:Organization)
WHERE o.isPublic = true
RETURN p
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (i:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization)
WITH i, count(o) AS orgCount
WHERE orgCount >= 3
RETURN i.name AS IndustryCategoryName",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 500
RETURN c.name, count(o) AS numberOfOrganizations
ORDER BY numberOfOrganizations DESC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue > 100000000 AND o.isDissolved = false
RETURN o",Verbose query,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN p.name AS BoardMemberName",Simple Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(i:IndustryCategory)
WHERE a.sentiment > 0.8
RETURN DISTINCT i.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CHILD]->(child:Person)
RETURN child
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(:IndustryCategory), (o)-[:HAS_CEO]->(p:Person {name: 'Julie Spellman Sweet'})
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'Leader'
RETURN o
LIMIT 5",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)<-[:MENTIONS]-(a:Article)
WHERE a.siteName = 'RCR Wireless News'
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_COMPETITOR]->(competitor:Organization)-[:IN_CITY]->(city:City),
      (o)-[:HAS_SUPPLIER]->(supplier:Organization)-[:IN_CITY]->(city)
RETURN o.name AS Organization, city.name AS City
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.name CONTAINS 'Julie'
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.author IN ['female author names list']
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.name ENDS WITH 'Sweet'
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Technology""})
RETURN o
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(:Person), (org)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country)
WHERE country.name <> ""United States of America""
RETURN org",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'Technology'
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article {author: 'David Correa'})-[:MENTIONS]->(o:Organization)
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person), (o)-[:HAS_BOARD_MEMBER]->(bm:Person)
WHERE o.summary CONTAINS ceo.name AND o.summary CONTAINS bm.name
RETURN o.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN o.name AS Organization, o.nbrEmployees AS Employees
ORDER BY o.nbrEmployees DESC
LIMIT 1",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.nbrEmployees > 1000
RETURN a
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory)
WITH o, count(c) AS numCategories
WHERE numCategories > 1
RETURN o
LIMIT 5",Simple Retrieval Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)-[:BORN_IN]->(ceoCountry:Country),
      (org)-[:HAS_BOARD_MEMBER]->(boardMember:Person)-[:BORN_IN]->(boardMemberCountry:Country)
WHERE ceoCountry.name <> boardMemberCountry.name
RETURN org.name AS Organization, ceo.name AS CEO, ceoCountry.name AS CEO_Country, boardMember.name AS Board_Member, boardMemberCountry.name AS Board_Member_Country
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment < 0.5
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue > 50000000
WITH o
ORDER BY o.revenue DESC
LIMIT 3
MATCH (o)<-[:HAS_INVESTOR]-(investor)
RETURN o.name AS Organization, collect(investor.name) AS Investors",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)-[:AUTHORED]->(a:Article)
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(:Organization)
WHERE o.isPublic = true
RETURN o
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(:IndustryCategory), (o)-[:IN_CITY]->(c:City)
WHERE c.name CONTAINS 'Rome'
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.name STARTS WITH 'J'
RETURN o.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE c.name STARTS WITH 'S'
MATCH (o)-[:HAS_CEO]->(ceo:Person)
RETURN o.name AS Organization, ceo.name AS CEO
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees > 100 AND o.isDissolved = false
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 5",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.revenue > 100000000
RETURN o.name",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})<-[:HAS_SUPPLIER]-(supplier:Organization)
RETURN supplier.name
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
MATCH (o)-[:HAS_CEO]->(ceo:Person)
RETURN o.name AS Organization, ceo.name AS CEO",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE count{(o)-[:HAS_SUBSIDIARY]->(:Organization)} > 1
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.isDissolved = true
RETURN a",Complex Retrieval Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE org.nbrEmployees > 50
MATCH (ceo)-[:HAS_CHILD]->(child:Person), (ceo)-[:HAS_PARENT]->(parent:Person)
RETURN ceo.name AS CEOName, collect(child.name) AS Children, collect(parent.name) AS Parents",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})-[:IN_CITY]->(c:City)
RETURN DISTINCT c.name",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Electronic Products Manufacturers""})
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})<-[:HAS_INVESTOR]-(investor)
RETURN investor",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: 'United States of America'})
RETURN o.name AS OrganizationName, c.name AS CityName",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
RETURN a
ORDER BY a.date DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization)
WHERE o.motto IS NOT NULL
RETURN p.name
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)<-[:HAS_INVESTOR]-(p:Person {name: 'Accenture'})
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: 'Rome'})
RETURN a",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE o.revenue > 50000000
RETURN DISTINCT country.name",Complex Retrieval Queries,companies,False,False,False
"MATCH (p:Person)-[:WORKS_FOR]->(o:Organization)
WHERE o.nbrEmployees > 400
MATCH (p)-[:HAS_PARENT]->(parent:Person)
RETURN parent.name AS ParentName",Complex Retrieval Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CHILD]->(child:Person)
RETURN child",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.summary CONTAINS 'software' AND c.summary CONTAINS 'capital'
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WHERE o.revenue > 50000000
RETURN o.name AS Organization, p.name AS BoardMember",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {name: ""Deis""})-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
MATCH (o)-[:HAS_CATEGORY]->(ic:IndustryCategory)
RETURN ic.name AS IndustryCategory",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (parent:Organization {name: ""Accenture""})-[:HAS_SUBSIDIARY]->(subsidiary:Organization)
RETURN subsidiary.name AS SubsidiaryName",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)
WHERE a.sentiment > 0.8
RETURN a
ORDER BY a.sentiment DESC
LIMIT 5",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 300
RETURN DISTINCT c.name",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[r:HAS_COMPETITOR]->(:Organization)
WHERE r.since IS NOT NULL AND date() - r.since >= duration({years: 5})
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE EXISTS {
  MATCH (c)-[:IS_CAPITAL_OF]->(:Country)
}
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 1",Complex Retrieval Queries,companies,True,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person), (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE p.name IN [c1.text, c2.text, c3.text, c4.text, c5.text]
WITH a, COLLECT(c) AS chunks
WHERE chunks[0].text IS NOT NULL AND chunks[1].text IS NOT NULL AND chunks[2].text IS NOT NULL AND chunks[3].text IS NOT NULL AND chunks[4].text IS NOT NULL
WITH chunks[0] AS c1, chunks[1] AS c2, chunks[2] AS c3, chunks[3] AS c4, chunks[4] AS c5, o
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
WITH o
ORDER BY o.id
LIMIT 3
MATCH (o)-[:HAS_CEO]->(p:Person)
RETURN o.name AS OrganizationName, p.name AS CEOName",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
RETURN o
LIMIT 5",Simple Retrieval Queries,companies,False,False,False
"MATCH (a:Article {title: 'Funds for Consumer Behavior Specialist Infinite An'})-[:MENTIONS]->(o:Organization)
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (p:Person {id: 'Eaf0bpz6NNoqLVUCqNZPAew'})
RETURN p",Simple Retrieval Queries,companies,False,False,False
"MATCH (p:Person)-[:HAS_CEO]->(o:Organization)
WHERE o.isPublic = true
RETURN p.name, p.id
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (c:City)
RETURN c.name, c.summary
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.motto IS NOT NULL
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (p:Person {id: 'Eaf0bpz6NNoqLVUCqNZPAew'})
RETURN p.summary",Simple Retrieval Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_PARENT*1..3]->(ancestor:Person)
RETURN ancestor
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CHILD]->(child:Person)
RETURN child
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization)-[:IN_CITY]->(c:City)
WHERE EXISTS { (o)-[:IN_CITY]->(c) }
RETURN o.name AS ParentOrganization, s.name AS Subsidiary, c.name AS City",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)
WHERE a.sentiment > 0.5
RETURN a
ORDER BY a.date DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {name: ""Deja vu Security""})-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)
WITH o
ORDER BY o.id
LIMIT 3
MATCH (o)<-[:HAS_INVESTOR]-(investor)
RETURN o.name AS Organization, collect(investor.name) AS Investors",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)
WHERE a.date < datetime('2020-01-01T00:00:00Z')
RETURN a.title
ORDER BY a.date DESC
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Rome""})
MATCH (o)-[:HAS_CATEGORY]->(ic:IndustryCategory)
RETURN ic.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 300
RETURN c.name AS CityName
LIMIT 5",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})-[:HAS_SUPPLIER]->(supplied:Organization)
RETURN supplied",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""Accenture""})-[:HAS_SUBSIDIARY]->(sub:Organization)
RETURN sub.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH path=(o:Organization {name: ""Accenture""})-[:HAS_SUBSIDIARY*1..3]->(parent:Organization)
RETURN parent.name AS ParentCompanyName
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: ""Deja Vu Security""})
RETURN a.sentiment
ORDER BY a.date DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (c:Country)
RETURN c.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article {siteName: ""MrWeb""})-[:MENTIONS]->(o:Organization)
RETURN o.name AS OrganizationName
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE o.revenue > 10000000
RETURN p.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {name: ""Deja vu Security""})<-[:HAS_INVESTOR]-(investor)
RETURN investor",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN o.name AS Organization, o.revenue AS Revenue
ORDER BY o.revenue DESC
LIMIT 1",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'Accenture'
RETURN o
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person), (o)-[:HAS_BOARD_MEMBER]->(bm:Person)
WHERE ceo.name = bm.name
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'CEO at'
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WITH c, count(o) AS orgCount
WHERE orgCount > 3
RETURN c.name, orgCount",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization)
WHERE exists{ (o)-[:HAS_INVESTOR]->() }
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees IS NOT NULL
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 5",Simple Retrieval Queries,companies,False,False,False
"MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization)
RETURN p.name AS InvestorName
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE count{(o)-[:HAS_COMPETITOR]->(:Organization)} > 2
RETURN o.name, count{(o)-[:HAS_COMPETITOR]->(:Organization)} AS competitors_count",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article {author: ""David Correa""})-[:MENTIONS]->(o:Organization)
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.motto CONTAINS 'world'
RETURN o
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {isDissolved: true})-[:HAS_CEO]->(p:Person)
RETURN p.name AS CEO_Name, o.name AS Organization_Name
LIMIT 3",Simple Retrieval Queries,companies,True,False,False
"MATCH (childOrg:Organization)-[:HAS_SUBSIDIARY]->(parentOrg:Organization)
WHERE EXISTS {
    (childOrg)-[:IN_CITY]->(city:City) 
    AND (parentOrg)-[:IN_CITY]->(city)
}
RETURN childOrg, parentOrg",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)
WHERE a.date > datetime('2021-01-01T00:00:00Z')
RETURN a
ORDER BY a.date ASC
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o1:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)<-[:HAS_CATEGORY]-(o2:Organization)
WHERE o1 <> o2 AND EXISTS {(o1)-[:HAS_COMPETITOR]->(o2)}
RETURN o1.name AS Organization1, o2.name AS Organization2, ic.name AS IndustryCategory
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization {name: 'New Energy Group'})
RETURN o.name AS OrganizationName
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Software company""})
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})
WITH o
LIMIT 3
MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN o.name AS Organization, collect(p.name) AS BoardMembers",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.revenue < 5000000
RETURN a
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE c.summary CONTAINS 'capital'
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization)
RETURN o.name
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees > 200
RETURN o.summary
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_INVESTOR]->(p:Person)
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.nbrEmployees > 500
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)
RETURN a
ORDER BY a.sentiment DESC
LIMIT 5",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization {name: 'Accenture'})
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(:Person)
WHERE o.isPublic = true
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[r:HAS_CEO]->(p1:Person), (o)-[r2:HAS_CEO]->(p2:Person)
WHERE r.endDate IS NOT NULL AND r2.startDate >= date()-duration({years:1}) AND r.endDate < r2.startDate
RETURN o.name AS Organization, p1.name AS Previous_CEO, p2.name AS Current_CEO
LIMIT 3",Simple Aggregation Queries,companies,False,False,False
"MATCH (ceo:Person)<-[:HAS_CEO]-(org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: ""Technology""})
WITH ceo, org
MATCH (article:Article)-[:MENTIONS]->(org)
WITH ceo, COUNT(article) AS mentions
ORDER BY mentions DESC
LIMIT 3
RETURN ceo.name AS CEOName, mentions",Simple Aggregation Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Technology""})
RETURN a
ORDER BY a.date DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE o.foundingDate IS NOT NULL
RETURN o
ORDER BY o.foundingDate ASC
LIMIT 3",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE o.revenue > 100000000
WITH o, p, count{(p)<-[:MENTIONS]-(:Article)} AS mentionsCount
WHERE mentionsCount > 1
RETURN o
LIMIT 5",Verbose query,companies,False,False,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)-[:MENTIONS]->(city:City)
WHERE a.date >= date() - duration({days: 30})
RETURN city.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue IS NOT NULL
WITH o
ORDER BY o.revenue DESC
LIMIT 3
MATCH (o)<-[:HAS_INVESTOR]-(investor)
RETURN o.name AS Organization, collect(investor.name) AS Investors",Simple Aggregation Queries,companies,False,False,True
"MATCH (o1:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory)<-[:HAS_CATEGORY]-(o2:Organization)
WHERE o1 <> o2 AND EXISTS { (o1)-[:HAS_COMPETITOR]->(o2) }
RETURN o1.name AS Organization, o2.name AS Competitor, cat.name AS Industry
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_SUBSIDIARY]->(:Organization)} AS numSubsidiaries
ORDER BY numSubsidiaries DESC
LIMIT 5
RETURN o.name, numSubsidiaries",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE o.revenue > 100000000
RETURN DISTINCT country.name
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (i:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization)
RETURN i.name AS Industry, count(o) AS NumberOfOrganizations
ORDER BY NumberOfOrganizations DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
RETURN c.name AS City, count(o) AS NumberOfOrganizations
ORDER BY NumberOfOrganizations DESC
LIMIT 5",Simple Aggregation Queries,companies,True,False,False
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN o.name AS Organization, collect(p.name) AS BoardMembers
ORDER BY o.revenue DESC
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)
RETURN a
ORDER BY a.sentiment DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CEO]->(o:Organization)
RETURN o
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)
RETURN DISTINCT o.name
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {name: ""New Energy Group""})<-[:MENTIONS]-(a:Article)
RETURN a
ORDER BY a.date DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (org:Organization)-[:IN_CITY]->(city:City {name: ""Seattle""})
WITH org
MATCH (org)-[:HAS_CATEGORY]->(ind:IndustryCategory)
RETURN ind.name, count(org) AS numOrganizations
ORDER BY numOrganizations DESC
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})
RETURN o
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees IS NOT NULL
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.isDissolved = false
RETURN c.name, count(o) AS numOrganizations
ORDER BY numOrganizations DESC
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
RETURN o.name AS OrganizationName, supplier.name AS SupplierName
LIMIT 3",Simple Aggregation Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_INVESTOR]->(invested:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: ""Software Industry""})
WITH invested, org
ORDER BY invested.date DESC
LIMIT 3
RETURN org.name AS Investor, invested.name AS InvestedCompany, invested.date AS InvestmentDate",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_INVESTOR]->(acquired:Organization)
WHERE acquired.isDissolved = true AND acquired.revenue IS NOT NULL
RETURN o.name AS Organization, acquired.name AS Acquired_Organization
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WITH o, count(p) AS boardMembers
ORDER BY boardMembers DESC
LIMIT 3
RETURN o.name, boardMembers",Simple Aggregation Queries,companies,False,False,True
"MATCH (c:City)<-[:IN_CITY]-(o:Organization)
WITH c, count(o) AS orgCount
WHERE orgCount > 5
RETURN c.name AS CityName
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Financial Services""})
RETURN a
ORDER BY a.date DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE count{(o)-[:HAS_COMPETITOR]->(:Organization)} > 2
RETURN o
ORDER BY count{(o)-[:HAS_COMPETITOR]->(:Organization)} DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization {name: ""Accenture""})
RETURN o
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})<-[:HAS_INVESTOR]-(investor)
RETURN investor
ORDER BY investor.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Software""})
RETURN o
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""New York City""})
WHERE o.nbrEmployees IS NOT NULL
RETURN o.name, o.nbrEmployees
ORDER BY o.nbrEmployees DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = false AND o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (org:Organization {name: ""Accenture""})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(city:City)
RETURN DISTINCT city.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = true
RETURN o.name
ORDER BY o.revenue DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})
WITH o
LIMIT 3
MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN o.name AS Organization, collect(p.name) AS BoardMembers",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization)
WHERE o.revenue > 100000000
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Chicago""})
WHERE o.nbrEmployees > 300
RETURN o",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.siteName = 'Silicon UK'
RETURN o
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
MATCH (o)-[:HAS_CEO]->(p:Person)
RETURN p.name AS CEO_Name, o.name AS Organization_Name
ORDER BY o.revenue DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WITH o, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 5
RETURN o.name, mentions",Simple Aggregation Queries,companies,True,False,False
"MATCH (o:Organization)
WHERE o.summary IS NOT NULL
RETURN o
ORDER BY length(o.summary) DESC
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory)
WITH o, count(DISTINCT c) AS numCategories
ORDER BY numCategories DESC
LIMIT 5
RETURN o.name, numCategories",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.sentiment IS NOT NULL
RETURN o.name, avg(a.sentiment) AS avgSentiment
ORDER BY avgSentiment ASC
LIMIT 3",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person), (o)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Tech""})
RETURN p.name AS CEO_Name, o.name AS Organization_Name, p.summary AS CEO_Summary
ORDER BY p.startDate DESC
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN a
ORDER BY a.date DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE EXISTS { (o)-[:HAS_CATEGORY]->(:IndustryCategory {name: ""Technology""}) }
RETURN c.name, count(o) AS NumberOfOrganizations
ORDER BY NumberOfOrganizations DESC
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS ""legal dispute""
WITH DISTINCT a
MATCH (a)-[:MENTIONS]->(o:Organization)
RETURN o.name AS OrganizationName
LIMIT 3",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: 'Julie Spellman Sweet'})
WHERE EXISTS {
  (o)-[:HAS_INVESTOR]->(:Person {name: 'Julie Spellman Sweet'})
}
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.nbrEmployees > 200
RETURN a
ORDER BY a.date DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.summary CONTAINS 'software'
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
WHERE o.revenue > 50000000
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE count{(o)-[:HAS_CATEGORY]->(:IndustryCategory)} > 2
RETURN o",Complex Retrieval Queries,companies,True,False,False
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
WHERE EXISTS { (o)-[:IS_PUBLIC]->() AND o.isPublic = true }
RETURN supplier",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.summary CONTAINS 'financial services'
RETURN DISTINCT c.name",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment < 0.5
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_COMPETITOR]->(:Organization {name: 'New Energy Group'})
MATCH (org)-[:HAS_CEO]->(ceo:Person)
RETURN org.name AS OrganizationName, ceo.name AS CEOName",Complex Retrieval Queries,companies,False,True,False
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization), (o)-[:IN_CITY]->(c:City)
RETURN o.name, c.name",Complex Retrieval Queries,companies,False,False,True
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CEO|HAS_BOARD_MEMBER|HAS_INVESTOR]-(o:Organization)
OPTIONAL MATCH (o)-[r:HAS_SUBSIDIARY|HAS_SUPPLIER|HAS_INVESTOR|HAS_COMPETITOR]->(relatedOrg:Organization)
RETURN p, o, r, relatedOrg",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WHERE o.revenue > 100000000
RETURN ic.name",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE o.isPublic = true AND a.sentiment > 0.5
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)<-[:HAS_INVESTOR]-(investor:Organization)
WHERE investor.nbrEmployees > 50
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment < 0
RETURN a.title",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Rome""})
MATCH (a:Article)-[:MENTIONS]->(o)
RETURN a",Complex Retrieval Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_BOARD_MEMBER]->(person:Person)
WHERE exists {
    MATCH (person)-[:HAS_CEO]->(otherOrg:Organization)
    WHERE org <> otherOrg
}
RETURN org.name AS Organization, collect(person.name) AS BoardMemberCEOs",Complex Retrieval Queries,companies,False,True,False
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization), (o)-[:IN_CITY]->(c:City)
WHERE c.summary CONTAINS 'county seat'
RETURN o.name AS OrganizationName",Complex Retrieval Queries,companies,False,False,False
"MATCH (a:Article {author: ""David Correa""})-[:HAS_CHUNK]->(c:Chunk),
      (a)-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WHERE ic.name CONTAINS ""tech""
RETURN a.sentiment, a.title, o.name",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE o.nbrEmployees > 200
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_INVESTOR]->(o:Organization)
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
MATCH (p:Person)-[:WORKS_FOR]->(o)
MATCH (p)-[:HAS_CHILD]->(child:Person)
RETURN p.name AS ParentName, child.name AS ChildName",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: 'Julie Spellman Sweet'})
RETURN o.summary AS OrganizationSummary",Complex Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.date > date('2021-01-01')
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS 'consumer behavior analyses'
RETURN a",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IS_CAPITAL_OF]->(country:Country)
RETURN o.name AS Organization, c.name AS City, country.name AS Country
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_COMPETITOR]->(competitor:Organization)
WHERE competitor.nbrEmployees > 300
RETURN o.name AS OrganizationName, competitor.name AS CompetitorName, competitor.nbrEmployees AS CompetitorEmployees",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE exists{(c)-[:IS_CAPITAL_OF]->(country)} AND count{(o)-[:HAS_CATEGORY]->(:IndustryCategory)} > 1
RETURN o.name AS OrganizationName, c.name AS CityName, country.name AS CountryName",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""Accenture""})-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor
ORDER BY competitor.name
LIMIT 5",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE exists {
  (p)-[:HAS_BOARD_MEMBER]->(:Organization)
}
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: 'United States of America'})
RETURN a
ORDER BY a.date DESC
LIMIT 5",Complex Retrieval Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person), (org)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE ceo.summary CONTAINS 'executive'
RETURN org",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(:Organization {name: 'Accenture'})
RETURN o.name, o.summary",Complex Retrieval Queries,companies,False,False,False
"MATCH (ceo:Person)-[:HAS_CEO]->(org:Organization)<-[:HAS_INVESTOR]-(investor:Person)-[:HAS_CHILD]->(child:Person)
RETURN ceo.name AS CEOName, org.name AS OrganizationName, investor.name AS InvestorName, child.name AS ChildName",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Rome""})
WHERE o.isPublic = true
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(:Person)
WHERE o.motto CONTAINS 'innovation' AND o.motto IS NOT NULL
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND exists{(o)-[:HAS_COMPETITOR]->(:Organization)}
RETURN o",Complex Retrieval Queries,companies,False,True,False
"MATCH (c:Country {name: ""United States of America""})<-[:IN_COUNTRY]-(city:City)<-[:IN_CITY]-(org:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)
MATCH (inv)-[:HAS_INVESTOR]->(org)
RETURN inv",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
WHERE o.revenue > 100000000
MATCH (a:Article)-[:MENTIONS]->(o)
RETURN a",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)<-[:MENTIONS]-(a:Article)
WHERE a.sentiment > 0.5
RETURN o.name AS Organization, c.name AS City, a.title AS ArticleTitle, a.sentiment AS SentimentScore",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Electronic Products Manufacturers""})
WHERE o.isPublic = true
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_BOARD_MEMBER]->(o:Organization)
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization)
WHERE EXISTS {
  (o)-[:HAS_SUPPLIER]->(:Organization {name: 'Accenture'})
}
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.name CONTAINS 'Sweet'
MATCH (a:Article)-[:MENTIONS]->(o)
RETURN a",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE o.revenue > 100000000
RETURN country.name, count(o) AS NumberOfOrganizations
ORDER BY NumberOfOrganizations DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)<-[:HAS_INVESTOR]-(p:Person)-[:HAS_BOARD_MEMBER]->(o)
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""}), (o)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN o.name",Complex Retrieval Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE ceo.summary CONTAINS 'executive'
MATCH (org)-[:HAS_CATEGORY]->(category:IndustryCategory)
RETURN category.name AS IndustryCategory",Complex Retrieval Queries,companies,False,True,False
"MATCH (o1:Organization)-[:HAS_COMPETITOR]->(o2:Organization)
MATCH (o1)-[:IN_CITY]->(c1:City)-[:IN_COUNTRY]->(country:Country)
MATCH (o2)-[:IN_CITY]->(c2:City)-[:IN_COUNTRY]->(country)
RETURN o1.name AS Organization1, o2.name AS Organization2, country.name AS Country",Complex Retrieval Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE exists {
  (ceo)-[:HAS_INVESTOR]->(:Organization)
}
RETURN org",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.isPublic = true
RETURN a
ORDER BY a.date DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.revenue > 50000000
RETURN DISTINCT c.name",Complex Retrieval Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_INVESTOR]->(o:Organization)
RETURN o.name AS OrganizationName",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.summary CONTAINS 'based in San Francisco' AND o.isDissolved = false
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE c.summary CONTAINS 'metropolitan'
RETURN o.name, o.revenue
ORDER BY o.revenue DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE o.revenue IS NOT NULL
RETURN o.name, o.revenue
ORDER BY o.revenue DESC
LIMIT 3",Verbose query,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE exists {
  MATCH (a1:Article)-[:MENTIONS]->(p)
  WITH p, count(DISTINCT a1) AS articlesCount
  WHERE articlesCount >= 2
  RETURN p
}
RETURN o
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization)
WHERE o.nbrEmployees > 500
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment > 0.5
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person), (o)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Manufacturing""})
RETURN p.name AS CEO_Name, o.name AS Organization_Name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.isPublic = true
RETURN c.name, count(o) AS numberOfPublicOrgs
ORDER BY numberOfPublicOrgs DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_COMPETITOR]->(:Organization)} AS competitorsCount
ORDER BY competitorsCount DESC
LIMIT 3
RETURN o.name, competitorsCount",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WHERE exists {
    MATCH (p)-[:HAS_CEO]->(:Organization)
}
RETURN o.name AS OrganizationName
LIMIT 3",Pathfinding Queries,companies,True,False,False
"MATCH (p:Person)
WITH p, size((p)-[:HAS_CHILD]->()) AS children_count
ORDER BY children_count DESC
LIMIT 3
RETURN p.name, children_count",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_INVESTOR]->(:Organization)
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN a
ORDER BY a.date DESC
LIMIT 5",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Software Industry""})
WHERE EXISTS {
    (o)-[:HAS_COMPETITOR]->(:Organization)
}
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WITH country, count(DISTINCT c) AS citiesCount
ORDER BY citiesCount DESC
LIMIT 3
RETURN country.name AS Country, citiesCount",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization)
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue IS NOT NULL
WITH o
ORDER BY o.revenue DESC
LIMIT 3
MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN o.name AS Organization, collect(p.name) AS BoardMembers",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WHERE o.isPublic = true
RETURN ic.name, count(o) AS numOrganizations
ORDER BY numOrganizations DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (c:City)<-[:IN_CITY]-(o:Organization)<-[:MENTIONS]-(a:Article)
RETURN c.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WITH ic.name AS IndustryName, count(o) AS OrgCount
ORDER BY OrgCount DESC
LIMIT 3
RETURN IndustryName",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.date.year = 2022
RETURN o
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)
RETURN a
ORDER BY a.sentiment DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees IS NOT NULL
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (p:Person)-[:HAS_CEO]->(o:Organization)
WHERE o.isPublic = true
RETURN p.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WITH c, count(o) AS numOrganizations
ORDER BY numOrganizations DESC
LIMIT 3
RETURN c.name AS City, numOrganizations",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization {isDissolved: true})
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue IS NOT NULL
RETURN o.name, o.revenue
ORDER BY o.revenue DESC
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE org.revenue IS NOT NULL
RETURN ceo, org.name AS Organization, org.revenue AS Revenue
ORDER BY org.revenue DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE EXISTS {
    MATCH (ceo)-[:HAS_BOARD_MEMBER]->(otherOrg:Organization)
    WHERE org <> otherOrg
}
RETURN org.name AS OrganizationName, ceo.name AS CEOName",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country)
WHERE o.nbrEmployees > 1000
RETURN c.name AS CountryName, count(o) AS NumberOfOrganizations
ORDER BY NumberOfOrganizations DESC
LIMIT 3",Simple Aggregation Queries,companies,True,False,False
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.date >= date('2021-01-01T00:00:00Z') AND a.date <= date('2021-12-31T23:59:59Z')
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
WHERE EXISTS { (o)-[:HAS_CATEGORY]->(:IndustryCategory {name: ""Technology""}) }
RETURN supplier.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_SUPPLIER]->(:Organization)} AS supplierCount
ORDER BY supplierCount DESC
LIMIT 1
RETURN o.name AS OrganizationName, supplierCount",Simple Aggregation Queries,companies,True,False,False
"MATCH (c:City)-[:IN_COUNTRY]->(country:Country)
WHERE size{(country)<-[:IN_CITY]-(:Organization)} > 100
RETURN c.name AS CityName
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_INVESTOR]->()} AS numInvestors
ORDER BY numInvestors DESC
LIMIT 3
RETURN o.name, numInvestors",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.name CONTAINS ""New Energy""
RETURN a
ORDER BY a.date DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WITH o, count(p) AS boardMembersCount
ORDER BY boardMembersCount DESC
LIMIT 3
RETURN o.name, boardMembersCount",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.age < 40
RETURN o.name AS OrganizationName",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.revenue > 500000000
RETURN DISTINCT c.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (p:Person)
WHERE exists{(p)-[:HAS_PARENT]->(:Person)} AND exists{(p)-[:HAS_CHILD]->(:Person)}
RETURN p
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.founded < 1950
RETURN c.name
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.sentiment < 0
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE EXISTS {
    MATCH (ceo)-[:HAS_BOARD_MEMBER]->(comp:Organization)-[:HAS_COMPETITOR]->(org)
}
RETURN org.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization {isDissolved: true})-[:HAS_SUBSIDIARY]->(s:Organization {isDissolved: false})
RETURN o.name AS DissolvedOrganization, collect(s.name) AS ActiveSubsidiaries
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.motto IS NOT NULL AND o.motto <> """"
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization)
WITH p, count(o) AS orgs
WHERE orgs > 1
RETURN p
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.summary CONTAINS ""more than 50 years""
RETURN a.title, a.date, a.author
ORDER BY a.date DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o1:Organization)-[:HAS_CEO]->(p1:Person), (o2:Organization)-[:HAS_CEO]->(p2:Person)
WHERE p1.name <> p2.name AND last(split(p1.name, "" "")) = last(split(p2.name, "" ""))
RETURN DISTINCT o1.name AS Organization1, o2.name AS Organization2",Pathfinding Queries,companies,False,False,True
"MATCH (c:Country)<-[:IN_COUNTRY]-(city:City)<-[:IN_CITY]-(org:Organization)-[:HAS_CATEGORY]->(ind:IndustryCategory {name: ""Electronic Products Manufacturers""})
WHERE EXISTS { (org)-[:HAS_COMPETITOR]->(:Organization) }
RETURN c.name AS Country, count(org) AS NumberOfOrganizations
ORDER BY NumberOfOrganizations DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WHERE o.revenue > 100000000
RETURN DISTINCT ic.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE c.nbrResidents > 5000000
RETURN o.name AS OrganizationName
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS ""finance""
WITH a
MATCH (a)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(city:City)
RETURN city.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization), 
      (o)-[:HAS_SUBSIDIARY]->(subsidiary:Organization)
WHERE EXISTS {
    (supplier)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country)
    WHERE country.name CONTAINS ""Europe""
} AND EXISTS {
    (subsidiary)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country)
    WHERE country.name CONTAINS ""Europe""
}
RETURN DISTINCT o.name",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person), (o)-[:HAS_BOARD_MEMBER]->(bm:Person)
WHERE ceo.name = bm.name
RETURN o
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_SUPPLIER]->(:Organization)} AS supplierCount
ORDER BY supplierCount DESC
LIMIT 3
RETURN o.name, supplierCount",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.date >= datetime('2021-01-01T00:00:00Z') AND a.date <= datetime('2021-12-31T23:59:59Z')
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (org:Organization {isPublic: true})-[:HAS_CEO]->(ceo:Person)-[:HAS_CHILD]->(child:Person)
RETURN ceo.name AS CEOName, child.name AS ChildName
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)<-[:IN_CITY]-(s:Organization)
WHERE (o)-[:HAS_SUBSIDIARY]->(s)
RETURN o.name AS Organization, c.name AS City, s.name AS Subsidiary
ORDER BY o.name
LIMIT 5",Pathfinding Queries,companies,False,False,True
"MATCH (c:Country)<-[:IN_COUNTRY]-(city:City)<-[:IN_CITY]-(org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory)
WHERE cat.name CONTAINS ""Technology""
WITH c, count(DISTINCT org) AS mentions
ORDER BY mentions DESC
LIMIT 3
RETURN c.name, mentions",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE o.isDissolved = true AND a.date >= date('2023-01-01')
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS ""environmental issues""
MATCH (a)-[:MENTIONS]->(o:Organization)
RETURN o.name AS OrganizationName
LIMIT 3",Pathfinding Queries,companies,True,False,False
"MATCH (o:Organization)
WHERE size{(o)-[:HAS_CEO]->()} > 2
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization {isDissolved: true})-[:HAS_CEO]->(p:Person)
RETURN o.name AS OrganizationName, p.name AS CEOName",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.siteName = 'RCR Wireless News'
RETURN o
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.isDissolved = true
RETURN c.name, count(o) AS dissolvedOrganizations
ORDER BY dissolvedOrganizations DESC",Simple Aggregation Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CHILD]->(child:Person)
RETURN child",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})-[:IN_CITY]->(c:City)
RETURN c.name AS City, count(o) AS NumberOfPublicOrganizations
ORDER BY NumberOfPublicOrganizations DESC
LIMIT 1",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
RETURN o.name AS OrganizationName, c.name AS CityName",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.isPublic = true
RETURN a
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: ""SAP""})
RETURN a.author AS author
ORDER BY a.sentiment DESC
LIMIT 1",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'})
MATCH (o)-[:HAS_CATEGORY]->(ic:IndustryCategory)
RETURN ic.name AS IndustryCategory",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE o.revenue > 50000000
RETURN DISTINCT country.name",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE count{(o)-[:HAS_SUBSIDIARY]->(:Organization)} > 1
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.motto CONTAINS 'technology'
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: ""Accenture""})
RETURN a.title, a.sentiment
ORDER BY a.sentiment DESC
LIMIT 1",Simple Aggregation Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.date >= date('2022-01-01') AND a.date <= date('2022-12-31')
RETURN o
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {name: ""SAP""})-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor",Simple Aggregation Queries,companies,False,False,False
"MATCH (p:Person {name: ""David Correa""})-[:HAS_PARENT]->(parent:Person)
RETURN parent",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 50 AND o.nbrEmployees < 200
RETURN c.name AS CityName",Simple Aggregation Queries,companies,False,False,False
"MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization)
WHERE exists{ (p)-[:HAS_BOARD_MEMBER]->(o) }
RETURN p.name
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article {title: 'Funds for Consumer Behavior Specialist Infinite Analytics'})-[:MENTIONS]->(o:Organization)
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
RETURN count(o) AS NumberOfOrganizations",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WITH c, count(o) AS orgCount
ORDER BY orgCount DESC
RETURN c.name, orgCount
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees IS NOT NULL
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 1",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.revenue > 1E9
RETURN a
ORDER BY a.sentiment DESC
LIMIT 3",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})<-[:HAS_INVESTOR]-(investor)
RETURN investor",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: ""Accenture""})
RETURN a
ORDER BY a.date DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = true
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {name: ""Accenture""})-[:HAS_SUBSIDIARY]->(subsidiary:Organization)
RETURN subsidiary",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 500
RETURN c.name
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization {name: 'Accenture'})
RETURN o.name AS OrganizationName",Simple Aggregation Queries,companies,False,False,True
"MATCH (p:Person)
WITH p, count{(p)-[:HAS_PARENT|:HAS_CHILD]->(:Person)} AS connections
RETURN p.name, connections
ORDER BY connections DESC
LIMIT 1",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.siteName = 'MrWeb'
RETURN o
LIMIT 3",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization {isPublic: true})-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
RETURN o",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization {isPublic: true})-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'female'
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE country.name <> 'United States of America' AND o.revenue > 100000000
RETURN o",Simple Aggregation Queries,companies,False,False,False
"MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization)
WITH p, count(o) AS investments
ORDER BY investments DESC
LIMIT 3
RETURN p.name, investments",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WITH o, count(p) AS boardMemberCount
ORDER BY boardMemberCount DESC
LIMIT 1
RETURN o.name AS OrganizationName",Simple Aggregation Queries,companies,False,False,True
"MATCH (p:Person)
WITH p, count{(p)-[:HAS_CHILD]->()} AS childrenCount
RETURN p.name AS PersonName, childrenCount
ORDER BY childrenCount DESC
LIMIT 1",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'})
WHERE o.nbrEmployees IS NOT NULL
RETURN o.name AS OrganizationName, o.nbrEmployees AS NumberOfEmployees
ORDER BY o.nbrEmployees DESC
LIMIT 1",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment < 0.5
RETURN o
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'})
WHERE o.nbrEmployees > 500
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_COMPETITOR]->(:Organization)} AS competitors
RETURN o.name AS Organization, competitors
ORDER BY competitors DESC",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})<-[:HAS_SUPPLIER]-(supplier:Organization)
MATCH (article:Article)-[:MENTIONS]->(supplier)
RETURN article",Simple Aggregation Queries,companies,False,False,False
"MATCH (ceo:Person)-[:HAS_CEO]->(org:Organization)
WHERE EXISTS {
  (ceo)-[:HAS_BOARD_MEMBER]->(:Organization)
}
MATCH (ceo)-[:HAS_CHILD]->(child:Person)
RETURN ceo.name AS CEOName, org.name AS Organization, child.name AS ChildName",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE EXISTS {(o)-[:HAS_SUBSIDIARY]->(:Organization)}
WITH o, count{(o)-[:HAS_SUBSIDIARY]->()} AS numSubsidiaries
RETURN o.name AS OrganizationName, numSubsidiaries
ORDER BY numSubsidiaries DESC
LIMIT 1",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment > 0.9
RETURN o
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
RETURN o.name AS Organization, p.name AS CEO
ORDER BY o.revenue DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country)
WHERE o.revenue < 10000000
RETURN DISTINCT c.name",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WITH o, count(p) AS boardMembersCount
WHERE boardMembersCount >= 2
RETURN o.name AS OrganizationName",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees < 50 AND o.isDissolved = false
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.revenue > 1000000
RETURN o, c",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(:Person {name: ""Julie Spellman Sweet""})<-[:MENTIONS]-(a:Article)
RETURN a
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE o.nbrEmployees > 10000 AND country.name <> 'United States of America'
RETURN o",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization {isDissolved: true})<-[:HAS_INVESTOR]-(investor)
RETURN o.name AS OrganizationName, investor.name AS InvestorName",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = false AND o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 1",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Rome""})
MATCH (a:Article)-[:MENTIONS]->(o)
RETURN a
ORDER BY a.date DESC
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(i:IndustryCategory)
WITH i.name AS Industry, count(o) AS NumberOfOrganizations
ORDER BY NumberOfOrganizations DESC
RETURN Industry, NumberOfOrganizations
LIMIT 3",Simple Aggregation Queries,companies,False,False,True
"MATCH (c:City)<-[:IN_CITY]-(o:Organization)-[:HAS_CATEGORY]->(ind:IndustryCategory)
WITH c, count(DISTINCT ind) AS numIndustries
WHERE numIndustries > 2
RETURN c.name AS City, numIndustries AS IndustriesCount",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WITH country, count(o) AS orgCount
ORDER BY orgCount DESC
LIMIT 5
RETURN country.name AS Country, orgCount AS NumberOfOrganizations",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees IS NOT NULL
RETURN o.summary AS SummaryDescription
ORDER BY o.nbrEmployees ASC
LIMIT 1",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_COMPETITOR]->(competitor:Organization)
WITH competitor, count(DISTINCT o) AS mentions
ORDER BY mentions DESC
RETURN competitor.name, mentions
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN p.name AS BoardMemberName",Simple Aggregation Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)-[:AUTHORED]->(article:Article)-[:MENTIONS]->(mentionedOrg)
WHERE org.id = mentionedOrg.id
RETURN org.name AS Organization, ceo.name AS CEO, article.title AS ArticleTitle
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS 'cybersecurity'
MATCH (a)-[:MENTIONS]->(o:Organization)
RETURN o.name AS OrganizationName
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk), (a)-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Software""})
MATCH (o)-[:IN_CITY]->(city:City)
RETURN DISTINCT city.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS 'security threats'
RETURN o.name AS OrganizationName, collect(a.title) AS ArticleTitles",Complex Aggregation Queries,companies,False,False,False
"MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization)
WHERE o.revenue > 100000000
RETURN p",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(publicSub:Organization {isPublic: true}),
      (o)-[:HAS_SUBSIDIARY]->(privateSub:Organization {isPublic: false})
WHERE publicSub <> privateSub
RETURN DISTINCT o.name AS OrganizationName",Complex Aggregation Queries,companies,True,False,False
"MATCH (o:Organization)
WHERE size{(o)-[:HAS_BOARD_MEMBER]->(:Person)} > 3
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment < 0
RETURN o.name, count(a) AS NegativeMentions
ORDER BY NegativeMentions DESC",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WITH ic, count(o) AS numOrganizations
ORDER BY numOrganizations DESC
RETURN ic.name, numOrganizations",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person), (a:Article)-[:MENTIONS]->(o)
RETURN o.name AS Organization, ceo.name AS CEO, a.title AS ArticleTitle",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory)
WITH o, count(c) AS numCategories
WHERE numCategories >= 3
RETURN o.name AS OrganizationName",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE o.motto CONTAINS 'security'
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE country.name <> 'United States of America'
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {name: ""Accenture""})-[:HAS_SUBSIDIARY]->(subsidiary:Organization)
RETURN subsidiary.name AS SubsidiaryName, subsidiary.revenue AS Revenue",Complex Aggregation Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CHILD]->(child:Person)
RETURN child",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment > 0.9
RETURN o.name AS OrganizationName, o.summary AS OrganizationSummary",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.revenue < 10000000
RETURN a",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
RETURN o.name AS OrganizationName, o.revenue AS Revenue
ORDER BY o.revenue DESC",Complex Aggregation Queries,companies,False,False,True
"MATCH (o1:Organization)-[:HAS_SUPPLIER]->(o2:Organization)
WHERE exists{ (o1)-[:HAS_COMPETITOR]->(o2) }
RETURN o1.name AS SupplierAndCompetitor, o2.name AS CompetingSupplier",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees IS NOT NULL
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 5",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE EXISTS { (o)<-[:HAS_INVESTOR]-() }
AND NOT EXISTS { (o)-[:HAS_SUBSIDIARY]->() }
RETURN o.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization {name: ""Accenture""})
RETURN o.name AS OrganizationName",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_INVESTOR]->(invested:Organization)
WITH o, count(invested) AS investments
WHERE investments > 2
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (c:City {name: ""Seattle""})-[:IN_COUNTRY]->(country:Country)
RETURN country.summary AS CountrySummary",Complex Aggregation Queries,companies,False,False,True
"MATCH (p:Person)-[:HAS_CHILD]->(child:Person)
WITH p, count(child) AS childrenCount
WHERE childrenCount >= 2
RETURN p",Complex Aggregation Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.date >= date('2021-01-01')
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article {author: ""David Correa""})-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory)
WHERE c.name CONTAINS ""Technology""
RETURN a.title, a.date, a.summary",Complex Aggregation Queries,companies,False,False,False
"MATCH (ceo:Person)-[:HAS_CEO]->(org:Organization)
MATCH (ceo)-[:HAS_BOARD_MEMBER]->(otherOrg:Organization)
RETURN org.name AS Organization, ceo.name AS CEO, otherOrg.name AS BoardMemberOf",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})-[:IN_CITY]->(c:City)
RETURN DISTINCT c.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_INVESTOR]->()} AS investorCount
RETURN o.name, investorCount
ORDER BY investorCount DESC",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Financial Services""})
WHERE o.revenue IS NOT NULL
RETURN o.name, o.revenue
ORDER BY o.revenue DESC
LIMIT 3",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory)
WITH o, count(c) AS numCategories
WHERE numCategories > 1
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[r:HAS_CEO]->(p1:Person)
WHERE r.startDate >= date({year: date().year - 1})
AND NOT EXISTS {
    (o)-[:HAS_CEO {endDate: r.startDate}]->(p2:Person)
    WHERE p1 <> p2
}
RETURN o.name AS Organization, p1.name AS CurrentCEO",Complex Aggregation Queries,companies,False,True,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk), (a)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment < 0.5
RETURN o.name, a.title, a.sentiment",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.isPublic = true
RETURN c.name, count(o) AS NumberOfPublicOrganizations
ORDER BY NumberOfPublicOrganizations DESC
LIMIT 5",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)<-[:HAS_BOARD_MEMBER]-(p:Person)
WHERE exists{ (p)-[:HAS_CEO]->(:Organization) }
RETURN o.name AS Organization, count(p) AS NumberOfBoardMembersWhoAreCEOs
ORDER BY NumberOfBoardMembersWhoAreCEOs DESC",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'CEO' AND p.summary ENDS WITH 'for less than 3 years'
RETURN o.name AS OrganizationName, p.name AS CEOName, p.summary AS CEOSummary",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue > 1E8 AND o.nbrEmployees > 1000
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE EXISTS {
    (o)-[:HAS_MERGED_WITH]->(:Organization)
    WHERE o.mergerDate >= date({years: date().year - 5})
}
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE EXISTS {
  (ceo)-[:HAS_INVESTOR]->(:Organization)
}
RETURN org",Complex Aggregation Queries,companies,False,False,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS ""environmental issues""
MATCH (a)-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
RETURN ic.name AS IndustryCategory",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE c.population < 100000
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
MATCH (a:Article)-[:MENTIONS]->(o)
RETURN a",Complex Aggregation Queries,companies,False,False,True
"MATCH (p:Person {name: ""David Correa""})-[:HAS_BOARD_MEMBER]->(o:Organization)
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)
RETURN o.name AS Organization, count(sub) AS NumberOfSubsidiaries
ORDER BY NumberOfSubsidiaries DESC",Complex Aggregation Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: ""Healthcare""})
MATCH (org)-[:HAS_BOARD_MEMBER]->(person:Person)
RETURN org.name AS Organization, person.name AS BoardMember",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {isDissolved: true})-[:MENTIONS]-(a:Article)
WHERE a.date >= date('2023-01-01')
RETURN o.name, a.title, a.date",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE o.nbrEmployees IS NOT NULL
RETURN o.name AS Organization, p.name AS CEO
ORDER BY o.nbrEmployees DESC
LIMIT 5",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE EXISTS { (o)-[:HAS_SUPPLIER]->(:Organization) }
RETURN o.name, count{(o)-[:HAS_SUPPLIER]->(:Organization)} AS NumberOfSuppliers
ORDER BY NumberOfSuppliers DESC",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.revenue > 500000000
RETURN DISTINCT c.name",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE EXISTS {
    (c)-[:IN_COUNTRY]->(:Country)-[:HAS_INDUSTRY]->(:IndustryCategory {name: ""Technology""})
}
RETURN o.name AS OrganizationName, c.name AS CityName",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})<-[:HAS_INVESTOR]-(investor:Organization)
RETURN investor",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization {isPublic: true})-[:HAS_CEO]->(p:Person)
WITH o, count(p) AS ceoCount
WHERE ceoCount > 1
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[r:HAS_COMPETITOR]->(competitor:Organization)
WHERE r.since IS NOT NULL AND date() - r.since >= duration({years: 10})
RETURN o.name AS OrganizationName, competitor.name AS CompetitorName",Complex Aggregation Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_BOARD_MEMBER]->(o:Organization)
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)-[:AUTHORED]->(a:Article)
RETURN o.name AS Organization, p.name AS CEO, a.title AS ArticleTitle",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WITH o, count(a) AS mentions
RETURN o.name, mentions
ORDER BY mentions DESC",Complex Aggregation Queries,companies,False,False,True
"MATCH (c:City)-[:IN_COUNTRY]->(country:Country)
WHERE EXISTS {
    (c)<-[:IN_CITY]-(o:Organization)
    WHERE o.isPublic = true
}
RETURN country.name, count(c) AS cityCount
ORDER BY cityCount DESC",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)
WHERE a.sentiment > 0.8
RETURN a",Complex Aggregation Queries,companies,False,True,False
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
WHERE supplier.revenue > 50000000
RETURN o.name AS OrganizationName",Complex Aggregation Queries,companies,False,False,False
"MATCH (o1:Organization)-[:HAS_COMPETITOR]->(o2:Organization)
MATCH (o1)-[:IN_CITY]->(c1:City)-[:IN_COUNTRY]->(country:Country)
MATCH (o2)-[:IN_CITY]->(c2:City)-[:IN_COUNTRY]->(country)
RETURN o1.name AS Organization, o2.name AS Competitor, country.name AS Country",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE exists{(o)-[:HAS_CATEGORY]->(:IndustryCategory {name: ""Diversity and Inclusion""})} AND o.isPublic = true
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory)
WITH o, count(DISTINCT cat) AS distinctIndustries
ORDER BY distinctIndustries DESC
RETURN o.name AS Organization, distinctIndustries
LIMIT 3",Pathfinding Queries,companies,True,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)-[:AUTHORED]->(b:Book {topic: ""Leadership""})
RETURN o.name AS OrganizationName
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE exists {
  (o)-[:HAS_EVENT]->(e:Event {type: 'Layoff'})
  AND e.date >= date({years: date().year - 1})
}
RETURN a
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.summary CONTAINS 'market expansion'
WITH o, count(a) AS articlesCount
ORDER BY articlesCount DESC
LIMIT 3
RETURN o.name, articlesCount",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE country.summary CONTAINS 'developing economy' AND o.revenue IS NOT NULL
RETURN o.name AS Organization, o.revenue AS Revenue
ORDER BY o.revenue DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WHERE p.gender = 'female'
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS ""urban development""
WITH a
MATCH (a)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(city:City)
RETURN city.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[r:HAS_MERGED_WITH]->(:Organization)
WHERE r.date >= date({years: date().year - 5})
RETURN o.name AS OrganizationName
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.motto CONTAINS ""sustainability""
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment < 0.3
WITH o, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3
RETURN o.name, mentions",Pathfinding Queries,companies,False,False,True
"MATCH (c:Country)<-[:IN_COUNTRY]-(city:City)<-[:IN_CITY]-(o:Organization)-[:MENTIONS]-(a:Article)
WHERE EXISTS { (o)-[:HAS_CATEGORY]->(:IndustryCategory {name: ""Healthcare""}) }
RETURN c.name AS Country, count(o) AS NumberOfMentions
ORDER BY NumberOfMentions DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE exists{ (a)-[:HAS_CHUNK]->(c:Chunk) WHERE c.text CONTAINS ""technology innovation"" }
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees > 10000
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)-[:HAS_PARENT|HAS_CHILD*]-(familyMember:Person)-[:HAS_BOARD_MEMBER]-(sameOrg:Organization)
WHERE org.id = sameOrg.id
RETURN org.name AS OrganizationName, ceo.name AS CEOName, familyMember.name AS BoardMemberName
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS ""technology"" AND c.text CONTAINS ""education""
RETURN a
ORDER BY a.date DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE o.foundingDate IS NOT NULL
RETURN o
ORDER BY o.foundingDate ASC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE EXISTS {
  (c)-[:IS_CAPITAL_OF]->(country)
} AND EXISTS {
  (o)-[:HAS_CATEGORY]->(:IndustryCategory {name: ""Telecommunications""})
}
RETURN o
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person),
      (org)-[:HAS_INVESTOR]->(investor:Person)
WHERE (ceo)-[:HAS_SIBLING]-(investor)
RETURN org.name AS OrganizationName",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Food Industry""})
WITH o
MATCH (o)-[:IN_CITY]->(c:City)
RETURN c.name, count(o) AS numOrganizations
ORDER BY numOrganizations DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'CEO for over 10 years'
RETURN o.name AS OrganizationName, p.name AS CEOName
ORDER BY o.revenue DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_INVESTOR]->(s:Organization)
WHERE s.isPublic IS NOT NULL AND s.isPublic = true
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WITH o, count(DISTINCT ic) AS numCategories
ORDER BY numCategories DESC
LIMIT 3
RETURN o.name, numCategories",Pathfinding Queries,companies,False,False,False
"MATCH (c:City)<-[:IN_CITY]-(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Environmental Technology""})
WITH c, count(o) AS orgCount
ORDER BY orgCount DESC
LIMIT 3
RETURN c.name AS City, orgCount AS NumberOfOrganizations",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE p.summary CONTAINS 'PhD'
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o1:Organization)-[:HAS_PARTNER]->(o2:Organization)
WITH o1, o2, count(*) AS collaborations
ORDER BY collaborations DESC
RETURN o1.name AS Organization1, o2.name AS Organization2, collaborations
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.title CONTAINS ""legal dispute""
RETURN o.name, count(a) AS disputes
ORDER BY disputes DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE exists{ (p)-[:HAS_AWARD]->(:Award {type: 'International Business'}) }
RETURN o
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE o.summary CONTAINS ""rebranding"" AND o.isDissolved IS NOT NULL
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (child:Organization)-[:HAS_PARENT]->(parent:Organization)
WHERE parent.revenue > 1E9
RETURN child.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization)
WITH p, count(o) AS orgCount
WHERE orgCount > 3
RETURN p.name AS BoardMember, orgCount",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)
RETURN DISTINCT o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WITH c, count(o) AS orgCount
WHERE orgCount > 10
RETURN c.name AS CityName, orgCount",Complex Aggregation Queries,companies,False,False,True
"MATCH (ic:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization)
WHERE o.nbrEmployees > 100
RETURN DISTINCT ic.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = true
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE o.isPublic = true AND country.name = ""United States of America""
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (p:Person)-[:HAS_CEO]->(o:Organization)
WHERE o.nbrEmployees > 500
RETURN p.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue > 100000000
RETURN o.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS 'financial crises'
WITH a
MATCH (a)-[:MENTIONS]->(o:Organization)
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_SUBSIDIARY]->(:Organization)} AS numSubsidiaries
ORDER BY numSubsidiaries DESC
LIMIT 3
RETURN o.name AS Organization, numSubsidiaries",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""International Trade""})
WHERE EXISTS {
    (o)-[:PARTICIPATED_IN]->(:TradeDeal {date: date() - duration('P1Y')})
}
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_PATENT]->(p:Patent)
RETURN o.name, count(p) AS patentCount
ORDER BY patentCount DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WHERE exists{ (p)-[:HAS_ROLE]->(:Role {name: 'Government Advisor'}) }
RETURN o.name AS OrganizationName
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE exists{(p)-[:IS_PHILANTHROPIST]->()}
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.summary CONTAINS ""corporate social responsibility""
WITH o, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3
RETURN o.name, mentions",Pathfinding Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.summary CONTAINS ""environmental impact""
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Media""})
WHERE EXISTS { (a:Article)-[:MENTIONS]->(o) }
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WITH o, count(DISTINCT country) AS countriesCount
ORDER BY countriesCount DESC
LIMIT 3
RETURN o.name AS OrganizationName, countriesCount",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE a.summary CONTAINS ""scandal""
RETURN o.name, o.id
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)-[:MENTIONED_IN]->(a:Article)
WHERE a.siteName IN ['Forbes', 'Business Insider', 'The Economist', 'Bloomberg']
RETURN o.name AS OrganizationName
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE o.summary IS NOT NULL
RETURN o.name, o.summary
ORDER BY size(o.summary) DESC
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE exists {
  (o)-[:HAS_CATEGORY]->(:IndustryCategory {name: ""Global Economic Changes""})
}
RETURN a.title, a.date, a.sentiment
ORDER BY a.date DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.date >= date({year: date().year - 1, month: date().month, day: date().day})
  AND a.summary CONTAINS ""technological breakthroughs""
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE EXISTS { (o)-[:HAS_SUPPLIER]->(:Organization) }
RETURN o.name, count{(o)-[:HAS_SUPPLIER]->()} AS supplierCount
ORDER BY supplierCount DESC
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WITH o, count(DISTINCT ic) AS numCategories
WHERE numCategories > 1
MATCH (o)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WITH o, count(DISTINCT country) AS numCountries
WHERE numCountries >= 2
RETURN o
LIMIT 3",Pathfinding Queries,companies,False,False,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS ""corporate governance""
RETURN a.title
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (c:Country)<-[:IN_CITY]-(:City)<-[:IN_CITY]-(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Energy""})
WITH c, count(o) AS orgCount
ORDER BY orgCount DESC
LIMIT 3
RETURN c.name AS Country, orgCount AS NumberOfOrganizations",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WITH o, count(DISTINCT country) AS countries
WHERE countries > 3
RETURN o.name
LIMIT 3",Pathfinding Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.revenue > 500000000
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees > 1000
RETURN o
LIMIT 3",Simple Aggregation Queries,companies,False,False,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS 'environmental'
MATCH (a)-[:MENTIONS]->(o:Organization)
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)-[:AUTHORED]->(a:Article)
RETURN o.name AS Organization, p.name AS CEO, a.title AS ArticleTitle",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WITH c, count(o) AS orgCount
ORDER BY orgCount DESC
LIMIT 5
RETURN c.name AS City, orgCount AS NumberOfOrganizations",Simple Aggregation Queries,companies,False,False,False
"MATCH (childOrg:Organization)-[:HAS_PARENT]->(parentOrg:Organization)
WHERE parentOrg.revenue > childOrg.revenue
RETURN childOrg.name AS ChildOrganization, parentOrg.name AS ParentOrganization, parentOrg.revenue AS ParentRevenue, childOrg.revenue AS ChildRevenue",Simple Aggregation Queries,companies,True,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Tech""})
WHERE o.summary CONTAINS 'software'
RETURN o",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p1:Person)<-[:MENTIONS]-(a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE a.date >= date({years: date().year - 5})
AND EXISTS {
    MATCH (o)-[:HAS_CEO]->(p2:Person)
    WHERE p1 <> p2 AND a.date >= p2.startDate
}
RETURN o.name AS Organization, p1.name AS PreviousCEO, p2.name AS CurrentCEO, a.date AS ChangeDate",Simple Aggregation Queries,companies,False,False,True
"MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization)<-[:HAS_BOARD_MEMBER]-(p)
RETURN p.name AS PersonName, o.name AS OrganizationName",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City)
WITH o, count(DISTINCT c) AS citiesCount
WHERE citiesCount > 3
RETURN o.name AS Organization, citiesCount",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_INVESTOR]->(investor:Organization)
WITH investor, count(o) AS investments
WHERE investments > 1
RETURN investor",Simple Aggregation Queries,companies,False,False,False
"MATCH (org:Organization {isPublic: true})-[:HAS_CEO]->(p:Person)
MATCH (p)-[:HAS_CHILD]->(child:Person)
RETURN p.name AS CEO_Name, collect(child.name) AS Children_Names",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE a.summary CONTAINS ""revenue decrease""
RETURN o.name, o.id, a.title, a.date",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:MENTIONED_IN]->(a:Article)
WHERE a.summary CONTAINS ""legal dispute""
RETURN o.name, a.title, a.date",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE c.name = country.capital
RETURN o.name AS OrganizationName, c.name AS CityName, country.name AS CountryName",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)<-[:HAS_INVESTOR]-(p:Person)-[:LIVES_IN]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE NOT EXISTS {
    (o)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(country)
}
RETURN DISTINCT o.name AS OrganizationName, country.name AS InvestorCountry",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.isPublic IS NOT NULL
WITH a, collect(o.isPublic) AS publicStatuses
WHERE ALL(status IN publicStatuses WHERE status = TRUE) OR ALL(status IN publicStatuses WHERE status = FALSE)
RETURN a",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.date.year = 2022 AND o.nbrEmployees > 100
RETURN a",Simple Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE c.name = ""California"" AND a.sentiment IS NOT NULL
RETURN a
ORDER BY a.sentiment DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE o.motto IS NOT NULL
RETURN o.name, o.motto, c.name",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
WHERE EXISTS {
  MATCH (supplier)-[:MENTIONS]->(:Article)
}
RETURN DISTINCT o.name AS OrganizationName",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
RETURN o",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 500
RETURN DISTINCT c.name",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization {name: ""New Energy Group""})-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE exists{(o)-[:HAS_SUBSIDIARY]->(:Organization)}
RETURN o.name AS OrganizationName, ceo.name AS CEOName",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue > 100000000 AND o.isPublic = FALSE
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization) WHERE o.nbrEmployees > 1000
MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN o.name AS Organization, p.name AS BoardMember",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Sydney""})
WHERE o.isDissolved = true
RETURN o.name",Simple Aggregation Queries,companies,False,True,False
"MATCH (o:Organization)-[:HAS_INVESTOR]->(investor)
WHERE o.motto CONTAINS 'innovation'
RETURN DISTINCT investor",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country),
      (o)-[:IN_CITY]->(oCity:City)-[:IN_COUNTRY]->(oCountry:Country)
WHERE country.name <> oCountry.name
RETURN o.name AS OrganizationName, supplier.name AS SupplierName, country.name AS SupplierCountry, oCountry.name AS OrganizationCountry",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 1000
RETURN c.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
WITH a
ORDER BY a.date DESC
LIMIT 5
MATCH (a)-[:HAS_CHUNK]->(c:Chunk)
MATCH (city:City)-[:IN_COUNTRY]->(country:Country)
WHERE c.text CONTAINS country.name
RETURN DISTINCT country.name AS CountryMentioned",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article {author: ""David Correa""})-[:HAS_CHUNK]->(c:Chunk)-[:MENTIONS]->(o:Organization)
RETURN o.name AS OrganizationName
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
WHERE o.nbrEmployees > 500
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.motto IS NOT NULL
RETURN o.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""Accenture""})-[:HAS_SUPPLIER]->(supplier:Organization)
RETURN supplier
ORDER BY supplier.name
LIMIT 5",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE a.sentiment > 0.8
WITH o, a ORDER BY a.date DESC
RETURN DISTINCT o.name AS Organization, a.title AS ArticleTitle, a.date AS ArticleDate, a.sentiment AS SentimentScore",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""New Energy Group""})-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {name: ""Accenture""})-[:HAS_SUBSIDIARY]->(subsidiary:Organization)
RETURN subsidiary
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CHILD]->(child:Person)
RETURN child",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: ""Deja vu Security""})
RETURN a
ORDER BY a.date DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE o.revenue IS NOT NULL
RETURN country.name AS Country, max(o.revenue) AS Revenue
ORDER BY Revenue DESC
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization)
WHERE subsidiary.isDissolved = true
RETURN o.name AS OrganizationName, subsidiary.name AS DissolvedSubsidiaryName",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WHERE o.nbrEmployees > 100
RETURN o.name, ic.name
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""New Energy Group""})-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN p.name AS BoardMemberName",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = true AND o.isPublic = true
RETURN o.name
ORDER BY o.id
LIMIT 5",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.revenue > 100000000
RETURN c.name, count(o) AS NumberOfOrganizations
ORDER BY NumberOfOrganizations DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CEO]->(o:Organization)
RETURN o",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE c.summary CONTAINS ""population of more than one million""
RETURN o.name AS OrganizationName, c.name AS CityName",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_INVESTOR]->(investor:Organization {name: ""Philanthropic Foundation""})
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE exists {
  MATCH (p)-[:AUTHORED]->(a:Article)
}
WITH o, p, count{(p)-[:AUTHORED]->(a:Article)} AS articlesCount
WHERE articlesCount > 3
RETURN o.name AS OrganizationName, p.name AS CEOName, articlesCount",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.summary CONTAINS ""merger"" OR a.summary CONTAINS ""acquisition""
RETURN o.name, a.title, a.date",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {gender: 'Female'}), (o)-[:HAS_CATEGORY]->(c:IndustryCategory {name: 'Healthcare'})
RETURN o.name AS OrganizationName, p.name AS CEOName",Simple Aggregation Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN a",Simple Aggregation Queries,companies,False,False,True
"MATCH (p:Person)-[r:HAS_CEO]->(o:Organization)
WHERE r.since IS NOT NULL AND date() - r.since >= duration({years: 10})
RETURN p.name AS CEO_Name, o.name AS Organization_Name, r.since AS Start_Date",Simple Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE count{(o)-[:HAS_COMPETITOR]->(:Organization)} > 3
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (p:Person)-[:HAS_CEO]->(org1:Organization), (p)-[:HAS_INVESTOR]->(org2:Organization)
WHERE org1.id <> org2.id
RETURN p.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Rome""})
WHERE o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.nbrEmployees > 300
RETURN o",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE NOT country.name = ""United States of America"" AND exists{(o)-[:HAS_SUBSIDIARY]->(:Organization)}
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.isPublic = true
RETURN o, c
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WITH o, count{(o)-[:HAS_COMPETITOR]->(:Organization)} AS competitors
ORDER BY competitors DESC
LIMIT 3
RETURN o.name AS OrganizationName",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN o.name AS Organization, p.name AS BoardMember
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue > 100000000 AND o.nbrEmployees < 500
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE o.isDissolved = true
RETURN o, a
ORDER BY a.date DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE country.summary CONTAINS 'North America'
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(:Organization)
RETURN o.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: 'Rome'})
RETURN a.title
LIMIT 5",Simple Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
RETURN a
ORDER BY a.date DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (p:Person)-[:HAS_CEO]->(o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Technology""})
RETURN p.name AS CEO_Name
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE o.isPublic IS NOT NULL AND o.isPublic = true
RETURN o",Simple Retrieval Queries,companies,False,False,False
"MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization)
WITH p, count(o) AS numOrgs
WHERE numOrgs > 1
RETURN p.name, numOrgs
ORDER BY numOrgs DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (p:Person)-[:HAS_CEO]->(o:Organization)
WITH p, count(o) AS numOrgs
WHERE numOrgs > 1
RETURN p
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = false AND o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE EXISTS {(o)-[:HAS_SUBSIDIARY]->(:Organization)}
WITH o, count{(o)-[:HAS_SUBSIDIARY]->(:Organization)} AS numSubsidiaries
ORDER BY numSubsidiaries DESC
RETURN o.name AS OrganizationName, numSubsidiaries",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization)
RETURN o.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'})
MATCH (a:Article)-[:MENTIONS]->(o)
RETURN a.author AS Author
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 100
RETURN DISTINCT c.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: ""Accenture""})-[:HAS_CATEGORY]->(ic:IndustryCategory)
RETURN ic.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""Accenture""})-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)<-[:HAS_INVESTOR]-(investor:Organization {name: ""Accenture""})
RETURN o",Simple Retrieval Queries,companies,True,False,False
"MATCH (c:City)-[:IN_COUNTRY]->(country:Country)
WHERE EXISTS {
    (o:Organization)-[:IN_CITY]->(c)
    WHERE o.isPublic = true
}
RETURN country.name, count(c) AS numCities
ORDER BY numCities DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN o.name AS Organization, collect(p.name) AS BoardMembers
ORDER BY o.revenue DESC
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.isDissolved = true
RETURN o.name, c.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 500
RETURN DISTINCT c.name",Simple Retrieval Queries,companies,False,False,False
"MATCH (a:Article)
RETURN a
ORDER BY a.sentiment DESC
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.date >= date('2022-01-01') AND a.date <= date('2022-12-31')
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})-[:IN_CITY]->(c:City)
WITH c, count(o) AS numOrgs
ORDER BY numOrgs DESC
LIMIT 5
RETURN c.name AS CityName, c.id AS CityID",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment < 0
RETURN a.author AS Author
ORDER BY a.date ASC
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE a.sentiment > 0.8
RETURN o.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.summary CONTAINS 'based in Dublin, Ireland'
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {summary: ""CEO at Accenture""})
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.revenue >= 1000000
RETURN a.title AS ArticleTitle, a.summary AS ArticleSummary",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(org:Organization)
WHERE exists{ (o)-[:HAS_INVESTOR]->(org) }
RETURN o, org",Complex Retrieval Queries,companies,False,False,False
"MATCH (p:Person {name: ""David Correa""})-[:HAS_INVESTOR]->(o:Organization)
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""New Energy Group""})<-[:HAS_SUPPLIER]-(supplier:Organization)
RETURN supplier.name, supplier.nbrEmployees",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization) WHERE o.nbrEmployees > 300
MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN o.name AS Organization, p.name AS BoardMember",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.isDissolved = true
RETURN a.title AS ArticleTitle, a.summary AS ArticleSummary",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: ""Rome""})
WHERE a.date.year = 2022
RETURN a",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
WHERE o.motto IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""New Energy Group""})-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor",Complex Retrieval Queries,companies,False,False,True
"MATCH (c:City)-[:IN_COUNTRY]->(country:Country)
WHERE exists {
  (c)<-[:IN_CITY]-(o:Organization)
}
WITH country, count{(c)<-[:IN_CITY]-(o:Organization)} AS orgCount
WHERE orgCount > 3
RETURN country",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WHERE o.name CONTAINS 'Energy'
RETURN o.name, ic.name",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization)
MATCH (o)-[:HAS_CEO]->(ceo:Person)
RETURN o.name AS Organization, ceo.name AS CEO",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.isPublic = true
RETURN a
ORDER BY a.sentiment DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE o.nbrEmployees IS NOT NULL
RETURN o.name, o.nbrEmployees
ORDER BY o.nbrEmployees DESC
LIMIT 5",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue > 50000000 AND o.isDissolved = false
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees >= 100
RETURN c.name, count(o) AS NumberOfOrganizations
ORDER BY NumberOfOrganizations DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.revenue > 50000000
RETURN DISTINCT a.author
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WITH c, count(o) AS orgCount
WHERE orgCount > 3
RETURN c.name AS CityName, orgCount
ORDER BY orgCount DESC
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE o.isPublic = false
RETURN o.name AS OrganizationName, ceo.name AS CEOName
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization)
WHERE o.nbrEmployees > 1000
RETURN p",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization)
WITH supplier, count(DISTINCT o) AS numClients
WHERE numClients > 1
RETURN supplier
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.motto CONTAINS 'world'
RETURN o.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE count{(o)-[:HAS_INVESTOR]->()} > 1
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.date < date('2020-01-01')
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN p.name AS BoardMember, o.name AS Organization
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.revenue < 5000000
RETURN a
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o1:Organization)<-[:HAS_INVESTOR]-(investor)-[:HAS_INVESTOR]->(o2:Organization)
WHERE o1 <> o2
RETURN o1.name AS Organization1, o2.name AS Organization2
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Paris""})
WHERE exists{ (o)-[:HAS_SUBSIDIARY]->(:Organization) }
RETURN o",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WHERE o.revenue < 5000000
RETURN o.name AS Organization, p.name AS BoardMember
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""New York City""})
WHERE EXISTS {(o)-[:HAS_CEO]->(:Person)}
RETURN o
ORDER BY o.revenue DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""}), (o)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Technology""})
WHERE o.revenue > 1000000000
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.nbrEmployees > 500 AND a.sentiment < 0.5
RETURN a
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE o.revenue > 1E9 AND EXISTS {(o)-[:HAS_SUBSIDIARY]->(:Organization)}
RETURN ceo
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE o.isDissolved = true AND a.sentiment > 0.5
RETURN o.name, o.id, a.title, a.sentiment
ORDER BY a.sentiment DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
WHERE o.revenue > 500000000
MATCH (a:Article)-[:MENTIONS]->(o)
RETURN a
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CEO]->(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""Italy""})
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WITH o, count(p) AS boardMembers
ORDER BY boardMembers DESC
LIMIT 3
RETURN o.name, boardMembers",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""Italy""})
WHERE o.isPublic = true
RETURN o
ORDER BY o.revenue DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Healthcare""})
WHERE a.sentiment > 0.5
RETURN a
ORDER BY a.sentiment DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment > 0.9
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)<-[:HAS_INVESTOR]-(p:Person)-[:LIVES_IN]->(c:City {name: 'Seattle'})
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_INVESTOR]->(investor)
WHERE o.revenue > 500000000
RETURN investor
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person), (a:Article)-[:MENTIONS]->(o)
WHERE a.sentiment < 0.5
RETURN o, p, a
ORDER BY a.sentiment ASC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WITH o, count(DISTINCT country) AS countries
WHERE countries > 1
RETURN o
ORDER BY countries DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'}),
      (o)-[:HAS_CEO]->(p:Person {name: 'Julie Spellman Sweet'})
WHERE o.isPublic = true
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (ceo:Person {name: ""Julie Spellman Sweet""})-[:HAS_CEO]->(org:Organization)
MATCH (article:Article)-[:MENTIONS]->(org)
RETURN article
ORDER BY article.date DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""Accenture""})-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (c:City)<-[:IN_CITY]-(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
WITH c, count(o) AS orgCount
ORDER BY orgCount DESC
LIMIT 3
RETURN c.name AS City, orgCount AS NumberOfOrganizations",Complex Retrieval Queries,companies,False,False,False
"MATCH (a:Article {author: ""James Blackman""})-[:MENTIONS]->(o:Organization)
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
WHERE EXISTS { (o)-[:HAS_CATEGORY]->(:IndustryCategory {name: ""Software""}) }
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE o.isPublic = false AND o.nbrEmployees IS NOT NULL
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Finance""})
WHERE o.nbrEmployees > 1000
RETURN o",Complex Retrieval Queries,companies,True,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment < 0.3
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE exists {
  MATCH (ceo)-[:MENTIONED_IN]->(article:Article)
}
WITH org, count(article) AS mentions
WHERE mentions > 1
RETURN org
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: 'Julie Spellman Sweet'})
WHERE EXISTS {
    (o)-[:HAS_SUBSIDIARY]->(:Organization {name: 'Icon Integration'})
}
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
WHERE o.isPublic = true AND o.isDissolved = false
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization), (o)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""Accenture""})-[:HAS_CEO]->(ceo:Person)
RETURN ceo",Simple Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue > 100E6 AND o.revenue < 500E6
RETURN o",Simple Aggregation Queries,companies,False,False,False
"MATCH (a:Article {author: 'James Blackman'})-[:MENTIONS]->(o:Organization)
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""}), (o)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE o.isPublic = true AND o.nbrEmployees > 1000
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
WHERE EXISTS {
    (a:Article)-[:MENTIONS]->(o)
    WHERE a.sentiment > 0.7
}
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (org:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE EXISTS { (org)-[:HAS_CEO]->(:Person) }
MATCH (org)-[:HAS_BOARD_MEMBER]->(person:Person)
RETURN org.name AS Organization, person.name AS BoardMember
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person), (a:Article)-[:MENTIONS]->(o)
WHERE a.sentiment > 0.5
WITH o, a.date AS articleDate
ORDER BY articleDate DESC
RETURN o.name AS OrganizationName, o.summary AS OrganizationSummary
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
WHERE o.revenue > 1E9
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
WHERE o.nbrEmployees > 1000 AND o.isPublic = true
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
MATCH (a:Article)-[:MENTIONS]->(o)
WHERE a.sentiment < 0.5
RETURN a
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE o.isPublic = true AND o.revenue > 1E9
RETURN p.name AS CEO_Name, o.name AS Organization_Name
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(:Person)
WHERE o.nbrEmployees > 1000
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""Italy""})
WHERE o.isPublic = true AND o.isDissolved = false
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
MATCH (a:Article)-[:MENTIONS]->(o)
WHERE a.sentiment > 0.8
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.nbrEmployees > 500
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person {name: 'Julie Spellman Sweet'})
WHERE org.revenue > 500000000
MATCH (org)-[:HAS_BOARD_MEMBER]->(boardMember:Person)
RETURN org.name AS OrganizationName, collect(boardMember.name)[..3] AS BoardMembers",Complex Retrieval Queries,companies,False,False,True
"MATCH (parent:Organization {name: ""Accenture""})-[:HAS_SUBSIDIARY]->(sub:Organization)
WHERE sub.nbrEmployees > 100
RETURN sub
ORDER BY sub.nbrEmployees DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""}),
      (a:Article {author: ""David Correa""})-[:MENTIONS]->(o)
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]->(a:Article)
WHERE o.nbrEmployees > 1000 AND a.sentiment < 0.5
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""Italy""})
WHERE o.isPublic = true AND EXISTS {(o)-[:HAS_CEO]->(:Person)}
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (ceo:Person {name: 'Julie Spellman Sweet'})-[:HAS_CEO]->(org:Organization)
MATCH (org)-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o1:Organization)-[:HAS_INVESTOR]->(i:Person)<-[:HAS_INVESTOR]-(o2:Organization),
      (o1)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""Italy""})
WHERE o1 <> o2
RETURN o1.name AS Organization1, o2.name AS Organization2, i.name AS Investor
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
WHERE EXISTS {
    (o)<-[:MENTIONS]-(a:Article)
    WHERE a.sentiment > 0.5
}
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,True,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE o.revenue < 10000000
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(:Person), (a:Article)-[:MENTIONS]->(o)
WHERE a.date IS NOT NULL
RETURN o.name, o.id, COUNT(a) AS mentions
ORDER BY a.date DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_INVESTOR]->(investor)
WHERE o.nbrEmployees < 50
RETURN investor
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: 'Italy'})
MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN o.name AS Organization, p.name AS BoardMember
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})-[:HAS_CEO]->(p:Person)
RETURN o.name AS CompanyName, p.name AS CEOName
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.nbrEmployees > 50
RETURN a
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""}), (o)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE o.isDissolved = false
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE o.isDissolved = true AND a.sentiment < 0.5
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (c:Country)<-[:IN_CITY]-(:City)<-[:IN_CITY]-(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
WITH c, count(o) AS orgCount
ORDER BY orgCount DESC
LIMIT 3
RETURN c.name AS Country, orgCount AS NumberOfOrganizations",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})-[:IN_CITY]->(c:City)
WHERE EXISTS {
    (o)-[:HAS_CEO]->(:Person {name: 'Julie Spellman Sweet'})
}
RETURN c.name AS CityName",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WHERE o.revenue > 100000000
RETURN o.name AS Organization, p.name AS BoardMember
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Software""})
WHERE o.nbrEmployees > 50
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization {name: ""Icon Integration""})
RETURN o.name",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article {author: ""David Correa""})-[:MENTIONS]->(o:Organization)
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {isPublic: true})-[:HAS_CEO]->(ceo:Person)
RETURN o.name AS Organization, ceo.name AS CEO
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})<-[:MENTIONS]-(a:Article)
WHERE a.date >= date('2020-01-01')
RETURN a",Complex Retrieval Queries,companies,False,False,True
"MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'})
RETURN p.name
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""Accenture""})-[:HAS_COMPETITOR]->(competitor:Organization)
RETURN competitor
ORDER BY competitor.name
LIMIT 5",Complex Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: ""Accenture""})
WHERE a.sentiment > 0.8
RETURN a
LIMIT 5",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE o.nbrEmployees > 1000 AND a.date > date('2021-01-01')
RETURN a
ORDER BY a.date ASC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: ""Electronic Products Manufacturers""})
MATCH (org)-[:IN_CITY]->(city:City)
RETURN city.name, count(org) AS NumberOfOrganizations
ORDER BY NumberOfOrganizations DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.nbrEmployees > 1000
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = true AND o.revenue > 10000000
RETURN o.name
ORDER BY o.revenue DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
MATCH (o)-[:HAS_CATEGORY]->(ind:IndustryCategory)
RETURN ind.name, count(o) AS NumberOfOrganizations
ORDER BY NumberOfOrganizations DESC
LIMIT 5",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: 'Julie Spellman Sweet'})
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""Belgium""})
WHERE a.sentiment > 0.5
RETURN o.name AS OrganizationName, o.id AS OrganizationID",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {isPublic: true})-[:HAS_CEO]->(p:Person)
WITH p
ORDER BY p.id
LIMIT 3
MATCH (p)-[:HAS_PARENT]->(parent:Person)
RETURN p.name AS CEO_Name, parent.name AS Parent_Name",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE o.isDissolved = true
RETURN o.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {isPublic: true})-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
RETURN DISTINCT country.name
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_INVESTOR]->(o:Organization)
RETURN o
LIMIT 3",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
RETURN c.name AS City, o.name AS Organization, o.nbrEmployees AS Employees
ORDER BY o.nbrEmployees DESC
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {isDissolved: true})-[:HAS_CEO]->(p:Person)
RETURN p.name AS CEO_Name, o.name AS Organization_Name
LIMIT 3",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(i:IndustryCategory)
WITH i, count(o) AS orgCount
ORDER BY orgCount DESC
LIMIT 3
RETURN i.name AS Industry, orgCount",Simple Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})-[:HAS_BOARD_MEMBER]->(p:Person)
RETURN p.name AS BoardMemberName",Complex Retrieval Queries,companies,False,False,True
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_CHILD]->(child:Person)
RETURN child",Complex Retrieval Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)-[:HAS_PARENT]->(parent:Person)
WHERE org.revenue > 100000000
RETURN parent
ORDER BY org.revenue DESC
LIMIT 5",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
WHERE o.motto CONTAINS 'security'
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
MATCH (a:Article)-[:MENTIONS]->(o)
WHERE a.sentiment > 0.75
RETURN a
ORDER BY a.date DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WITH o, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 3
MATCH (o)-[:HAS_CEO]->(ceo:Person)
RETURN o.name AS Organization, ceo.name AS CEO",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Healthcare""})
WHERE o.isPublic = true
RETURN o
ORDER BY o.revenue DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]-(a:Article {author: 'David Correa'})
WHERE o.isDissolved = true
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
WHERE o.revenue < 5000000
RETURN o",Complex Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS 'consumer behavior' AND a.sentiment > 0.6
MATCH (a)-[:MENTIONS]->(o:Organization)
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (p:Person {name: ""Julie Spellman Sweet""})-[:HAS_INVESTOR]->(o:Organization)
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.motto IS NOT NULL AND o.isPublic = true
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)-[:HAS_CHILD]->(child:Person)
WHERE org.revenue > 500000000
RETURN ceo.name AS CEOName, child.name AS ChildName
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WITH o, count(ic) AS numCategories
WHERE numCategories > 1
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(:Person), (a:Article)-[:MENTIONS]->(o)
WHERE o.name IS NOT NULL
WITH o, a.date AS articleDate
ORDER BY articleDate DESC
RETURN o.name AS OrganizationName, o.summary AS OrganizationSummary
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
WHERE o.nbrEmployees > 10000
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.siteName = 'MrWeb'
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization {name: 'SuccessFactors'})
RETURN o",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = false AND o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 1000
RETURN c.name, count(o) AS numberOfOrganizations
ORDER BY numberOfOrganizations DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person)
WHERE EXISTS {
  (ceo)-[:HAS_BOARD_MEMBER]->(:Organization)
}
RETURN org.name AS OrganizationName, ceo.name AS CEOName",Complex Retrieval Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
WHERE a.sentiment > 0.7
RETURN a
ORDER BY a.date DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_COMPETITOR]->(competitor:Organization)
WHERE o.revenue > 1E9
RETURN o.name AS Organization, competitor.name AS Competitor
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Technology""})
WHERE o.isPublic = true
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WITH o, country
MATCH (o)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c2:City)-[:IN_COUNTRY]->(country)
WITH o, country, count(sub) AS numSubsidiaries
RETURN o.name, country.name, numSubsidiaries
ORDER BY numSubsidiaries DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o1:Organization)-[:HAS_INVESTOR]->(i)<-[:HAS_INVESTOR]-(o2:Organization)
WHERE o1 <> o2 AND EXISTS { (o1)-[:HAS_COMPETITOR]->(o2) }
RETURN o1.name AS Organization1, o2.name AS Organization2, i.name AS Investor
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (parentOrg:Organization {name: ""Accenture""})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:HAS_CEO]->(ceo:Person)
RETURN sub.name AS SubsidiaryName, ceo.name AS CEOName
ORDER BY sub.revenue DESC
LIMIT 3",Complex Retrieval Queries,companies,False,False,False
"MATCH (o:Organization {name: ""New Energy Group""})<-[:HAS_SUPPLIER]-(supplier:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
RETURN supplier
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]->(a:Article)
WHERE o.nbrEmployees > 500 AND a.sentiment > 0.5
RETURN o.name",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization {name: ""Accenture""})<-[:HAS_INVESTOR]-(investor)
WITH investor
LIMIT 3
MATCH (investor)-[:HAS_INVESTOR]->(otherOrgs)
RETURN investor.name, collect(otherOrgs.name) AS investedOrganizations",Complex Retrieval Queries,companies,False,False,False
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS 'consumer behavior'
RETURN a
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization {name: 'Icon Integration'})
RETURN o
LIMIT 3",Complex Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isPublic = true AND o.nbrEmployees > 1000
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o1:Organization {name: ""Accenture""})-[:IN_CITY]->(c:City)<-[:IN_CITY]-(o2:Organization)
WHERE o1 <> o2
RETURN o2.name AS OrganizationName",Complex Aggregation Queries,companies,False,False,False
"MATCH (org:Organization)-[:HAS_BOARD_MEMBER]->(ceo:Person)-[:HAS_CEO]->(comp:Organization)
WHERE org <> comp AND EXISTS { (ceo)-[:HAS_CEO]->(comp) }
RETURN org.name AS Organization, ceo.name AS CEO, comp.name AS Competitor",Complex Aggregation Queries,companies,True,False,False
"MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization {name: ""New Energy Group""})
RETURN o.name AS OrganizationName",Verbose query,companies,False,False,False
"MATCH (p:Person)-[:HAS_CHILD]->(child:Person)
WHERE exists {
  (p)-[:WORKS_FOR]->(org:Organization)
  AND (child)-[:WORKS_FOR]->(org)
}
RETURN p
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization {isDissolved: true})-[:MENTIONS]-(a:Article)
WHERE a.date >= date('2023-01-01')
RETURN o.name
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE country.name CONTAINS 'America'
RETURN o.name AS Organization, o.nbrEmployees AS Employees
ORDER BY o.nbrEmployees DESC
LIMIT 5",Verbose query,companies,False,False,False
"MATCH (o:Organization)
WHERE o.revenue > 1000000000 AND o.isPublic = true
RETURN o",Verbose query,companies,False,False,False
"MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization)
WITH p, count(o) AS numOrgs
WHERE numOrgs > 1
RETURN p.name
ORDER BY p.name
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk), (a)-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
WHERE ic.name CONTAINS ""Technology""
WITH c, a
ORDER BY a.date DESC
LIMIT 3
MATCH (c)-[:MENTIONS]->(city:City)
RETURN DISTINCT city.name",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees IS NOT NULL
RETURN o.name
ORDER BY o.nbrEmployees ASC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment > 0.9
RETURN o",Verbose query,companies,False,False,True
"MATCH (investor:Organization)-[:HAS_INVESTOR]->(org:Organization)-[:HAS_CEO]->(ceo:Person)
RETURN org.name AS Organization, ceo.name AS CEO
LIMIT 3",Verbose query,companies,False,False,False
"MATCH (o:Organization)
WHERE count{(o)-[:HAS_SUPPLIER]->(:Organization)} > 1
RETURN o
ORDER BY count{(o)-[:HAS_SUPPLIER]->(:Organization)} DESC
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)-[:MENTIONS]->(o:Organization)
WHERE a.siteName = ""MrWeb""
RETURN o.name
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization)
RETURN o.name
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE c.summary CONTAINS ""county seat""
RETURN o.name AS OrganizationName, c.name AS CityName",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WHERE o.nbrEmployees > 500
RETURN DISTINCT country.name
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: ""Julie Spellman Sweet""})
RETURN o.name
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WHERE o.revenue > 1000000
RETURN o.name AS Organization, p.name AS BoardMember
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
RETURN o, a.date AS article_date
ORDER BY a.date DESC
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country)
WITH o, count(DISTINCT country) AS countriesCount
WHERE countriesCount > 1
RETURN o
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (org:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country)
WHERE NOT EXISTS {
  MATCH (capital:City)-[:IS_CAPITAL_OF]->(country)
  WHERE capital.name = city.name
}
RETURN org",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WHERE exists{(o)-[:HAS_SUBSIDIARY]->(:Organization)} AND exists{(o)-[:HAS_SUPPLIER]->(:Organization)}
RETURN o
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization {isPublic: false})-[:HAS_CEO]->(ceo:Person)
RETURN ceo.name
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS ""consumer behavior""
MATCH (a)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country)
RETURN DISTINCT country.name
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
WHERE o.revenue > 500000000
RETURN o.name
LIMIT 3",Verbose query,companies,False,False,False
"MATCH (p:Person)
WHERE EXISTS { (p)-[:HAS_PARENT]->(:Person) } AND EXISTS { (p)-[:HAS_CHILD]->(:Person) }
RETURN p
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WITH o ORDER BY o.nbrEmployees DESC LIMIT 1
MATCH (a:Article)-[:MENTIONS]->(o)
RETURN a",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE o.isPublic = true AND a.sentiment < 0
RETURN o
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: ""United States of America""})
RETURN a
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WHERE o.nbrEmployees > 1000
RETURN o
ORDER BY o.nbrEmployees DESC
LIMIT 5",Simple Retrieval Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_COMPETITOR]->(:Organization {name: ""SAP""})
RETURN o",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Electronic Products Manufacturers""})
RETURN o
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WITH o, count(p) AS boardMembersCount
WHERE boardMembersCount > 5
RETURN o.name, boardMembersCount",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS 'innovation'
MATCH (a)-[:MENTIONS]->(o:Organization)
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person {name: 'Julie Spellman Sweet'})
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (org:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country),
      (org)-[:HAS_CEO]->(ceo:Person)-[:NATIONALITY]->(ceoCountry:Country)
WHERE NOT country = ceoCountry
RETURN org.name AS OrganizationName, country.name AS CountryName, ceo.name AS CEOName, ceoCountry.name AS CEONationality",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_INVESTOR]->(s:Organization)
WHERE s.isPublic = false
RETURN o.name, count(s) AS investments
ORDER BY investments DESC",Complex Aggregation Queries,companies,False,False,True
"MATCH (c:City)<-[:IN_CITY]-(o:Organization)-[:HAS_CEO]->(p:Person)
WHERE o.revenue >= 1E9
RETURN c.name, count(p) AS NumberOfCEOs
ORDER BY NumberOfCEOs DESC",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.sentiment IS NOT NULL
RETURN o.name AS Organization, avg(a.sentiment) AS AverageSentiment
ORDER BY AverageSentiment DESC",Complex Aggregation Queries,companies,False,True,False
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.summary CONTAINS 'financial fraud'
RETURN o.name",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country),
      (o)-[:HAS_SUPPLIER]->(supplier:Organization)-[:IN_CITY]->(city2:City)-[:IN_COUNTRY]->(country2:Country)
WHERE country.name = country2.name
RETURN DISTINCT o.name AS Organization, country.name AS Country",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person)
WITH o, count(DISTINCT p) AS diversity
ORDER BY diversity DESC
RETURN o.name, diversity",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:MENTIONS]-(a:Article)
WHERE EXISTS { (a)-[:HAS_CHUNK]->(c:Chunk) WHERE c.text CONTAINS ""technology"" }
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC",Complex Aggregation Queries,companies,False,False,True
"MATCH (a:Article)-[:MENTIONS]->(o:Organization)
WHERE a.sentiment = 0.5
RETURN o",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
WHERE a.sentiment IS NOT NULL
RETURN o.name AS Organization, a.title AS Article, a.sentiment AS Sentiment
ORDER BY a.sentiment ASC
LIMIT 10",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)
WHERE o.summary CONTAINS 'restructuring' AND o.isDissolved IS NOT NULL
RETURN o.name, o.summary",Complex Aggregation Queries,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory {name: ""Tech""})
MATCH (o)<-[:HAS_INVESTOR]-(investor)
RETURN investor.name, count(o) AS investments
ORDER BY investments DESC
LIMIT 3",Verbose query,companies,False,False,False
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE exists {
  MATCH (p)-[:AUTHORED]->(a:Article)
}
WITH o, p, count{(p)-[:AUTHORED]->(:Article)} AS articlesCount
WHERE articlesCount > 1
RETURN o.name AS Organization, p.name AS CEO, articlesCount",Complex Aggregation Queries,companies,False,False,True
"MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization)
WITH p, count(o) AS orgCount
WHERE orgCount > 1
RETURN p.name
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City)
WHERE o.nbrEmployees > 1000
RETURN c.name
LIMIT 3",Verbose query,companies,False,False,False
"MATCH (o:Organization)
WHERE o.motto IS NOT NULL
RETURN o.name
LIMIT 3",Verbose query,companies,False,False,False
"MATCH (a:Article {author: ""David Correa""})-[:HAS_CHUNK]->(c:Chunk)-[:MENTIONS]->(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory)
RETURN DISTINCT ic.name
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory {name: ""Technology""})
WHERE o.revenue IS NOT NULL
RETURN o.name, o.revenue
ORDER BY o.revenue DESC
LIMIT 3",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)-[:IN_CITY]->(c:City {name: ""Seattle""})
RETURN o",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WHERE o.revenue IS NOT NULL
RETURN o
ORDER BY o.revenue DESC
LIMIT 5",Verbose query,companies,False,False,True
"MATCH (o:Organization)
WHERE o.isDissolved = true
RETURN o.name
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (o:Organization)-[:HAS_CEO]->(p:Person)
WHERE o.isPublic = true
RETURN o.name AS Organization, p.name AS CEO
ORDER BY o.nbrEmployees DESC
LIMIT 3",Verbose query,companies,False,False,True
"MATCH (a:Article)-[:HAS_CHUNK]->(c:Chunk)
WHERE c.text CONTAINS ""corporate social responsibility""
MATCH (a)-[:MENTIONS]->(o:Organization)
RETURN o",Complex Aggregation Queries,companies,False,False,True
"MATCH (o:Organization)<-[:MENTIONS]-(a:Article)
RETURN o.name, count(a) AS mentions
ORDER BY mentions DESC
LIMIT 5",Complex Aggregation Queries,companies,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'United Kingdom'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e",Verbose query,fincen,False,False,True
"MATCH (f:Filing {originator_bank: 'CIMB Bank Berhad'})
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE c.name = 'Angola'
RETURN f
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity), (f)-[:BENEFITS]->(e)
RETURN f
LIMIT 3",Verbose query,fincen,False,False,False
"MATCH (f:Filing {beneficiary_bank: 'Barclays Bank Plc'})
WHERE f.amount IS NOT NULL
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {tld: '.sg'})
RETURN e
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WITH e.name AS originator_bank, duration.between(f.begin, f.end) AS duration
ORDER BY duration ASC
RETURN originator_bank, duration
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.amount > 1000000
WITH e, count(f) AS transactions
ORDER BY transactions DESC
LIMIT 3
RETURN e.name, transactions",Verbose query,fincen,False,False,False
"MATCH (f:Filing)
RETURN f
ORDER BY f.amount ASC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)-[:BENEFITS]->(e)
WITH e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5
RETURN e.name, filings_count",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c, count(e) AS num_beneficiary_banks
ORDER BY num_beneficiary_banks DESC
RETURN c.name AS country_name, num_beneficiary_banks
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 1000000
RETURN f
ORDER BY f.begin
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'China'})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name, filingsCount",Verbose query,fincen,False,False,True
"MATCH (f:Filing {beneficiary_bank: 'United Overseas Bank Ltd'})
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Singapore'})
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(e) AS NumberOfEntities
ORDER BY NumberOfEntities DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'Angola' AND f.amount > 100000
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(oc:Country),
      (f)-[:BENEFITS]->(b:Entity)-[:COUNTRY]->(bc:Country)
WHERE oc.code = bc.code
RETURN f
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
WITH e, count(c) AS numCountries
ORDER BY numCountries DESC
LIMIT 3
RETURN e.name, numCountries",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.origin_lat IS NOT NULL AND f.beneficiary_lat IS NOT NULL
RETURN f, abs(toFloat(f.origin_lat) - toFloat(f.beneficiary_lat)) AS lat_difference
ORDER BY lat_difference DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, count(e) AS EntityCount
ORDER BY EntityCount DESC",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'Singapore' AND f.amount > 500000
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f
ORDER BY duration.between(f.begin, f.end)
LIMIT 3",Verbose query,fincen,False,False,False
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(e) AS NumberOfEntities
ORDER BY NumberOfEntities DESC
LIMIT 5",Verbose query,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:BENEFITS]->(b:Entity)
WHERE b.country = 'China'
WITH e, count(f) AS transactions
ORDER BY transactions DESC
LIMIT 3
RETURN e",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {tld: '.cn'})
RETURN e
LIMIT 5",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.amount > 100000
RETURN f
ORDER BY f.begin ASC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'China'})
RETURN f
ORDER BY f.end DESC
LIMIT 5",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'Singapore' AND f.amount > 1500000
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e, filingsCount",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.beneficiary_bank_country = 'Singapore'
WITH c, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN c.name AS Country, filingsCount",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'Singapore' AND f.amount >= 500000 AND f.amount <= 2000000
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e, filingsCount",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.amount > 2500000
RETURN c.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Complex Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.originator_bank = 'CIMB Bank Berhad' AND f.beneficiary_bank_country = 'United Kingdom'
RETURN f
ORDER BY f.begin DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, avg(f.amount) AS avgAmount
ORDER BY avgAmount DESC
LIMIT 5
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, avgAmount",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing {originator_bank: 'CIMB Bank Berhad'})
RETURN f
ORDER BY f.begin DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {name: ""Singapore""})
MATCH (e)-[:FILED]->(f:Filing)
RETURN f
ORDER BY f.begin
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:BENEFITS]->(b:Entity)
WHERE f.beneficiary_bank_country = ""United Kingdom""
WITH e, count(f) AS transactions
ORDER BY transactions DESC
LIMIT 5
RETURN e.name, transactions",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin_date_format >= '2015-03-01T00:00:00Z' AND f.end_date_format <= '2015-09-30T23:59:59Z'
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS Filings
ORDER BY Filings DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.amount > 500000
RETURN f
ORDER BY f.begin
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(originator:Entity),
      (f)-[:BENEFITS]->(beneficiary:Entity)-[:COUNTRY]->(c:Country {name: ""Singapore""})
RETURN originator.name AS OriginatorBank, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'})
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.originator_bank_country IS NOT NULL AND f.beneficiary_bank_country IS NOT NULL
  AND f.originator_bank_country <> f.beneficiary_bank_country
RETURN e
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'Singapore' AND f.beneficiary_bank_country = 'United Kingdom'
RETURN f
ORDER BY f.begin DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Singapore'})
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Verbose query,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE c.name = 'Singapore'
RETURN f
ORDER BY f.amount ASC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing {beneficiary_bank_country: 'Angola'})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e",Verbose query,fincen,False,False,False
"MATCH (f:Filing)-[:CONCERNS|:BENEFITS|:ORIGINATOR]->(e:Entity)
WITH f, duration.between(f.begin, f.end) AS relationship_duration
ORDER BY relationship_duration DESC
LIMIT 3
RETURN f",Verbose query,fincen,False,False,False
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE e.country = 'CHN'
RETURN e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(originator:Entity)
WHERE exists {
    (f)-[:BENEFITS]->(:Entity)-[:COUNTRY]->(:Country {name: 'USA'})
}
RETURN originator.name AS OriginatorBankName, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.originator_bank_country = 'Germany'
RETURN e.name AS BeneficiaryBank, sum(f.amount) AS TotalReceived
ORDER BY TotalReceived DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN c.name AS Country, filingsCount",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'Singapore'
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing {beneficiary_bank_country: 'France'})
WITH e, count(e) AS filings_count
ORDER BY filings_count DESC
LIMIT 3
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS country_name, filings_count",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'Spain' AND f.amount > 5000000
RETURN f
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.amount > 50000000
RETURN e
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing {originator_bank: 'HSBC'})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e, filingsCount",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Japan'})
RETURN f
ORDER BY f.number DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.originator_bank_country IS NOT NULL
RETURN f.originator_bank_country AS Country, count(f) AS Filings
ORDER BY Filings DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity {name: 'The Bank of New York Mellon Corp.'})
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:CONCERNS]->(bank:Entity)
WHERE exists {
    (bank)-[:COUNTRY]->(:Country {name: 'Australia'})
}
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'Italy' AND f.amount > 10000000
RETURN f
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN e.name AS EntityName, sum(f.amount) AS TotalAmountReceived
ORDER BY TotalAmountReceived DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Mexico'})
WHERE f.amount > 500000
RETURN f
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:CONCERNS]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name, filingsCount",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name, count(e) AS num_entities
ORDER BY num_entities DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, duration.between(f.begin, f.end) AS dur
ORDER BY dur DESC
RETURN e.name AS EntityName, dur AS Duration
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity {name: 'CIMB Bank Berhad'})
RETURN f
ORDER BY f.number DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country IS NOT NULL
RETURN f.originator_bank_country AS Country, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:BENEFITS]-(f:Filing)
WITH c, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN c.name AS CountryName, filingsCount",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'})
RETURN f
ORDER BY f.number DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.originator_bank_country = 'Angola'
RETURN e
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c, count(e) AS numBanks
ORDER BY numBanks DESC
LIMIT 3
RETURN c.name AS Country, numBanks",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.originator_bank_country = 'Singapore'
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_bank_country = 'Singapore'
RETURN e, sum(f.amount) as total_amount
ORDER BY total_amount DESC
LIMIT 5",Verbose query,fincen,False,False,False
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
WITH c, count(e) AS entityCount
ORDER BY entityCount DESC
RETURN c.name AS CountryName, entityCount
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {tld: '.uk'})
RETURN f
ORDER BY f.begin DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom'
WITH e, count(f) AS transactions
ORDER BY transactions DESC
LIMIT 3
RETURN e.name, transactions",Verbose query,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'Singapore' AND f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f
ORDER BY duration.between(f.begin, f.end) ASC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Angola'})
WITH f
ORDER BY f.amount ASC
RETURN f
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(originator:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom'
WITH originator, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN originator.name AS OriginatorBank, filingsCount",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.amount > 2000000
RETURN c.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.beneficiary_bank IS NOT NULL
RETURN c.name AS Country, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.beneficiary_bank_country = 'Singapore'
RETURN e
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'China'})
WHERE exists{ (f)-[:CONCERNS]->(:Entity)-[:COUNTRY]->(:Country {name: 'China'}) }
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'})
WHERE f.end.year = 2014
RETURN f
ORDER BY f.end DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {code: 'USA'})
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {name: 'India'})
WITH e
MATCH (e)<-[:BENEFITS]-(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name, filingsCount",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Australia'})
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE f.end > datetime('2016-01-01T00:00:00Z')
RETURN e
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, count(e) AS NumberOfEntities
ORDER BY NumberOfEntities DESC",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_bank = 'Barclays Bank Plc'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e.name, filingsCount",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.amount > 500000
RETURN e.name, count(f) AS transactions_count
ORDER BY transactions_count DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(originator:Entity)-[:COUNTRY]->(originatorCountry:Country {name: 'Singapore'}),
      (f)-[:CONCERNS]->(concerned:Entity)-[:COUNTRY]->(concernedCountry:Country {name: 'United Kingdom'})
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Complex Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing {originator_bank: 'CIMB Bank Berhad'})
RETURN f
ORDER BY f.begin DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE f.amount > 500000
RETURN e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Complex Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(b:Entity)
WITH b, count(DISTINCT f.originator_bank) AS distinctOriginators
ORDER BY distinctOriginators DESC
LIMIT 3
RETURN b.name AS BeneficiaryBankName, distinctOriginators",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, filingsCount
ORDER BY filingsCount DESC",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'Singapore'
RETURN f
ORDER BY f.begin DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS TotalFilings
ORDER BY TotalFilings DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)<-[:BENEFITS]-(f:Filing)
RETURN e, count(f) AS benefitsCount
ORDER BY benefitsCount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c.name AS country, SUM(f.amount) AS total_amount
ORDER BY total_amount ASC
RETURN country, total_amount
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin.year = 2017
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.beneficiary_bank_country = 'Germany'
RETURN c.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = f.beneficiary_bank_country AND f.originator_bank_country <> 'United Kingdom'
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS|:ORIGINATOR|:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.amount >= 100000 AND f.amount <= 1000000
RETURN c.name AS Country, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.amount > 500000
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)<-[:CONCERNS]-(f:Filing)
RETURN e, count(f) AS concerns_count
ORDER BY concerns_count DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WITH f, count(DISTINCT e.beneficiary_bank) AS distinct_banks
ORDER BY distinct_banks DESC
LIMIT 5
RETURN f, distinct_banks",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.originator_bank_country = 'United States'
RETURN c.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WITH e.name AS originator_bank, AVG(f.amount) AS avg_amount
ORDER BY avg_amount DESC
LIMIT 5
RETURN originator_bank, avg_amount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WITH e.name AS bank_name, SUM(f.amount) AS total_amount
ORDER BY total_amount ASC
LIMIT 3
RETURN bank_name, total_amount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'China'})
WITH c, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN c.name AS CountryName, filingsCount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.amount > 2000000
RETURN c.name AS Country, count(DISTINCT e) AS BeneficiaryBanksCount
ORDER BY BeneficiaryBanksCount DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Japan'})
WHERE f.amount IS NOT NULL
RETURN f
ORDER BY f.amount ASC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.originator_bank_country = 'Singapore'
RETURN e.name AS Beneficiary",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country <> f.originator_bank_country AND f.amount > 1000000
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5
RETURN e.name AS Originator_Bank, filings_count",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
WHERE filingsCount > 3
RETURN e",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom'
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country IS NOT NULL AND f.beneficiary_bank_country IS NOT NULL
  AND f.originator_bank_country <> f.beneficiary_bank_country
RETURN f
ORDER BY f.number DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin_date_format >= '2015-01-01T00:00:00Z' AND f.end_date_format <= '2015-12-31T23:59:59Z'
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(oc:Country),
      (f)-[:BENEFITS]->(b:Entity)-[:COUNTRY]->(bc:Country)
WHERE oc.code <> bc.code
WITH bc, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN bc.name AS Country, filingsCount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e.name, filingsCount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
RETURN e.name AS OriginatorBankName, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN e.name AS BeneficiaryBank, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.number DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, sum(f.amount) AS TotalAmountReceived
ORDER BY TotalAmountReceived DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)<-[:CONCERNS]-(f:Filing)
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.begin.year = 2016
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,False
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH c.name AS country, AVG(f.amount) AS avg_amount
RETURN country, avg_amount
ORDER BY avg_amount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
RETURN e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS Filings
ORDER BY Filings DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:CONCERNS]->(f:Filing)
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS|:BENEFITS|:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.amount > 1000000
RETURN c.name AS Country, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration ASC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(originator:Entity)
WITH originator, count(DISTINCT f.beneficiary_bank) AS distinct_beneficiaries
ORDER BY distinct_beneficiaries DESC
LIMIT 3
RETURN originator.name AS OriginatorBankName, distinct_beneficiaries",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filings
ORDER BY filings DESC
LIMIT 5
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, filings AS NumberOfFilings",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
RETURN e.name AS OriginatorBank, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(oc:Country),
      (f)-[:BENEFITS]->(b:Entity)-[:COUNTRY]->(bc:Country)
WHERE oc.code = bc.code
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, sum(f.amount) AS TotalAmountSent
ORDER BY TotalAmountSent DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
RETURN e, count(c) AS connections
ORDER BY connections DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing {beneficiary_bank: 'Barclays Bank Plc'})-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c, count(e) AS entityCount
ORDER BY entityCount DESC
LIMIT 3
RETURN c.name AS Country, entityCount",Complex Aggregation Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:ORIGINATOR]-(f:Filing)
RETURN c.name AS Country, count(f) AS NumberOfOriginatingFilings
ORDER BY NumberOfOriginatingFilings DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Singapore'})
MATCH (f)-[:BENEFITS]->(beneficiary:Entity)
RETURN beneficiary.name AS BeneficiaryName",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
RETURN e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.amount > 2000000
RETURN e",Pathfinding Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.originator_iso = 'SGP'
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e, filingsCount",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Singapore'})
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.amount > 1500000
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f
ORDER BY duration.between(f.begin, f.end) ASC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.amount > 2000000
RETURN e.name AS Beneficiary",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'Singapore' AND f.beneficiary_bank_country = 'Singapore'
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom'
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE c.name = 'China'
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity {name: 'Bank of Baku'})
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WHERE f.originator_bank_country = 'Angola'
RETURN e",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.number ASC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(e) AS BeneficiaryBankCount
ORDER BY BeneficiaryBankCount DESC",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.end DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.begin_date_format STARTS WITH '2014'
RETURN DISTINCT e.name",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'Singapore'
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(e) AS NumberOfEntities
ORDER BY NumberOfEntities DESC
LIMIT 5",Complex Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.begin >= datetime('2010-01-01T00:00:00Z') AND f.end <= datetime('2015-12-31T23:59:59Z')
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'China'})
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Complex Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.beneficiary_bank = 'Barclays Bank Plc' AND f.amount > 1000000
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'Angola'
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WHERE f.amount > 1000000
RETURN DISTINCT e.name",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'})
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'Singapore'
RETURN f
ORDER BY f.end DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)<-[:BENEFITS]-(f:Filing)
WITH e, sum(f.amount) AS totalAmount
ORDER BY totalAmount DESC
LIMIT 3
RETURN e.name AS EntityName, totalAmount",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(e) AS NumberOfEntities
ORDER BY NumberOfEntities DESC
LIMIT 1",Pathfinding Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.amount >= 500000 AND f.amount <= 1000000
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, collect(DISTINCT f.originator_bank_country) AS countries
WHERE size(countries) > 2
RETURN e",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom'
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.begin
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'Angola'
RETURN DISTINCT e",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = f.beneficiary_bank_country AND f.originator_bank_country IS NOT NULL
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.amount ASC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)<-[:BENEFITS]-(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
RETURN e, filingsCount",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS|:ORIGINATOR|:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {code: 'CHN'})
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing {amount: 1000000})
RETURN f
ORDER BY f.begin DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.begin_date_format STARTS WITH '2015-03'
RETURN e",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.number DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'Singapore'
RETURN e.name",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.end >= datetime('2015-10-01T00:00:00Z')
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.originator_bank_country = 'Angola'
RETURN e.name AS Beneficiary",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_id IS NOT NULL AND f.beneficiary_bank_id IS NOT NULL AND f.originator_bank_id <> f.beneficiary_bank_id
RETURN f",Pathfinding Queries,fincen,False,False,False
"MATCH (f:Filing)
RETURN f
ORDER BY f.number DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, count(e) AS NumberOfEntities
ORDER BY NumberOfEntities DESC",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = f.beneficiary_bank_country
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.originator_bank_country = 'United Arab Emirates'
RETURN e
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity {name: 'Deutsche Bank AG'})
RETURN f
ORDER BY f.number DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, sum(f.amount) AS totalAmount
ORDER BY totalAmount DESC
LIMIT 3
RETURN e.name AS EntityName, totalAmount",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
WHERE filingsCount > 5
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, count(DISTINCT e) AS EntitiesCount",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(originator:Entity)-[:COUNTRY]->(originCountry:Country),
      (f)-[:BENEFITS]->(beneficiary:Entity)-[:COUNTRY]->(beneficiaryCountry:Country)
WHERE originCountry.code <> beneficiaryCountry.code
WITH f, count(DISTINCT originCountry) + count(DISTINCT beneficiaryCountry) AS complexity
ORDER BY complexity DESC
LIMIT 3
RETURN f",Complex Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE f.beneficiary_bank_country = ""Germany""
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e, filingsCount",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: ""China""})
WHERE f.begin.year = 2001
RETURN f
ORDER BY f.number DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: ""United Kingdom""})
WHERE f.amount > 2000000
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing {originator_bank_country: ""Singapore""})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e, filingsCount",Complex Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE f.begin.year = 2002
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, filingsCount
ORDER BY filingsCount DESC",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.begin.year = 2003
RETURN e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.amount > 500000 AND f.begin.year = 2004
RETURN f.originator_bank_country AS OriginatorCountry, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin.year = 2005 AND f.end.year = 2005
RETURN f
ORDER BY duration.between(f.begin, f.end) ASC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(e) AS NumberOfEntities
ORDER BY NumberOfEntities DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.begin.year = 2006
RETURN e.name AS BeneficiaryBank, f.amount AS Amount
ORDER BY f.amount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.amount > 1000000 AND f.begin.year = 2008
WITH e
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name, count(e) AS num_entities
ORDER BY num_entities DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin >= datetime('2009-01-01T00:00:00Z') AND f.end <= datetime('2009-12-31T23:59:59Z')
RETURN f
ORDER BY duration.between(f.begin, f.end) DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.beneficiary_bank_country = ""United States""
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e.name, filingsCount",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin.year = 2010
RETURN f.originator_bank_country AS Country, count(f) AS Filings
ORDER BY Filings DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin.year = 2011
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.end >= datetime('2012-01-01T00:00:00Z') AND f.end <= datetime('2012-12-31T23:59:59Z')
RETURN e.name AS OriginatorBank, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_bank_country = ""United Kingdom""
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WHERE f.begin >= datetime('2013-01-01T00:00:00Z') AND f.end <= datetime('2013-12-31T23:59:59Z')
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e.name, filingsCount",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.begin.year = 2014
RETURN c.name AS Country, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.begin.year = 2016
RETURN e.name AS BeneficiaryBank, sum(f.amount) AS TotalAmountTransferred
ORDER BY TotalAmountTransferred DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE f.begin >= datetime('2007-01-01T00:00:00Z') AND f.begin <= datetime('2007-12-31T23:59:59Z')
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name, filingsCount",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'})
RETURN e.name",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.end >= datetime('2015-01-01T00:00:00Z') AND f.end <= datetime('2015-12-31T23:59:59Z')
RETURN count(f) AS filings_ended_in_2015",Simple Aggregation Queries,fincen,False,False,False
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
RETURN e.name AS OriginatorBank, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE f.begin >= datetime('2010-01-01T00:00:00Z') AND f.end <= datetime('2015-12-31T23:59:59Z')
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS OriginatorCountry, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN e.name AS BeneficiaryBank, sum(f.amount) AS TotalAmountReceived
ORDER BY TotalAmountReceived DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f
ORDER BY duration.between(f.begin, f.end)
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.amount > 1000000
RETURN e.name AS BeneficiaryBank, count(f) AS TransactionsCount
ORDER BY TransactionsCount DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c, count(f) AS filingsCount
ORDER BY filingsCount DESC
RETURN c.name AS CountryName, filingsCount
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.begin >= datetime('2014-01-01T00:00:00Z') AND f.begin <= datetime('2014-12-31T23:59:59Z')
WITH e, count(f) AS transactions
ORDER BY transactions DESC
LIMIT 3
RETURN e.name AS OriginatorBank, transactions",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WITH f, count(e) AS numEntities
ORDER BY numEntities DESC
LIMIT 5
RETURN f, numEntities",Simple Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.begin_date_format >= '2015-01-01T00:00:00Z' AND f.end_date_format <= '2015-12-31T23:59:59Z'
WITH e, count(f) AS transactions
ORDER BY transactions DESC
LIMIT 3
RETURN e, transactions",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
WHERE exists{(e)-[:ORIGINATOR]->(:Filing)}
WITH c, count(e) AS originator_count
ORDER BY originator_count DESC
LIMIT 5
RETURN c.name AS country_name, originator_count",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WITH e, count(f) AS benefitsCount
ORDER BY benefitsCount DESC
LIMIT 5
RETURN e, benefitsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(e) AS NumberOfBeneficiaries
ORDER BY NumberOfBeneficiaries DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
RETURN e.name AS OriginatorBank, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:CONCERNS]->(f:Filing)
RETURN e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3
RETURN e.name AS BankName, filings_count",Simple Retrieval Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:ORIGINATOR]->(f:Filing)
RETURN c.name AS Country, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.end >= datetime('2017-01-01T00:00:00Z') AND f.end <= datetime('2017-12-31T23:59:59Z')
RETURN avg(f.amount) AS average_amount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN count(DISTINCT c) AS num_countries",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
RETURN e
ORDER BY f.amount DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.end DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank = 'CIMB Bank Berhad'
RETURN e",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.amount > 1000000
RETURN e",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.begin_date_format >= '2015-01-01T00:00:00Z' AND f.end_date_format <= '2015-12-31T23:59:59Z'
RETURN e.name AS OriginatorBank, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.begin.year = 2017
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, filingsCount",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.begin >= datetime('2010-01-01T00:00:00Z') AND f.end <= datetime('2015-12-31T23:59:59Z')
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'Singapore' AND f.beneficiary_bank_country = 'United Kingdom'
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.end >= datetime('2014-01-01T00:00:00Z') AND f.end < datetime('2015-01-01T00:00:00Z')
RETURN e.name AS OriginatorBankName, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {name: 'Angola'}),
      (e)-[:FILED]->(f:Filing)-[:ORIGINATOR]->(origin:Entity)-[:COUNTRY]->(originCountry:Country)
RETURN DISTINCT originCountry.name
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.amount > 200000
RETURN e.name AS BeneficiaryBankName, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:CONCERNS]->(bank:Entity)
WHERE f.originator_bank_country = 'Singapore'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 100000
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN e.name AS BankName, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity {name: ""The Bank of New York Mellon Corp.""})-[:FILED]->(f:Filing)
RETURN DISTINCT f.originator_bank_country
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
RETURN e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.begin
LIMIT 5",Simple Retrieval Queries,fincen,False,False,False
"MATCH (c:Country {tld: 'AO'})
RETURN c
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE f.amount > 1000000
RETURN e.name AS EntityName, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing {originator_bank: 'CIMB Bank Berhad'})
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN e.name AS EntityName
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, filingsCount
ORDER BY filingsCount DESC",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'Singapore' AND f.amount > 500000
RETURN f
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE f.originator_bank_country = 'Singapore'
RETURN e",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'})
RETURN e.name AS BeneficiaryBank
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.begin >= datetime('2015-01-01T00:00:00Z') AND f.end <= datetime('2015-12-31T23:59:59Z')
RETURN DISTINCT e.name",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {code: 'SGP'})
RETURN e",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity {name: ""The Bank of New York Mellon Corp.""})-[:FILED]->(f:Filing)
RETURN f
ORDER BY f.begin
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing)
WITH c.name AS countryName, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN countryName, filingsCount",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WHERE f.amount > 500000
RETURN e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:CONCERNS]->(f:Filing)
WITH e, count(f) AS concernsCount
ORDER BY concernsCount DESC
LIMIT 3
RETURN e, concernsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
WHERE filingsCount > 10
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN DISTINCT c
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE c.name = 'Singapore' AND f.amount < 300000
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing {beneficiary_bank_country: 'United Kingdom'})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'Singapore' AND f.amount > 200000
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'Singapore'
RETURN e.name
ORDER BY e.name
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 1000000
RETURN e
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount < 500000
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_bank_country = 'Singapore'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e.name AS EntityName, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank = 'CIMB Bank Berhad' AND f.amount > 500000
RETURN e
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'United Kingdom' AND f.amount > 200000
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'Angola'
RETURN e.name AS EntityName
ORDER BY e.name
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing {beneficiary_bank: 'Barclays Bank Plc'})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.amount > 1000000
RETURN c
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing {originator_bank: 'CIMB Bank Berhad'})
RETURN f.id AS FilingID, f.amount AS Amount
ORDER BY f.amount DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount < 500000
RETURN e
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'Singapore' AND f.amount > 200000
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.begin_date_format STARTS WITH '2015'
RETURN e.name AS OriginatorBankName, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WHERE f.amount > 1000000
RETURN e
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.beneficiary_iso = 'GBR'
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.originator_bank_country = 'Singapore'
RETURN e.name AS EntityName, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 500000
RETURN e
LIMIT 3",Simple Retrieval Queries,fincen,True,False,False
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'Angola' AND f.beneficiary_bank_country = 'Singapore'
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_iso = 'SGP'
RETURN e.name AS EntityName
ORDER BY count(f) DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount ASC
LIMIT 5
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, filingsCount
ORDER BY filingsCount ASC",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.originator_bank = 'The Bank of New York Mellon Corp.'
RETURN e
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.beneficiary_bank = 'Barclays Bank Plc'
RETURN e.name
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN e.name AS Beneficiary, sum(f.amount) AS TotalAmountReceived
ORDER BY TotalAmountReceived DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WITH f, count{(f)-[:CONCERNS]->(:Entity)} AS concernsCount
ORDER BY concernsCount DESC
LIMIT 3
RETURN f",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin >= datetime('2015-01-01T00:00:00Z') AND f.end <= datetime('2017-12-31T23:59:59Z')
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c.name AS countryName, count(DISTINCT f.originator_bank) AS numberOfBanks
ORDER BY numberOfBanks DESC
LIMIT 3
RETURN countryName, numberOfBanks",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WITH f, count(DISTINCT e) AS entitiesCount
ORDER BY entitiesCount DESC
LIMIT 5
RETURN f, entitiesCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE exists{(f)-[:CONCERNS]->(:Entity {sector: 'technology'})}
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:CONCERNS|:BENEFITS|:ORIGINATOR]-(f:Filing)
WHERE f.amount < 1000000
RETURN c.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Simple Retrieval Queries,fincen,True,False,False
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, c, count(e) AS entitiesCount
ORDER BY entitiesCount DESC
RETURN f.id AS FilingID, f.begin_date AS BeginDate, f.end_date AS EndDate, c.name AS Country, entitiesCount
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country IS NOT NULL AND f.beneficiary_bank_country IS NOT NULL
  AND f.originator_bank_country <> f.beneficiary_bank_country
WITH f.originator_bank_country AS originCountry, f.beneficiary_bank_country AS beneficiaryCountry
MATCH (c:Country)
WHERE c.code IN [originCountry, beneficiaryCountry]
WITH c, count(f) AS filingsCount
RETURN c.name AS CountryName, filingsCount
ORDER BY filingsCount DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WITH f, count(DISTINCT e) AS numEntities
ORDER BY numEntities DESC
LIMIT 3
RETURN f, numEntities",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country),
      (f)-[:BENEFICIARY]->(e)
WHERE f.originator_iso IS NOT NULL AND f.beneficiary_iso IS NOT NULL
  AND f.originator_iso <> f.beneficiary_iso
WITH c, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5
RETURN c.name AS Country, filings_count",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:FILED]->(f2:Filing)
WITH f, count(e) AS entitiesCount
ORDER BY entitiesCount DESC
LIMIT 3
RETURN f, entitiesCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.end IS NOT NULL AND f.begin IS NOT NULL
WITH f, duration.between(f.begin, f.end) AS dur
ORDER BY dur DESC
LIMIT 5
WITH f
MATCH (f)-[:CONCERNS|:BENEFITS|:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, count(DISTINCT c) AS countryCount
WHERE countryCount > 3
RETURN f",Simple Retrieval Queries,fincen,True,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.amount > 2000000
RETURN e.name AS BeneficiaryBank, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing)
WITH c, count(DISTINCT e) AS sectorCount
WHERE sectorCount > 2
RETURN c.name AS Country, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WITH f, count(DISTINCT e.beneficiary_bank) AS num_beneficiary_banks
ORDER BY num_beneficiary_banks DESC
LIMIT 3
RETURN f, num_beneficiary_banks",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, c, count(e) AS entitiesCount
ORDER BY entitiesCount DESC
RETURN f, c.name AS Country, entitiesCount
LIMIT 5",Simple Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:CONCERNS]->(f:Filing)
WHERE e.country = 'CHN' AND f.filer_org_name CONTAINS 'Financial'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:ORIGINATOR]->(f:Filing)
RETURN c.name AS Country, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, count(DISTINCT c) AS num_countries
ORDER BY num_countries DESC
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WITH f, count(DISTINCT e) AS entities_count
ORDER BY entities_count DESC
LIMIT 5
RETURN f, entities_count",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, c, count(e) AS numEntities
ORDER BY numEntities DESC
RETURN f, c.name AS countryName, numEntities
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE date(f.begin).month <= 6
WITH c, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN c.name AS Country, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE c.name IN ['Albania', 'Andorra', 'Armenia', 'Austria', 'Azerbaijan', 'Belarus', 'Belgium', 'Bosnia and Herzegovina', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Georgia', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Kazakhstan', 'Kosovo', 'Latvia', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Malta', 'Moldova', 'Monaco', 'Montenegro', 'Netherlands', 'North Macedonia', 'Norway', 'Poland', 'Portugal', 'Romania', 'Russia', 'San Marino', 'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'Turkey', 'Ukraine', 'United Kingdom', 'Vatican City']
WITH e, COUNT(f) AS filings
RETURN e.name AS bank, filings
ORDER BY filings DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:CONCERNS|:BENEFITS|:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.amount < 500000
WITH c, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN c.name AS CountryName, filingsCount",Simple Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {name: 'Australia'})
WHERE exists{(e)-[:ORIGINATOR]->(:Filing)}
RETURN e.name AS OriginatorBank
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:BENEFITS]->(f:Filing)
WHERE e.sector = 'healthcare'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.originator_bank = 'CIMB Bank Berhad'
RETURN e.name AS BeneficiaryBank, sum(f.amount) AS TotalReceivedFunds
ORDER BY TotalReceivedFunds DESC
LIMIT 5",Complex Retrieval Queries,fincen,True,False,False
"MATCH (f:Filing)
WHERE f.end > datetime('2017-01-01T00:00:00Z')
RETURN f
ORDER BY f.end DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.end < datetime('2005-01-01T00:00:00Z')
RETURN e.name AS OriginatorBankName
ORDER BY COUNT(f) DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'Brazil' AND f.amount > 1000000
RETURN f
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)-[:CONCERNS]->(bank:Entity)
WHERE bank.country = 'Russia'
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Canada'})
WHERE f.end >= datetime('2016-01-01T00:00:00Z') AND f.end < datetime('2017-01-01T00:00:00Z')
RETURN f
ORDER BY f.end DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Switzerland'})
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'India'})
RETURN f
ORDER BY f.number ASC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_bank = 'HSBC'
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'USA'
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
WHERE filingsCount > 30
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name, count(DISTINCT e) AS entityCount
ORDER BY entityCount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.originator_bank = 'Barclays Bank Plc'
RETURN e.name AS BeneficiaryBank, sum(f.amount) AS TotalReceivedFunds
ORDER BY TotalReceivedFunds DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {name: 'Germany'})
WITH e
MATCH (e)<-[:BENEFITS]-(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name, filingsCount",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE f.amount > 100000000
RETURN e
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'France'})
RETURN f
ORDER BY f.amount ASC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS Filings
ORDER BY Filings DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(b:Entity)
WHERE f.originator_bank_country = 'China'
RETURN b.name AS BeneficiaryBank, sum(f.amount) AS TotalReceivedFunds
ORDER BY TotalReceivedFunds DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE c.name = 'Japan'
RETURN f
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, count(e) AS NumberOfEntities
ORDER BY NumberOfEntities DESC",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity {name: ""The Bank of New York Mellon Corp.""})-[:FILED]->(f:Filing)
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(b:Entity)
WHERE f.originator_bank_country = 'United Kingdom'
RETURN b.name AS BeneficiaryBank, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Singapore'})
RETURN e.name AS OriginatorBankName
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:CONCERNS]->(f:Filing)
WITH e, count(f) AS filingsCount
WHERE filingsCount > 20
RETURN e.name
ORDER BY filingsCount DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, sum(f.amount) AS TotalAmountTransferred
ORDER BY TotalAmountTransferred DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 5",Complex Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR|:BENEFITS|:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.amount > 10000000
RETURN c.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,False
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing)-[:ORIGINATOR|BENEFITS]->(e2:Entity)-[:COUNTRY]->(c2:Country)
WHERE c.code <> c2.code
WITH c, count(DISTINCT f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN c.name AS Country, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:BENEFITS]->(beneficiary:Entity)
WHERE exists{ (e)-[:COUNTRY]->(:Country {name: 'Financial Sector'}) }
WITH beneficiary, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN beneficiary.name, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE duration.between(f.begin, f.end) = duration('P1M')
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WITH f, count(DISTINCT f.originator_iso) AS distinctOriginatorIsos
ORDER BY distinctOriginatorIsos DESC
LIMIT 5
RETURN f",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.begin.year = 2012
RETURN c.name AS Country, count(f) AS Filings
ORDER BY Filings DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f1:Filing)-[:BENEFITS]->(e1:Entity), (f2:Filing)-[:BENEFITS]->(e2:Entity)
WHERE f1.sar_id = f2.sar_id AND f1.beneficiary_bank_id <> f2.beneficiary_bank_id
RETURN f1, f2
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS|:ORIGINATOR|:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.amount > 500000
RETURN c.name AS Country, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, collect(DISTINCT c.location.continent) AS continents
WHERE size(continents) >= 3
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:ORIGINATOR|BENEFITS]->(f:Filing)
WITH c, count(f) AS filingsCount
RETURN c.name AS Country, filingsCount
ORDER BY filingsCount DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE c.name IN ['Europe', 'Asia']
WITH f, collect(c.name) AS regions
WHERE ALL(region IN ['Europe', 'Asia'] WHERE region IN regions)
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WITH f, count(DISTINCT e) AS distinctBanks
ORDER BY distinctBanks DESC
LIMIT 5
RETURN f, distinctBanks",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE c.name IN ['China', 'India', 'Indonesia', 'Pakistan', 'Bangladesh', 'Japan', 'Philippines', 'Vietnam', 'Turkey', 'Iran', 'Thailand', 'Myanmar', 'South Korea', 'Iraq', 'Afghanistan', 'Saudi Arabia', 'Uzbekistan', 'Malaysia', 'Yemen', 'Nepal', 'North Korea', 'Sri Lanka', 'Kazakhstan', 'Syria', 'Cambodia', 'Jordan', 'Azerbaijan', 'United Arab Emirates', 'Tajikistan', 'Israel', 'Laos', 'Lebanon', 'Kyrgyzstan', 'Turkmenistan', 'Singapore', 'Oman', 'State of Palestine', 'Kuwait', 'Georgia', 'Mongolia', 'Armenia', 'Qatar', 'Bahrain', 'Timor-Leste', 'Cyprus', 'Bhutan', 'Maldives', 'Brunei']
WITH e, count(f) AS transactions
ORDER BY transactions DESC
LIMIT 3
RETURN e.name AS EntityName, transactions",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS transactions
ORDER BY transactions DESC
LIMIT 5
RETURN e, transactions",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c, count(e) AS num_beneficiary_banks
ORDER BY num_beneficiary_banks DESC
RETURN c.name AS country_name, num_beneficiary_banks
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, count(DISTINCT c) AS numCountries
WHERE numCountries > 1
RETURN f
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.amount ASC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, sum(f.amount) AS TotalAmountReceived
ORDER BY TotalAmountReceived DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:ORIGINATOR]-(f:Filing)
WITH c, count(DISTINCT e) AS numOriginatorBanks
ORDER BY numOriginatorBanks DESC
RETURN c.name AS CountryName, numOriginatorBanks
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)<-[:CONCERNS]-(f:Filing)-[:ORIGINATOR]->(origin:Entity)-[:COUNTRY]->(c:Country {name: ""Germany""})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e.name, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = ""United Kingdom""
RETURN e.name AS OriginatorBank, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom'
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.begin.year = 2013
RETURN c.name AS Country, count(f) AS Filings
ORDER BY Filings DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE e.sector = 'technology'
WITH e, count(f) AS filings
ORDER BY filings DESC
LIMIT 3
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, filings",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, count(DISTINCT c) AS distinctCountries
ORDER BY distinctCountries DESC
LIMIT 3
RETURN f",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WITH f, count(e) AS originator_count
ORDER BY originator_count DESC
LIMIT 5
RETURN f, originator_count",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WITH f, count(e) AS concerns_count
ORDER BY concerns_count DESC
LIMIT 5
RETURN f, concerns_count",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, count(DISTINCT c) AS countries
WHERE countries > 3
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WITH f, count(DISTINCT e.country) AS distinctBeneficiaryIsoCount
ORDER BY distinctBeneficiaryIsoCount DESC
LIMIT 5
RETURN f, distinctBeneficiaryIsoCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.originator_iso IS NOT NULL AND f.beneficiary_iso IS NOT NULL AND f.originator_iso <> f.beneficiary_iso
RETURN e.name AS BeneficiaryBank, count(f) AS Transactions
ORDER BY Transactions DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WITH f, count(e) AS entitiesCount
ORDER BY entitiesCount DESC
LIMIT 5
RETURN f, entitiesCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.amount < 50000
RETURN e.name AS OriginatorBank, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.begin.month >= 10 AND f.begin.month <= 12
WITH c, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN c.name AS Country, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WITH f, count(DISTINCT e) AS entitiesCount
ORDER BY entitiesCount DESC
LIMIT 3
RETURN f, entitiesCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR|:BENEFITS]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e.name AS EntityName, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS|:ORIGINATOR|:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, duration.between(f.begin, f.end) AS dur, collect(DISTINCT c.name) AS countries
WHERE size(countries) > 2
RETURN f.id, f.begin, f.end, dur, countries
ORDER BY dur DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e1:Entity), (f)-[:BENEFITS]->(e2:Entity)
WHERE e1.id = e2.id
WITH e1, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5
MATCH (e1)-[:COUNTRY]->(c:Country)
RETURN c.name AS country, filings_count",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)
WITH f, count{(f)-[:CONCERNS]->(:Entity)} AS concernsCount
ORDER BY concernsCount DESC
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, c, count(e) AS numEntities
ORDER BY numEntities DESC
LIMIT 5
RETURN f, c.name AS Country, numEntities",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.originator_iso IS NOT NULL AND f.beneficiary_iso IS NOT NULL AND f.originator_iso <> f.beneficiary_iso
WITH c, COUNT(f) AS filingsCount
ORDER BY filingsCount DESC
RETURN c.name AS CountryName, filingsCount
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, count(DISTINCT c) AS distinctCountries
ORDER BY distinctCountries DESC
LIMIT 3
RETURN f",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE exists {
    MATCH (f)-[:ORIGINATOR]->(origin:Entity)-[:COUNTRY]->(originCountry:Country),
          (f)-[:BENEFITS]->(benefit:Entity)-[:COUNTRY]->(benefitCountry:Country)
    WHERE originCountry.code <> benefitCountry.code
}
RETURN e, count(f) AS transactions
ORDER BY transactions DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.amount > 1000000
RETURN e.name AS OriginatorBank, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:BENEFITS]-(f:Filing)
WITH c, count(f) AS filingsCount
ORDER BY filingsCount ASC
LIMIT 5
RETURN c.name AS Country, filingsCount",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, c, count(e) AS numEntities
ORDER BY numEntities DESC
RETURN f, c.name AS country, numEntities
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing)
WHERE f.amount < 100000
RETURN c.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH f, c, count(e) AS numEntities
ORDER BY numEntities DESC
RETURN f.id AS FilingID, c.name AS Country, numEntities
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS|:ORIGINATOR|:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.amount > 2000000
RETURN c.name AS Country, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 5",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity), (f)-[:BENEFITS]->(e)
RETURN f
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity), (f)-[:BENEFITS]->(e)
RETURN f, e
LIMIT 3",Simple Retrieval Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Complex Retrieval Queries,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.amount > 500000
RETURN e",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, count(DISTINCT e) AS NumberOfOriginatingBanks
ORDER BY NumberOfOriginatingBanks DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,False
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.code AS CountryCode, count(e) AS OriginatorCount
ORDER BY OriginatorCount DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f
ORDER BY duration.between(f.begin, f.end)
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e.name AS EntityName, filingsCount",Complex Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.end >= datetime('2016-01-01T00:00:00Z') AND f.end <= datetime('2016-12-31T23:59:59Z')
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name, filingsCount",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom'
RETURN f
ORDER BY f.number DESC
LIMIT 5",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.amount > 500000
RETURN e.name AS EntityName, e.location AS Location
ORDER BY f.amount DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing {originator_bank_country: 'Singapore'})-[:ORIGINATOR]->(e:Entity)
RETURN e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, f.amount AS Amount
ORDER BY f.amount DESC
LIMIT 5",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.origin_lat IS NOT NULL AND f.beneficiary_lat IS NOT NULL
RETURN f, abs(toFloat(f.origin_lat) - toFloat(f.beneficiary_lat)) AS lat_difference
ORDER BY lat_difference DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name AS EntityName, filingsCount",Complex Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {name: 'China'})
MATCH (f:Filing)-[:CONCERNS|:BENEFITS|:ORIGINATOR]->(e)
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'China'})
WITH f
ORDER BY f.end DESC
LIMIT 3
RETURN f",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country IS NOT NULL
RETURN f.beneficiary_bank_country AS Country, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 5",Complex Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE f.amount > 2000000
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(e) AS NumberOfEntities
ORDER BY NumberOfEntities DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
RETURN e.name AS FilerOrganization, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name, count(e) AS num_originator_banks
ORDER BY num_originator_banks DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {code: ""GBR""})
RETURN f.id AS FilingID, f.amount AS Amount
ORDER BY f.amount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WITH f, count(e) AS numBeneficiaries
ORDER BY numBeneficiaries DESC
LIMIT 5
RETURN f, numBeneficiaries",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin >= datetime('2015-01-01T00:00:00Z') AND f.end <= datetime('2015-12-31T23:59:59Z')
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Complex Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity {name: 'The Bank of New York Mellon Corp.'})
MATCH (f:Filing)-[:ORIGINATOR]->(e)
MATCH (f)-[:BENEFITS]->(e)
RETURN count(f) AS NumberOfFilings",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.originator_bank = 'CIMB Bank Berhad'
RETURN e
LIMIT 3",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN DISTINCT c.name
LIMIT 5",Complex Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.originator_bank_country = 'Singapore'
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,False
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {code: 'AFG'})
RETURN e",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing {originator_iso: 'SGP'})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e.name AS EntityName, filingsCount",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE e.country = 'CHN'
RETURN f.amount AS Amount
ORDER BY f.amount DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'})
WHERE f.amount > 500000
RETURN f, e, c
ORDER BY f.amount DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing {originator_iso: 'SGP'})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e, filingsCount",Pathfinding Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.beneficiary_iso = 'GBR'
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 1000000
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:COUNTRY]->(c:Country {tld: '.AF'})
RETURN e
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:CONCERNS]->(beneficiary:Entity)-[:COUNTRY]->(c:Country {name: ""Afghanistan""})
RETURN e
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank = 'Barclays Bank Plc'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name, filingsCount",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'Singapore'
RETURN e, sum(f.amount) as total_amount
ORDER BY total_amount DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom'
RETURN e.name AS EntityName, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin_date_format STARTS WITH '2015'
RETURN f
ORDER BY f.number DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.end_date_format ENDS WITH '2015'
WITH e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3
RETURN e.name, filings_count",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
WHERE filingsCount > 10
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.beneficiary_bank_country = 'GBR'
RETURN c.name AS Country, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.originator_bank_country = 'Singapore'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e, filingsCount",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'Singapore'})
WHERE f.end_date_format CONTAINS '2015'
RETURN f
LIMIT 5",Complex Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.amount > 1000000
RETURN e.name
LIMIT 3",Complex Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing {beneficiary_bank: 'Barclays Bank Plc'})
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WITH f, count{(f)-[:ORIGINATOR]->(:Entity)} AS originatorCount
ORDER BY originatorCount DESC
LIMIT 3
RETURN f",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
RETURN e.name AS OriginatorBank, count(f) AS TotalFilings
ORDER BY TotalFilings DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (e:Entity {name: 'The Bank of New York Mellon Corp.'})-[:FILED]->(f:Filing)
RETURN f
ORDER BY f.begin
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_lng < ""0""
RETURN f
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount, sum(f.amount) AS totalAmount
ORDER BY filingsCount ASC, totalAmount DESC
RETURN e.name, filingsCount, totalAmount
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS|:BENEFITS|:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE f.end IS NOT NULL
RETURN c.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Verbose query,fincen,True,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WITH f, count(e) AS numEntities
ORDER BY numEntities DESC
LIMIT 5
RETURN f, numEntities",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f
ORDER BY duration.between(f.begin, f.end) ASC
LIMIT 3",Verbose query,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.originator_bank_country IS NOT NULL AND f.beneficiary_bank_country IS NOT NULL
  AND f.originator_bank_country <> f.beneficiary_bank_country
WITH f.originator_bank_country AS originCountry, f.beneficiary_bank_country AS beneficiaryCountry
MATCH (c:Country)
WHERE c.code IN [originCountry, beneficiaryCountry]
WITH c, count(f) AS filingsCount
RETURN c.name AS CountryName, filingsCount
ORDER BY filingsCount DESC
LIMIT 3",Verbose query,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WITH f, count(e) AS numEntities
ORDER BY numEntities DESC
LIMIT 5
RETURN f, numEntities",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:CONCERNS]->(e2:Entity)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, filingsCount",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {tld: '.de'})
MATCH (e)-[:FILED]->(f:Filing)
RETURN f
ORDER BY f.begin
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.begin >= datetime('2017-01-01T00:00:00Z') AND f.begin < datetime('2018-01-01T00:00:00Z')
WITH e, count(f) AS filingsCount
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name, sum(filingsCount) AS totalFilings
ORDER BY totalFilings DESC
LIMIT 5",Verbose query,fincen,False,False,False
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
WITH e, c
MATCH (e)-[:FILED]->(f:Filing)-[:CONCERNS]->(concerned:Entity)-[:COUNTRY]->(c)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 5
RETURN e.name AS EntityName, filingsCount",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.end DESC
LIMIT 3",Verbose query,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:CONCERNS]->(beneficiary:Entity)
WHERE e.country = 'Singapore' AND beneficiary.country = 'Malaysia'
RETURN e
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {name: 'Germany'})
MATCH (e)-[:FILED]->(f:Filing)
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:ORIGINATOR]->(originator:Entity)
WHERE e.country IS NOT NULL AND originator.country IS NOT NULL AND e.country <> originator.country
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.beneficiary_bank_country = f.originator_bank_country
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e",Verbose query,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.origin_lat = f.beneficiary_lat
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Verbose query,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.originator_bank_country = f.beneficiary_bank_country AND f.originator_bank_country IS NOT NULL
WITH f.originator_bank_country AS country_code, COUNT(f) AS filings_count
RETURN country_code, filings_count
ORDER BY filings_count DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(b:Entity)-[:COUNTRY]->(bc:Country),
      (f)-[:FILED]->(filer:Entity)-[:COUNTRY]->(fc:Country)
WHERE bc.name <> fc.name
WITH bc, count(f) AS filingsCount
ORDER BY filingsCount DESC
RETURN bc.name AS Country, filingsCount
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (o:Entity)-[:ORIGINATOR]->(f:Filing)-[:BENEFITS]->(b:Entity)
WHERE o.id = b.id
WITH o, count(f) AS filingsCount
MATCH (o)-[:COUNTRY]->(c:Country)
RETURN c.name AS countryName, filingsCount
ORDER BY filingsCount DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c, count(e) AS numEntities
ORDER BY numEntities DESC
LIMIT 3
RETURN c.name AS Country, numEntities",Verbose query,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing)
WITH c, sum(f.amount) AS totalAmount
WHERE totalAmount > 1000000
RETURN c.name AS CountryName, totalAmount
ORDER BY totalAmount DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.beneficiary_bank = f.filer_org_name
RETURN f
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity)-[:COUNTRY]->(c:Country),
      (f)-[:BENEFITS]->(b:Entity)-[:COUNTRY]->(c)
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e, filingsCount",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin >= datetime('2010-01-01T00:00:00Z') AND f.end <= datetime('2015-12-31T23:59:59Z')
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(:Entity)<-[:BENEFITS]-(f:Filing)
WHERE f.beneficiary_lat > '50'
RETURN c
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.end >= datetime('2015-01-01T00:00:00Z') AND f.end <= datetime('2015-12-31T23:59:59Z')
RETURN f
ORDER BY f.end DESC
LIMIT 5",Verbose query,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:BENEFITS]->(beneficiary:Entity)-[:COUNTRY]->(c:Country {name: ""Germany""})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name AS EntityName, filingsCount",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country {name: ""Singapore""})
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
WHERE c.tld = '.uk'
RETURN e
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.begin
LIMIT 5",Verbose query,fincen,False,False,False
"MATCH (f:Filing)-[r:ORIGINATOR|BENEFITS]->(e:Entity)
WITH f, count(e) AS entityCount
ORDER BY entityCount DESC
LIMIT 3
RETURN f",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS FilingsCount
ORDER BY FilingsCount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {name: ""China""})
MATCH (e)-[:FILED]->(f:Filing)
RETURN f
ORDER BY f.begin
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count{(f)-[:CONCERNS]->(:Entity)} AS concernsCount
ORDER BY concernsCount DESC
LIMIT 3
RETURN e",Verbose query,fincen,False,False,False
"MATCH (f:Filing)
OPTIONAL MATCH (f)-[:ORIGINATOR]->(originator:Entity)-[:COUNTRY]->(originatorCountry:Country)
OPTIONAL MATCH (f)-[:BENEFITS]->(beneficiary:Entity)-[:COUNTRY]->(beneficiaryCountry:Country)
WITH f, collect(DISTINCT originatorCountry) + collect(DISTINCT beneficiaryCountry) AS countries
WITH f, size(apoc.coll.toSet(countries)) AS numCountries
ORDER BY numCountries DESC
LIMIT 5
RETURN f, numCountries",Verbose query,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c, count(f) AS filingsCount
ORDER BY filingsCount ASC
LIMIT 3
RETURN c.name AS CountryName, filingsCount",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:FILED]->(e:Entity)
WHERE f.begin_date_format >= '2015-01-01T00:00:00Z' AND f.end_date_format <= '2015-12-31T23:59:59Z'
RETURN f
ORDER BY f.amount ASC
LIMIT 3",Verbose query,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)-[:CONCERNS]->(beneficiary:Entity)
WHERE e.country = 'United Kingdom' AND beneficiary.country = 'United States'
RETURN e
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE c.location.latitude > 40
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)-[:BENEFITS]->(e)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name, filingsCount",Verbose query,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
WHERE filingsCount > 10
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName, count(DISTINCT e) AS EntitiesCount
ORDER BY EntitiesCount DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c.name AS CountryName, SUM(f.amount) AS TotalAmount
RETURN CountryName, TotalAmount
ORDER BY TotalAmount DESC
LIMIT 5",Verbose query,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e1:Entity {id: 'the-bank-of-new-york-mellon-corp'}),
      (f)-[:BENEFITS]->(e2:Entity {id: 'the-bank-of-new-york-mellon-corp'})
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country IS NOT NULL
RETURN f.beneficiary_bank_country AS Country, count(f) AS Count
ORDER BY Count DESC
LIMIT 3",Verbose query,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'United Kingdom'
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.end_date = 'Sep 25, 2015'
RETURN f",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'Singapore' AND f.amount > 1000000
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WHERE exists {
  MATCH (e)-[:BENEFITS]->(f)
}
RETURN DISTINCT e",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 1
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, filingsCount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WITH f, count(e) AS concernedEntities
ORDER BY concernedEntities DESC
LIMIT 5
RETURN f, concernedEntities",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'})
RETURN count(e) AS NumberOfEntities",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_iso = 'GBR' AND f.amount > 250000
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country {name: 'China'})
MATCH (e)-[:FILED]->(f:Filing)
RETURN sum(f.amount) AS TotalAmountFiled",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.begin
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing {beneficiary_bank: 'Barclays Bank Plc'})
RETURN f
ORDER BY f.end DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WITH MIN(f.amount) AS minAmount
MATCH (f2:Filing)
WHERE f2.amount = minAmount
RETURN f2",Simple Aggregation Queries,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(:Filing)
WITH DISTINCT e
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN count(DISTINCT c) AS num_countries",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
RETURN e.name, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.amount > 1000000
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 1
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, filingsCount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United States'
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.begin_date_format STARTS WITH '2015'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
RETURN e, filingsCount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom'
RETURN count(f) AS NumberOfFilings",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WITH f, count{(f)-[:ORIGINATOR]->(:Entity)} AS originatorCount
ORDER BY originatorCount DESC
RETURN f, originatorCount
LIMIT 1",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WHERE f.amount > 750000
RETURN e",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
WHERE filingsCount > 20
RETURN e",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
RETURN e, f.amount
ORDER BY f.amount DESC
LIMIT 1",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration DESC",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WHERE f.amount > 1500000
RETURN e",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_iso = 'GBR'
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.originator_bank = f.beneficiary_bank
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e, filingsCount",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity {name: 'The Bank of New York Mellon Corp.'})-[:FILED]->(f:Filing)
RETURN count(f) AS NumberOfFilings",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(:Entity)-[:FILED]->(f:Filing)
WITH c, count(f) AS filingsCount
ORDER BY filingsCount ASC
LIMIT 3
RETURN c.name AS CountryName, filingsCount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.originator_bank_country = 'United Kingdom'
WITH e, count(f) AS filingsCount
RETURN e
ORDER BY filingsCount DESC
LIMIT 1",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin_date_format STARTS WITH '2015' AND f.end_date_format STARTS WITH '2015'
AND substring(f.begin_date_format, 5, 2) = substring(f.end_date_format, 5, 2)
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(e) AS NumberOfEntities",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing {originator_iso: 'SGP'})
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing)
WITH c.name AS country, AVG(f.amount) AS avg_amount
RETURN country, avg_amount
ORDER BY avg_amount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
WHERE filingsCount > 10
RETURN e",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity {name: 'Barclays Bank Plc'})
RETURN f.id AS FilingID, f.amount AS Amount
ORDER BY f.amount DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = f.beneficiary_bank_country AND f.originator_bank_country IS NOT NULL
RETURN f",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WITH f, count(e) AS entitiesConcerned
ORDER BY entitiesConcerned DESC
LIMIT 5
RETURN f, entitiesConcerned",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 200000
RETURN count(f) AS NumberOfFilings",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
RETURN e, count(f) AS filings_count
ORDER BY filings_count DESC",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank = 'CIMB Bank Berhad' AND f.amount > 500000
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.amount < 10000
RETURN count(DISTINCT e) AS NumberOfEntities",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN f.beneficiary_iso AS BeneficiaryISO, count(f) AS NumberOfFilings
ORDER BY NumberOfFilings DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN e, f.amount AS amount
ORDER BY amount DESC
LIMIT 1",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country {country: 'CHN'})
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f
ORDER BY duration.between(f.begin, f.end) ASC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e, count(f) AS filingsCount
RETURN avg(filingsCount) AS averageFilingsPerOriginatorBank",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country)
WHERE c.location.latitude > 50
RETURN f",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'Singapore' AND f.beneficiary_bank_country = 'United Kingdom'
RETURN count(f) AS NumberOfFilings",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.originator_bank_country = 'Singapore'
RETURN e",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(:Filing)
WITH e, count(e) AS filings
ORDER BY filings DESC
LIMIT 5
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, filings AS NumberOfEntities",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN e, SUM(f.amount) AS total_amount
ORDER BY total_amount DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing {beneficiary_bank_country: ""United Kingdom""})-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN DISTINCT c
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(originator:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom' AND f.amount > 1000000
RETURN originator",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing {originator_bank: 'CIMB Bank Berhad'})
RETURN f
ORDER BY f.amount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,False
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.begin_date_format >= '2015-01-01T00:00:00Z' AND f.end_date_format <= '2015-12-31T23:59:59Z'
RETURN e, count(f) AS filings_count
ORDER BY filings_count DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f, duration.between(f.begin, f.end) AS duration
ORDER BY duration
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (originator:Entity)-[:ORIGINATOR]->(f:Filing)-[:BENEFITS]->(beneficiary:Entity)
WHERE f.amount > 1000000 AND originator.id = beneficiary.id
WITH DISTINCT originator
MATCH (originator)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country)
WITH c, count(DISTINCT e) AS originator_count
ORDER BY originator_count DESC
LIMIT 3
RETURN c.name AS country_name, originator_count",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country)
RETURN DISTINCT c.name
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:CONCERNS]-(f:Filing)
RETURN c.name AS Country, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)
RETURN f
ORDER BY f.number DESC
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
RETURN e.name AS Beneficiary, f.amount AS Amount
ORDER BY f.amount DESC
LIMIT 5",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing {originator_bank_country: 'Singapore'})
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e, filingsCount",Pathfinding Queries,fincen,False,False,False
"MATCH (f:Filing)-[:ORIGINATOR]->(originator:Entity),
      (f)-[:CONCERNS]->(concerned:Entity)
WHERE f.originator_bank_country = 'Singapore' AND f.beneficiary_bank_country = 'United Kingdom'
RETURN originator, concerned
LIMIT 3",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filings
ORDER BY filings DESC
LIMIT 5
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, count(e) AS NumberOfEntities
ORDER BY NumberOfEntities DESC",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
WITH e.country AS country, COUNT(e) AS num_entities
ORDER BY num_entities ASC
LIMIT 1
RETURN country",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
LIMIT 3
RETURN e.name, filingsCount",Pathfinding Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.begin_date_format >= '2015-03-01T00:00:00Z' AND f.begin_date_format <= '2015-03-31T23:59:59Z'
  AND f.amount > 500000
RETURN e",Pathfinding Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'China'})
WHERE f.amount > 150000
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'China'})
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(originator:Entity)-[:COUNTRY]->(originatorCountry:Country),
      (f)-[:BENEFITS]->(beneficiary:Entity)-[:COUNTRY]->(beneficiaryCountry:Country)
WHERE originatorCountry.code <> beneficiaryCountry.code
RETURN f",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WHERE f.amount > 2000000
RETURN e",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'Singapore' AND f.amount > 300000
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (originator:Entity)-[:ORIGINATOR]->(f:Filing)-[:BENEFITS]->(beneficiary:Entity)
WHERE originator.id = beneficiary.id
WITH DISTINCT originator
MATCH (originator)-[:COUNTRY]->(c:Country)
RETURN c.name AS CountryName",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'United Kingdom'
RETURN count(f) AS NumberOfFilings",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United Kingdom'})
RETURN f
ORDER BY f.amount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)
WHERE NOT EXISTS {
  MATCH (e)<-[:BENEFITS]-(:Filing)
}
RETURN count(e) AS NumberOfEntitiesWithoutBeneficiaryFilings",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing)
RETURN e.name AS OriginatorBank, sum(f.amount) AS TotalAmount
ORDER BY TotalAmount DESC
LIMIT 3",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.beneficiary_bank = 'Barclays Bank Plc' AND f.amount > 500000
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WHERE f.amount > 500000
RETURN e",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:CONCERNS]->(f:Filing)
WITH e, sum(f.amount) AS totalAmount
ORDER BY totalAmount DESC
LIMIT 5
RETURN e.name AS EntityName, totalAmount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country {name: 'United States'})
WHERE f.amount < 500000
RETURN count(f) AS NumberOfFilings",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)
WHERE f.beneficiary_bank_country = 'United Kingdom'
WITH e, count(f) AS filingsCount
RETURN e, filingsCount
ORDER BY filingsCount DESC",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.originator_bank_country = 'Singapore' AND f.end_date = 'Sep 25, 2015'
RETURN f",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WHERE f.beneficiary_bank_country = 'United States'
WITH e, count(f) AS filingsCount
ORDER BY filingsCount DESC
RETURN e, filingsCount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'Singapore'
RETURN count(f) AS NumberOfFilings",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WITH f, count{(f)-[:ORIGINATOR]->(:Entity)} AS originatorCount
ORDER BY originatorCount DESC
RETURN f, originatorCount
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)-[:CONCERNS]->(e:Entity)
WHERE f.amount > 1000000
RETURN e",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:FILED]->(f:Filing)
WITH e, count(f) AS filingsCount
WHERE filingsCount > 30
RETURN e",Simple Aggregation Queries,fincen,False,False,False
"MATCH (f:Filing)
WHERE f.beneficiary_bank_country = 'United Kingdom'
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration ASC
LIMIT 1",Simple Aggregation Queries,fincen,False,False,True
"MATCH (f:Filing)
WHERE f.begin IS NOT NULL AND f.end IS NOT NULL
RETURN f, duration.between(f.begin, f.end) AS Duration
ORDER BY Duration DESC
LIMIT 5",Simple Aggregation Queries,fincen,False,False,True
"MATCH (e:Entity)-[:BENEFITS]->(f:Filing)
WITH e, count(f) AS filingsCount
ORDER BY filingsCount ASC
LIMIT 1
MATCH (e)-[:COUNTRY]->(c:Country)
RETURN c.name AS Country, filingsCount",Simple Aggregation Queries,fincen,False,False,True
"MATCH (c:Character)
RETURN c.name, c.degree
ORDER BY c.degree DESC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.pagerank < 1 AND c.pagerank > 0.5
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 0 AND c.community > 750
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank = 0.15
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 1 AND c.pagerank > 1
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 578 AND c.degree = 0
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality ASC
LIMIT 3",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL AND c.degree > 30
RETURN c
ORDER BY c.centrality ASC
LIMIT 1",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank > 10
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS2 {weight: 92, book: 2}]->(c2:Character)
RETURN c1.name AS Character1, c2.name AS Character2",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.name, c.degree
ORDER BY c.degree ASC
LIMIT 3",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS3 {book: 3}]->(:Character)
WHERE r.weight > 50
RETURN c.name, r.weight",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS2]->(:Character)
WHERE r.book = 2
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS]->(:Character)
WHERE r.weight > 100
RETURN c, r",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)
WHERE r.weight > 90
RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS InteractionWeight",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality DESC
LIMIT 3",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 3
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality > 0.5
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.name AS Name, c.book1BetweennessCentrality AS BetweennessCentrality
ORDER BY c.book1BetweennessCentrality DESC
LIMIT 1",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS]->(:Character)
WHERE r.weight < 10
RETURN c.name, r.weight",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 584
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,False
"MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character)
RETURN c1.name, c2.name, r.weight
ORDER BY r.weight DESC
LIMIT 1",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS2 {book: 2}]->(:Character)
WHERE r.weight < 20
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank = 8
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 1 AND c.degree > 50
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality = 0
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 2 AND c.degree > 20
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL
RETURN c.name, c.centrality
ORDER BY c.centrality DESC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality > 0.2 AND c.book1BetweennessCentrality > 1000
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank = 0.15
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree < 10
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank IS NOT NULL
RETURN c.name, c.book45PageRank
ORDER BY c.book45PageRank DESC
LIMIT 3",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 584 AND c.pagerank > 9
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality > 0.5 AND c.book1PageRank < 1
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank IS NOT NULL
RETURN c.name, c.book45PageRank
ORDER BY c.book45PageRank ASC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree >= 50 AND c.degree <= 100
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.louvain = 0 AND c.community < 600
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank IS NOT NULL
RETURN c.name, c.pagerank
ORDER BY c.pagerank ASC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality < 0.1 AND c.book1PageRank > 5
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank > 8
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree = 300
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL
RETURN c.name, c.centrality
ORDER BY c.centrality DESC
LIMIT 3",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 759 AND c.pagerank < 1
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank = 2
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank IS NOT NULL
RETURN c.name, c.book1PageRank
ORDER BY c.book1PageRank DESC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank >= 2 AND c.book1PageRank <= 4
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS3]->(c2:Character)
RETURN c1.name, c2.name, r.weight
ORDER BY r.weight ASC
LIMIT 1",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.name, c.pagerank
ORDER BY c.pagerank DESC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality < 0.1
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree > 100
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree > 20 AND c.pagerank < 0.3
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality = 2604.7556467555924
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality >= 0.5 AND c.centrality <= 0.8
RETURN c.name, c.centrality",Pathfinding Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.community = 579
RETURN c.name AS CharacterName, c.book1PageRank AS LowestBook1PageRank
ORDER BY c.book1PageRank ASC
LIMIT 1",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL
WITH c
ORDER BY c.centrality DESC
WITH c.louvain AS community, collect(c) AS members
ORDER BY size(members) DESC
LIMIT 3
UNWIND members AS top_member
RETURN top_member.name, top_member.centrality, top_member.louvain",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank > 7 AND c.degree < 50
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality > 0.5 AND c.book1BetweennessCentrality < 100
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1]->(:Character)
WHERE r.weight > 150
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS2 {weight: 92}]->(c2:Character)
RETURN c1.name AS Character1, c2.name AS Character2",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS3]->(c2:Character)
RETURN c1, c2, r.weight AS weight
ORDER BY r.weight DESC
LIMIT 1",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)
WHERE r.weight > 90
RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS InteractionWeight",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS]->(:Character)
RETURN c.community, count(*) AS frequency
ORDER BY frequency DESC
LIMIT 3",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character)
WHERE r.weight < 10
RETURN c1.name, c2.name, r.weight",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank < 1 AND c.degree > 10
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 1 AND c.pagerank > 0.5
RETURN c.name, c.pagerank",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality = 1.0
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree >= 50 AND c.degree <= 100
RETURN c.name",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 578 AND c.pagerank > 0.3
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 795
RETURN c.name, c.book1PageRank
ORDER BY c.book1PageRank DESC
LIMIT 5",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank IS NOT NULL
RETURN c
ORDER BY c.book45PageRank DESC
LIMIT 5",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality < 0.1 AND c.pagerank > 2
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree = 300
RETURN c.name",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank < 1
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 1 AND c.pagerank > 0.4
RETURN c.name, c.pagerank",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain < 1
RETURN c.name",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank > 3
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1]->(:Character)
WHERE r.weight > 250
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS3 {weight: 95}]->(other:Character)
RETURN c.name, other.name",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS2]->(c2:Character)
RETURN c1, c2, r.weight AS weight
ORDER BY r.weight DESC
LIMIT 1",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS45]->(:Character)
WHERE r.weight > 95
RETURN c.name, r.weight",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[:INTERACTS1]->(c2:Character)
RETURN c1.community AS Community, count(*) AS Frequency
ORDER BY Frequency DESC
LIMIT 5",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character)
WHERE r.weight > 200
RETURN c1.name, c2.name, r.weight",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank < 0.5 AND c.degree > 5
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 3 AND c.pagerank > 0.6
RETURN c.name, c.pagerank",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality = 0.5
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree >= 10 AND c.degree <= 20
RETURN c.name",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 759 AND c.pagerank > 0.4
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 504
RETURN c.name, c.book1PageRank
ORDER BY c.book1PageRank DESC
LIMIT 3",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality < 0.05
RETURN c",Pathfinding Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.book45PageRank IS NOT NULL
RETURN c
ORDER BY c.book45PageRank DESC
LIMIT 10",Pathfinding Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.community = 795 AND c.pagerank > 0.5
RETURN c.name, c.pagerank",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality > 2000 AND c.book1PageRank < 3
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank = 1 AND c.centrality = 1
RETURN c.name",Pathfinding Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.centrality > 0.9 AND c.pagerank < 0.5
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WITH c.community AS community, count{(c)-[:INTERACTS|:INTERACTS1|:INTERACTS2|:INTERACTS3|:INTERACTS45]->()} AS relationshipCount
ORDER BY relationshipCount ASC
LIMIT 1
MATCH (char:Character {community: community})
RETURN char",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank < 0.15
RETURN c",Pathfinding Queries,gameofthrones,True,False,False
"MATCH (c:Character)
WHERE c.book1PageRank < 2 AND c.book45PageRank < 2
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 759 AND c.book45PageRank < 4
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r1:INTERACTS1]->()
WITH c, sum(r1.weight) AS sumInteracts1
MATCH (c)-[r2:INTERACTS2]->()
WITH c, sumInteracts1 + sum(r2.weight) AS totalWeight
RETURN c.name, totalWeight
ORDER BY totalWeight DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank > 5 AND c.community = 584
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1]->(:Character)
WHERE r.book = 1 AND r.weight > 50
RETURN c.name",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree IS NOT NULL
RETURN c.name, c.degree
ORDER BY c.degree DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community < 600 AND c.centrality = 1
RETURN c",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank IS NOT NULL AND c.book45PageRank IS NOT NULL
RETURN c.name, c.book1PageRank + c.book45PageRank AS combinedPageRank
ORDER BY combinedPageRank DESC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS45]->(:Character)
WITH c, sum(r.weight) AS totalWeight
ORDER BY totalWeight DESC
LIMIT 5
RETURN c.name, totalWeight",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL
RETURN c.name, c.centrality
ORDER BY c.centrality DESC
LIMIT 3",Verbose query,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.community = 795 AND c.degree IS NOT NULL
RETURN c
ORDER BY c.degree ASC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 10 AND c.pagerank > 0.5
RETURN c",Verbose query,gameofthrones,False,False,False
"MATCH (c:Character)-[r:INTERACTS]->()
WHERE c.book1PageRank < 1 AND r.weight > 150
RETURN c.name, c.book1PageRank, r.weight
LIMIT 3",Verbose query,gameofthrones,False,False,False
"MATCH (c:Character)-[r:INTERACTS45]->(:Character)
RETURN c.name, sum(r.weight) AS totalWeight
ORDER BY totalWeight DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree = 0 AND c.centrality > 0.5
RETURN c.name",Verbose query,gameofthrones,False,False,True
"MATCH (c1:Character {community: 578}), (c2:Character {community: 579})
WHERE c1.name = c2.name
RETURN c1.name AS CharacterName
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS45]->(:Character)
WHERE c.pagerank IS NOT NULL
RETURN c
ORDER BY c.pagerank ASC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 1 AND c.degree > 10
RETURN c.name",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 759
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality DESC
LIMIT 1",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.fastrf_embedding IS NOT NULL
RETURN c.name, c.fastrf_embedding, 
       max(c.fastrf_embedding) - min(c.fastrf_embedding) AS diversity
ORDER BY diversity DESC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1|INTERACTS2]->()
WITH c, sum(r.weight) AS totalWeight
ORDER BY totalWeight DESC
LIMIT 5
RETURN c.name, totalWeight",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS3]->(:Character)
RETURN c.name, r.weight
ORDER BY r.weight DESC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank < 1 AND c.book1PageRank > 2
RETURN c",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank > 5 AND c.centrality > 0.5
RETURN c
ORDER BY c.pagerank DESC, c.centrality DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 579
RETURN c
ORDER BY c.pagerank DESC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality DESC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.fastrf_embedding[0] > 0.5
RETURN c
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank < 0.2 AND c.degree > 10
RETURN c",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.fastrf_embedding[-1] < -0.5
RETURN c.name
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank < 2 AND c.community > 750
RETURN c",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL AND c.degree IS NOT NULL
RETURN c.name, c.centrality, c.degree
ORDER BY c.centrality + c.degree DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community < 600 AND c.pagerank > 0.4
RETURN c.name, c.community, c.pagerank",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank IS NOT NULL AND c.book45PageRank IS NOT NULL
RETURN c.name AS CharacterName, (c.book1PageRank + c.book45PageRank) AS TotalPageRank
ORDER BY TotalPageRank DESC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 504
RETURN c.name",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL AND c.community = 759
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality DESC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS2]->(:Character)
WHERE r.book = 2 AND r.weight > 50
RETURN c.name",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS]->()
WHERE c.pagerank > 0.5 AND r.weight > 200
RETURN c.name, c.pagerank, r.weight",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank > 4
RETURN c.name, c.book45PageRank
ORDER BY c.book45PageRank ASC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree = 0 AND c.book1PageRank > 0.5
RETURN c",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 795
RETURN c
ORDER BY c.pagerank DESC
LIMIT 5",Verbose query,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.louvain = 6 AND c.pagerank > 0.3
RETURN c.name",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WITH c, c.book1PageRank + c.book45PageRank AS totalPageRank
ORDER BY totalPageRank DESC
LIMIT 5
RETURN c.name, totalPageRank",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL
RETURN c.name, c.centrality
ORDER BY c.centrality DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 504 AND c.degree > 20
RETURN c.name, c.degree",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS|INTERACTS3]->()
WITH c, sum(r.weight) AS totalWeight
ORDER BY totalWeight DESC
LIMIT 3
RETURN c.name AS CharacterName, totalWeight",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank > 3 AND c.book45PageRank < 2
RETURN c",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 2
RETURN c.name
ORDER BY c.degree DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS45]->(:Character)
RETURN c.name AS CharacterName, c.book45PageRank AS PageRank
ORDER BY c.book45PageRank DESC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality = 0.8
RETURN c
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS3]->(:Character)
RETURN c.name, count(r) AS interactions
ORDER BY interactions DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.louvain AS community, count(c) AS communitySize
ORDER BY communitySize DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality DESC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank IS NOT NULL AND c.degree > 0
RETURN c.name, c.book1PageRank
ORDER BY c.book1PageRank ASC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS2]->(c2:Character)
RETURN c1.name, c2.name, r.weight
ORDER BY r.weight DESC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality > 0.6 AND c.pagerank < 1
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality DESC
LIMIT 3",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 759 AND c.degree > 30
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank < 1.5
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL
RETURN c.name, c.centrality
ORDER BY c.centrality ASC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality < 0.1 AND c.louvain > 5
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality > 2000
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1]->(:Character)
RETURN c.name, sum(r.weight) AS totalWeight
ORDER BY totalWeight DESC
LIMIT 3",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality > 0.4 AND c.book1PageRank < 0.3
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank > 9
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.name, c.degree
ORDER BY c.degree DESC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.centrality < 0.2 AND c.book45PageRank > 3
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 3 AND c.degree < 5
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank IS NOT NULL
RETURN c.name, c.pagerank
ORDER BY c.pagerank ASC
LIMIT 3",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 578 AND c.book1BetweennessCentrality > 500
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank < 0.5
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank IS NOT NULL
RETURN c.name, c.book1PageRank
ORDER BY c.book1PageRank ASC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality > 0.3 AND c.louvain = 1
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.book1PageRank < 0.2 AND c.degree > 10
RETURN c",Complex Aggregation Queries,gameofthrones,True,False,False
"MATCH (c:Character)-[r:INTERACTS]->(:Character)
RETURN c.name, r.weight
ORDER BY r.weight DESC
LIMIT 3",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank > 7 AND c.degree > 150
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank > 5 AND c.community = 578
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE exists {
    MATCH (c)-[:INTERACTS]->(:Character)
} AND exists {
    MATCH (c)-[:INTERACTS1]->(:Character)
} OR exists {
    MATCH (c)-[:INTERACTS2]->(:Character)
} OR exists {
    MATCH (c)-[:INTERACTS3]->(:Character)
} OR exists {
    MATCH (c)-[:INTERACTS45]->(:Character)
}
WITH c, count(DISTINCT type(r)) AS relationshipTypes
WHERE relationshipTypes > 1
RETURN c
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS2]->(:Character)
RETURN c.name, sum(r.weight) AS totalWeight
ORDER BY totalWeight DESC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank < 0.6 AND c.degree > 20
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character)
WHERE r.weight > 100 AND r.book = 1
RETURN c1.name, c2.name, r.weight",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS]->(:Character)
RETURN c.name, r.weight
ORDER BY r.weight DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 0
RETURN c
ORDER BY c.name
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality ASC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WITH c.community AS community, count(c) AS members
ORDER BY members DESC
LIMIT 1
WITH community AS largestCommunity
MATCH (c:Character)
WHERE c.community = largestCommunity
RETURN c.name
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree > 50
RETURN c.name",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.name, c.pagerank
ORDER BY c.pagerank DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank > 5
RETURN c
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain < 5
RETURN c
LIMIT 5",Verbose query,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL
RETURN c.name, c.centrality
ORDER BY c.centrality DESC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank IS NOT NULL
RETURN c.name AS Name, c.book1PageRank AS Book1PageRank
ORDER BY c.book1PageRank DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)
RETURN c1.name, SUM(r.weight) AS totalWeight
ORDER BY totalWeight DESC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality > 0.8 AND c.book1BetweennessCentrality > 4000
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 795 AND c.pagerank < 0.2
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL
RETURN c.name, c.centrality
ORDER BY c.centrality DESC
LIMIT 3",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank < 0.25 AND c.degree > 5
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 0 AND c.pagerank > 8
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS3]->(:Character)
RETURN c.name, r.weight
ORDER BY r.weight ASC
LIMIT 5",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality > 0.5 AND c.book1BetweennessCentrality > 3000
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.community > 750 AND c.pagerank < 1
RETURN c.name, c.community, c.pagerank",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank IS NOT NULL
RETURN c.name, c.book45PageRank
ORDER BY c.book45PageRank ASC
LIMIT 3",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality < 0.4 AND c.book45PageRank > 2
RETURN c",Complex Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality < 50 AND c.book1PageRank > 2
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character)
WHERE r.weight > 50
RETURN c1.name, c2.name, r.weight",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality > 0.8 AND c.pagerank < 0.4
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 642 AND c.pagerank > 1
RETURN c.name, c.pagerank",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS45]->(target:Character {name: 'Walder-Rivers'})
RETURN c.name
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS2]->(:Character)
WHERE c.louvain > 5
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 504
RETURN c
ORDER BY c.pagerank DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1]->(:Character)
WHERE r.weight > 200
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.fastrf_embedding[0] > 0
RETURN c.name, c.fastrf_embedding
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community > 700 AND c.pagerank > 1
RETURN c
ORDER BY c.pagerank DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank > 10
RETURN c.name, c.book45PageRank",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 10
RETURN c.name
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1]->(other:Character)
WHERE r.weight < 5
RETURN c.name AS Character, other.name AS InteractedWith, r.weight AS InteractionWeight",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree > 100
RETURN c
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 795 AND c.book1BetweennessCentrality IS NOT NULL
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS3]->(:Character)
WHERE r.weight > 90
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank > 1
RETURN c.name, c.centrality
ORDER BY c.centrality DESC
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)
WHERE r.weight = 96
RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS InteractionWeight",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank < 0.2
RETURN c
ORDER BY c.pagerank ASC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL AND c.community = 579
RETURN c
ORDER BY c.book1BetweennessCentrality ASC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank > 0.5
RETURN c.name, c.degree
ORDER BY c.degree DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 5 AND c.book45PageRank > 5
RETURN c.name",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1]->(target:Character {name: 'Roose-Bolton'})
RETURN c.name, r.weight
ORDER BY r.weight DESC
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c1:Character {name: 'Ryman-Frey'})
MATCH (c2:Character)
WHERE c2.community = c1.community
RETURN c2.name, c2.book1PageRank
ORDER BY c2.book1PageRank DESC
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality = 0 AND c.community = 642
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.louvain = 1 AND c.pagerank IS NOT NULL
RETURN c
ORDER BY c.pagerank DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality = 168.75234023581112 AND c.community = 642
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 795 AND c.pagerank > 0.2
RETURN c.name, c.pagerank",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS45]->(target:Character {name: 'Aeron-Greyjoy'})
RETURN c.name
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS2]->(:Character)
WHERE c.louvain > 3
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 735
RETURN c
ORDER BY c.pagerank DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1]->(:Character)
WHERE r.weight > 250
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank IS NOT NULL
RETURN c.name, c.book1PageRank
ORDER BY c.book1PageRank DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.fastrf_embedding[0] < 0
RETURN c.name, c.fastrf_embedding
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community > 600 AND c.pagerank > 0.5
RETURN c
ORDER BY c.pagerank DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank > 11
RETURN c.name, c.book45PageRank",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 0
RETURN c.name
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1]->(other:Character)
WHERE r.weight < 10
RETURN c.name AS Character, other.name AS InteractedWith, r.weight AS InteractionWeight",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree > 150
RETURN c
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 504 AND c.book1BetweennessCentrality IS NOT NULL
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS2]->(:Character)
WHERE r.weight > 50
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank > 2
RETURN c.name, c.centrality
ORDER BY c.centrality DESC
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)
WHERE r.weight = 50
RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS InteractionWeight",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank < 0.3
RETURN c
ORDER BY c.pagerank ASC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL AND c.community = 642
RETURN c
ORDER BY c.book1BetweennessCentrality ASC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree IS NOT NULL AND c.book1PageRank > 1
RETURN c
ORDER BY c.degree DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 6 AND c.book45PageRank > 3
RETURN c.name",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS45]->(m:Character {name: 'Murenmure'})
RETURN c.name, r.weight
ORDER BY r.weight DESC
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS3 {weight: 95}]->(:Character)
RETURN c.name",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank > 5
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS3 {book: 3}]->(:Character)
WHERE r.weight < 10
RETURN c.name, r.weight",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (m:Character {name: 'Murenmure'})
MATCH (c:Character)
WHERE c.community = m.community
RETURN c.name, c.book45PageRank
ORDER BY c.book45PageRank DESC
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS]->(:Character)
WHERE r.weight > 300
RETURN c",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree = 0
RETURN c
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 6
RETURN c.name",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality = 0
RETURN c.name
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.fastrf_embedding[0] < 0
RETURN c.name, c.fastrf_embedding",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank < 0.7
RETURN c
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS3]->(c2:Character)
WHERE r.weight > 80
RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS RelationshipWeight",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS2]->(:Character)
WHERE r.weight < 20
RETURN c",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1 {weight: 291, book: 1}]->(:Character)
RETURN c
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community >= 600 AND c.community <= 700
RETURN c.name, c.community",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS]->(c2:Character)
WHERE r.weight < 10
RETURN c1, r, c2
LIMIT 5",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank IS NOT NULL
RETURN c
ORDER BY c.book1PageRank DESC
LIMIT 5",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)
WHERE r.weight > 50
RETURN c1.name, c2.name",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE any(x IN c.fastrf_embedding WHERE x > 1)
RETURN c
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank < 1
RETURN c
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community > 750
RETURN c",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 1
RETURN c.name
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.name, c.degree
ORDER BY c.degree DESC
LIMIT 5",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality = 0
RETURN c
LIMIT 5",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank IS NOT NULL
RETURN c.name, c.book45PageRank
ORDER BY c.book45PageRank DESC
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality > 2000
RETURN c.name, c.book1BetweennessCentrality",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL
RETURN c.name, c.centrality
ORDER BY c.centrality DESC
LIMIT 5",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 6 AND c.pagerank IS NOT NULL
RETURN c.name, c.pagerank
ORDER BY c.pagerank DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,False
"MATCH (c:Character)
RETURN c.name, c.pagerank
ORDER BY c.pagerank DESC
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)
WHERE r.book = 45
RETURN c1.name, c2.name
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 795 AND c.pagerank > 0.15
RETURN c.name, c.pagerank",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS|:INTERACTS1|:INTERACTS2|:INTERACTS3|:INTERACTS45]->(target:Character {name: 'Aegon-Frey-(son-of-Stevron)'})
RETURN c.name
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS2]->(other:Character)
RETURN c, other",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 642
RETURN c
ORDER BY c.pagerank DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)
WHERE r.weight > 50
RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS InteractionWeight",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank IS NOT NULL
RETURN c.name, c.book1PageRank
ORDER BY c.book1PageRank DESC
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree = 0
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality > 100
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.name, c.pagerank
ORDER BY c.pagerank DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS45]->(theon:Character {name: 'Theon-Greyjoy'})
RETURN c.name
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 1
RETURN c
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 579
RETURN c
ORDER BY c.pagerank DESC
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank < 1
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.name, c.degree
ORDER BY c.degree DESC
LIMIT 3",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality = 0.5
RETURN c",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank > 1
RETURN c
ORDER BY c.book1PageRank DESC
LIMIT 5",Complex Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality = 0.8333333333333334
RETURN c.name
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank >= 2 AND c.pagerank <= 3
RETURN c",Simple Retrieval Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.degree > 100
RETURN c.name, c.degree
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.community < 580
RETURN c.name, c.community",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank > 5
RETURN c
LIMIT 5",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS1 {weight: 150}]->(c2:Character)
RETURN c1, r, c2
LIMIT 3",Simple Retrieval Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank = 0 AND c.centrality = 0
RETURN c.name",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree > 100
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 579
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality = 0
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank > 8
RETURN c.name",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 2
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 579
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank < 1
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality IS NOT NULL
RETURN c.name, c.centrality
ORDER BY c.centrality DESC
LIMIT 5",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank > 5
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree > 100
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community > 750
RETURN c.name, c.community",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree = 125
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 5 AND c.pagerank < 2
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.name CONTAINS 'Greyjoy'
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1]->(:Character)
WHERE r.weight < 30
RETURN c.name, r.weight",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality > 1500
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 642
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank < 0.4
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank >= 0.2 AND c.pagerank <= 1.0
RETURN c.name, c.pagerank",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank IS NOT NULL
RETURN c.name, c.book45PageRank
ORDER BY c.book45PageRank DESC
LIMIT 3",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.fastrf_embedding[4] > 0.5
RETURN c.name",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality = 0.0 AND c.degree > 20
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS]->(:Character)
WHERE r.weight = 334
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality > 1000
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community < 550
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree < 10
RETURN c.name, c.degree",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 759
RETURN c.name AS CharacterName, c.book45PageRank AS HighestBook45PageRank
ORDER BY c.book45PageRank DESC
LIMIT 1",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WITH c.community AS community, count{(c)-[:INTERACTS|:INTERACTS1|:INTERACTS2|:INTERACTS3|:INTERACTS45]->()} AS totalRelationships
ORDER BY totalRelationships DESC
LIMIT 1
WITH community AS maxCommunity
MATCH (c2:Character)
WHERE c2.community = maxCommunity
RETURN c2.name AS CharacterName, c2.community AS Community",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank < 0.2
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain > 5
RETURN c.name, c.louvain",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank > 3 AND c.book45PageRank > 3
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain >= 0 AND c.louvain <= 5 AND c.pagerank > 0.5
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree = 0
RETURN c.name",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank >= 0.9 * 9.473142454730429
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality = 0
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality >= 0.2 AND c.centrality <= 0.5
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 795 AND c.degree IS NOT NULL
RETURN c.name, c.degree
ORDER BY c.degree DESC
LIMIT 3",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS]->(c2:Character)
WHERE r.weight > 200
RETURN c1.name, c2.name, r.weight",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[:INTERACTS]->(c2:Character)
WHERE c1.community = c2.community AND c1.community IS NOT NULL
RETURN c1.name AS Character1, c2.name AS Character2",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS]->(c2:Character)
WHERE r.weight >= 50 AND r.weight <= 100
RETURN c1.name, c2.name, r.weight",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS2 {book: 2}]->(:Character)
RETURN c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS3]->(c2:Character)
WHERE r.weight < 20
RETURN c1, r, c2",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS {weight: 45}]->(:Character)
RETURN c.name",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS2]->(:Character)
RETURN DISTINCT c",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)
RETURN c1.name, c2.name, r.weight
ORDER BY r.weight DESC
LIMIT 3",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS]->(c2:Character)
RETURN c1.name, c2.name, r.weight
ORDER BY r.weight DESC
LIMIT 5",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character)
WHERE r.weight > 100 AND r.book = 1
RETURN c1.name, c2.name, r.weight",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank IS NOT NULL
RETURN c
ORDER BY c.book1PageRank ASC
LIMIT 5",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WITH c.community AS community, count(c) AS members
ORDER BY members DESC
LIMIT 3
WITH collect(community) AS topCommunities
MATCH (ch:Character)
WHERE ch.community IN topCommunities
RETURN ch.name, ch.community",Pathfinding Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality = 1.0
RETURN c.name",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 2
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.name ENDS WITH 'Targaryen'
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.louvain = 10
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank > 4
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality ASC
LIMIT 5",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c1:Character {name: ""Daenerys Targaryen""})
MATCH (c2:Character)
WHERE c1.community = c2.community AND c1 <> c2
RETURN c2.name AS CharacterName",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS3]->(:Character)
WHERE r.weight > 50
RETURN c.name, r.weight",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS2]->(:Character)
RETURN c.name, r.weight",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.name AS CharacterName, c.centrality AS CentralityScore
ORDER BY c.centrality DESC
LIMIT 1",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank > 8
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank IS NOT NULL
RETURN c.name, c.book1PageRank
ORDER BY c.book1PageRank DESC
LIMIT 5",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS]->(:Character)
WHERE r.weight < 10
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree IS NOT NULL
RETURN c.name, c.degree
ORDER BY c.degree DESC
LIMIT 3",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community >= 600 AND c.community <= 700
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain < 5
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree = 0
RETURN c.name",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE ANY(x IN c.fastrf_embedding WHERE x > 0.5)
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)
WHERE r.weight = 96
RETURN c1.name AS Character1, c2.name AS Character2",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality > 0.5
RETURN c.name, c.pagerank
ORDER BY c.pagerank DESC
LIMIT 5",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality IS NOT NULL
RETURN c.name, c.book1BetweennessCentrality
ORDER BY c.book1BetweennessCentrality DESC
LIMIT 3",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 6
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank < 1
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.name, c.pagerank
ORDER BY c.pagerank DESC
LIMIT 5",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS1]->(:Character)
WHERE r.weight < 100
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank < 0.5
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree > 50 AND c.degree < 150
RETURN c.name, c.degree",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 795
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS45]->(c2:Character)
WHERE r.weight >= 10 AND r.weight <= 50
RETURN c1, r, c2",Simple Aggregation Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.book1PageRank < 1 AND c.degree > 10
RETURN c.name, c.book1PageRank, c.degree",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c1:Character)-[r:INTERACTS1 {weight: 291}]->(c2:Character)
RETURN c1.name AS Character1, c2.name AS Character2",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1BetweennessCentrality > 1000
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community > 600 AND c.louvain > 600
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.fastrf_embedding[9] < -0.5
RETURN c.name, c.fastrf_embedding",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
RETURN c.name, c.degree
ORDER BY c.degree ASC
LIMIT 5",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS|INTERACTS1|INTERACTS2|INTERACTS3|INTERACTS45]->(theon:Character {name: 'Theon-Greyjoy'})
RETURN DISTINCT c.name AS CharacterName",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.louvain = 3 AND c.pagerank > 2
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,False
"MATCH (c:Character)
WHERE c.degree < 5 AND c.degree > 0
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.pagerank = 0.15000000000000002
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank > 3 AND c.book45PageRank > 3
RETURN c.name",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[:INTERACTS45]->(target:Character {name: 'Aegon-I-Targaryen'})
RETURN c.name AS CharacterName",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank >= 2 AND c.book45PageRank <= 5
RETURN c.name, c.book45PageRank",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS3]->(:Character)
WHERE r.weight > 90
RETURN c.name, r.weight",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.community = 504
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.centrality < 0.5
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book1PageRank = 0.15000000000000002
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS2 {weight: 92}]->(:Character)
RETURN c.name, r.weight",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.book45PageRank IS NOT NULL
RETURN c.name, c.book45PageRank
ORDER BY c.book45PageRank ASC
LIMIT 1",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.fastrf_embedding[0] > 0.5
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.name STARTS WITH 'A'
RETURN c",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (c:Character)-[r:INTERACTS3]->(:Character)
RETURN c.name, r.weight
ORDER BY r.weight DESC
LIMIT 3",Verbose query,gameofthrones,False,False,True
"MATCH (c:Character)
WHERE c.degree = 300
RETURN c.name",Simple Aggregation Queries,gameofthrones,False,False,True
"MATCH (b:Business {city: 'Missoula'})
RETURN b.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)
WHERE r.date.month = 9
RETURN count(DISTINCT b) AS NumberOfBusinessesReviewedInSeptember",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WITH u, avg(r.stars) AS avgStars, collect(b.name) AS businessesReviewed
ORDER BY avgStars DESC
LIMIT 1
RETURN u.name AS userName, avgStars, businessesReviewed",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Neo4j'})-[:REVIEWS]-(r:Review)
RETURN r.text AS ReviewText, r.stars AS Stars",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
WHERE r.stars < 4
RETURN b.name, b.address, r.stars",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'Broadway St'
RETURN b.name AS BusinessName, c.name AS Category",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.address CONTAINS 'E Front St'
RETURN u.name AS UserName, b.name AS BusinessName",Pathfinding Queries,grandstack,True,False,False
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category)
RETURN DISTINCT c.name",Pathfinding Queries,grandstack,True,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.date < date('2016-01-01')
RETURN b.name, r.text",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
RETURN count(DISTINCT u) AS NumberOfUsers",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE distance(b.location, point({longitude: -113.995057, latitude: 46.874029})) <= 1000
RETURN b.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.city = 'Burlingame'
RETURN b.name, r.text, length(r.text) AS reviewLength
ORDER BY reviewLength DESC
LIMIT 5",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
RETURN b.name, b.businessId, r.date
ORDER BY r.date DESC
LIMIT 1",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'great selection'
RETURN DISTINCT b",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address = '200 W Pine St'
RETURN b.name AS BusinessName, c.name AS Category",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
WHERE u.name IN ['Jenny', 'Bob']
WITH b, count(DISTINCT u) AS reviewersCount
WHERE reviewersCount = 2
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Missoula'})
WITH u, count(r) AS reviewsCount
RETURN u.name AS UserName, reviewsCount
ORDER BY reviewsCount DESC
LIMIT 1",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE b.city = 'Burlingame' AND r.stars >= 4.0
RETURN b.address",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:IN_CATEGORY]->(c:Category)
RETURN DISTINCT c.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2018-01-01') AND r.date <= date('2018-12-31')
RETURN b.name, count(r) AS reviews_count
ORDER BY reviews_count DESC
LIMIT 1",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Neo4j'})
RETURN u.name",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
RETURN b.name, avg(r.stars) AS average_rating
ORDER BY average_rating DESC
LIMIT 3",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {address: '301 E Main St'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
RETURN count(DISTINCT u) AS NumberOfUsers",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'San Mateo' AND c.name CONTAINS 'Car Wash'
RETURN b.name, b.address",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
WHERE reviewsCount = 3
MATCH (b)<-[:REVIEWS]-(r:Review)
RETURN b.name, collect(r.date) AS reviewDates",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Burlingame' AND c.name = 'Library'
RETURN b.name",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
RETURN b.name AS BusinessName, r.text AS ReviewText
ORDER BY r.date ASC
LIMIT 1",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category)
RETURN b.name AS BusinessName, c.name AS CategoryName",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category)
WITH u, collect(DISTINCT c.name) AS categories
ORDER BY size(categories) DESC
LIMIT 1
RETURN u.name AS UserName, categories AS CategoriesReviewed",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review {stars: 4.0})
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2017-01-01')
RETURN DISTINCT b.name",Pathfinding Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date.year = 2016
RETURN b.name AS BusinessName, r.stars AS Stars, r.text AS ReviewText",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)-[:WROTE]->(u:User)
WHERE b.address CONTAINS 'Broadway St' AND r.date >= date('2017-01-01') AND r.date <= date('2017-12-31')
RETURN b.name AS BusinessName, u.name AS ReviewerName",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Car Wash'})
WHERE b.city = 'San Mateo'
MATCH (r:Review)-[:REVIEWS]->(b)
RETURN b.name, r.text",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]->(r:Review)
WITH b, r ORDER BY r.stars DESC LIMIT 1
MATCH (r)-[:REVIEWS]->(b)
RETURN r.text",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'MT'})-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN b.name, b.address, reviewsCount",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE u.name IN ['Angie', 'Will']
RETURN b.name AS BusinessName, r.text AS ReviewText",Pathfinding Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Zootown Brew'})
RETURN u.name AS UserName, r.text AS ReviewText",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)
WITH b, avg(r.stars) AS avgRating
ORDER BY avgRating DESC
LIMIT 1
MATCH (b)-[:REVIEWS]-(r:Review)
RETURN b.name, b.address, r AS reviews, avgRating",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review {stars: 5})
RETURN b.name, b.address",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)-[:WROTE]-(u:User)
WHERE r.text CONTAINS 'love'
RETURN b.name AS BusinessName, u.name AS ReviewerName",Pathfinding Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.city IN ['Missoula', 'San Mateo']
WITH u, collect(DISTINCT b.city) AS cities
WHERE ALL(city IN ['Missoula', 'San Mateo'] WHERE city IN cities)
RETURN u.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'Pine St'
RETURN b.name, c.name AS category, r.date AS review_date",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)-[:WROTE]-(u:User {name: 'Jenny'})
WITH b, collect(u) AS reviewers
WHERE all(u IN reviewers WHERE u.name = 'Jenny')
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address ENDS WITH 'E Front St'
RETURN b.name, r.stars",Pathfinding Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
WITH u, count(DISTINCT b) AS businesses_count, collect(DISTINCT b.name) AS business_names
WHERE businesses_count > 1
RETURN u.name AS user_name, business_names",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'California Dr'
RETURN b.name AS BusinessName, c.name AS Category",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 1
MATCH (b)-[:REVIEWS]-(r:Review)
RETURN b, collect(r) AS Reviews",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars = 5 AND b.address CONTAINS 'Main St'
RETURN r as Review, u.name as ReviewerName",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
WHERE b.state = 'CA'
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'San Mateo'
WITH c, count(b) AS businessCount
ORDER BY businessCount DESC
LIMIT 3
RETURN c.name, businessCount",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)-[:WROTE]-(u:User)
WITH b, count(r) AS reviewsCount, collect(u.name) AS reviewerNames
WHERE reviewsCount = 2
RETURN b.name AS BusinessName, reviewerNames",Pathfinding Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category)
RETURN b.name AS BusinessName, b.address AS Address, c.name AS Category",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Missoula' AND c.name = 'Brewery'
RETURN b.name",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date = date('2018-09-10')
RETURN b.name AS BusinessName",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS 'N San Mateo Dr'
RETURN r.text",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
WITH u, AVG(r.stars) AS avg_stars
ORDER BY avg_stars ASC
LIMIT 3
RETURN u.name AS user, avg_stars",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
WHERE reviewsCount >= 3
RETURN b.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Missoula Public Library'})-[:IN_CATEGORY]->(c:Category)
RETURN c.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
WITH u, avg(r.stars) AS averageStars
RETURN u.name AS UserName, averageStars
ORDER BY averageStars DESC
LIMIT 5",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars = 5.0 AND r.date.year = 2018
RETURN r, u.name AS reviewer, b.name AS business",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WITH b, AVG(r.stars) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN b.name, avgRating",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2017-01-01') AND r.date <= date('2017-12-31')
WITH b, count(r) AS reviewsCount
RETURN b.name, reviewsCount
ORDER BY reviewsCount DESC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Car Wash'})
MATCH (r:Review)-[:REVIEWS]->(b)
RETURN AVG(r.stars) AS average_star_rating",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
WITH u, count(r) AS reviewsCount
WHERE reviewsCount > 1
RETURN u.name AS UserName, reviewsCount",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.name CONTAINS 'Brewing Co.' AND b.city = 'Missoula'
RETURN b.address",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Hanabi'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
RETURN b.name AS Business, u.name AS Reviewer, r.text AS ReviewText, r.stars AS ReviewStars",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:IN_CATEGORY]->(c:Category),
      (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WITH b, MAX(r.stars) AS highestStars
RETURN b.name, b.address, highestStars
ORDER BY highestStars DESC",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
RETURN b",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Neo4j'})-[:REVIEWS]-(r:Review)
RETURN r
ORDER BY r.date DESC
LIMIT 3",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.address IN ['1151 W Broadway St', '121 W Broadway St']
RETURN DISTINCT u.name AS UserName",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 3",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.stars >= 4.0
RETURN b.name, b.address",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'CA'})-[:REVIEWS]->(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 5
RETURN b.name, b.address, reviewsCount",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})
RETURN b",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r.date AS ReviewDate, r.text AS ReviewText, b.name AS BusinessName
ORDER BY r.date DESC
LIMIT 3",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date >= date('2018-01-01')
RETURN b, u",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
RETURN b.name, reviewsCount
LIMIT 1",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'IPA selection'
RETURN b",Complex Retrieval Queries,grandstack,True,False,False
"MATCH (b:Business)
WITH b.city AS city, count(b) AS businessCount
WHERE businessCount >= 2
RETURN city, businessCount",Simple Aggregation Queries,grandstack,True,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS '1st St W' AND r.text CONTAINS 'selection'
RETURN b.name, r.stars",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]->(r:Review {stars: 5.0})
RETURN count(DISTINCT b) AS FiveStarBusinessesInMissoula",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE distance(b.location, point({address: '301 E Main St'})) <= 3218.69
RETURN b",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)
WHERE distance(b.location, point({longitude: -113.995057, latitude: 46.874029})) <= 1609.34
RETURN count(b) AS NumberOfBusinessesWithin1Mile",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH c, count(b) AS numBusinesses
ORDER BY numBusinesses ASC
LIMIT 1
RETURN c.name AS Category, numBusinesses",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(:Review)
WITH b.city AS city, count(*) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 3
RETURN city, reviewCount",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)-[:WROTE]->(u:User)
WHERE r.text CONTAINS 'great'
RETURN b.name, b.address, b.city, b.state",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'breakfast'
RETURN count(r) AS NumberOfReviewsMentioningBreakfast",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.name = 'Missoula Public Library'
RETURN u.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'IPA'
RETURN b.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2018-09-01') AND r.date <= date('2018-09-30')
RETURN b",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)
RETURN b.name AS BusinessName, r.date AS ReviewDate
ORDER BY r.date DESC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]->(r:Review)
RETURN AVG(r.stars) AS averageStarRating",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business {name: 'Neo4j'})-[:REVIEWS]-(r:Review)
RETURN count(r) AS NumberOfReviews",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review)
RETURN r.text AS reviewText
ORDER BY r.date DESC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName, r.date AS ReviewDate",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
WHERE u.name IN ['Jenny', 'Bob']
WITH b, count(DISTINCT u) AS userCount
WHERE userCount = 2
RETURN b",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Market on Front'})<-[:REVIEWS]-(r:Review)
RETURN r.text AS review_text
ORDER BY r.stars ASC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS 'E Front St'
WITH b, AVG(r.stars) AS avg_stars
RETURN b.name AS BusinessName, avg_stars
ORDER BY avg_stars DESC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date >= date('2016-01-01') AND r.date <= date('2016-12-31')
RETURN count(r) AS NumberOfReviewsIn2016",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WITH u, count(DISTINCT b) AS numBusinesses
RETURN u.name AS userName, numBusinesses
ORDER BY numBusinesses DESC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
RETURN b.state AS State, count(b) AS NumberOfBusinesses
ORDER BY b.state",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.stars < 4
RETURN b.name, b.businessId, b.address, b.city, b.state
ORDER BY r.stars ASC
LIMIT 3",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
RETURN b.name AS BusinessName, b.address AS Address
ORDER BY r.date ASC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH b, count(c) AS numCategories
WHERE numCategories > 1
RETURN b.name, numCategories",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review {stars: 4.5})
RETURN b.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)
WHERE NOT exists{ (u)-[:WROTE]->(:Review) }
RETURN u",Simple Aggregation Queries,grandstack,True,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH c.name AS CategoryName, count(b) AS NumberOfBusinesses
ORDER BY NumberOfBusinesses DESC
LIMIT 5
RETURN CategoryName, NumberOfBusinesses",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Burlingame'})
RETURN b.name AS BusinessName, r.date AS ReviewDate",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Missoula'})
WITH b, collect(r.text) AS reviewTexts, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 1
RETURN b.name AS BusinessName, reviewTexts",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)-[:WROTE]->(u:User)
WHERE r.text CONTAINS 'IPA'
RETURN b.name AS BusinessName, collect(u.name) AS ReviewerNames
ORDER BY size(collect(r.reviewId)) DESC
LIMIT 5",Pathfinding Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'breakfast'
RETURN r, u, b
ORDER BY r.stars DESC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business {city: 'Burlingame'})-[:IN_CATEGORY]->(c:Category),
      (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WITH b, r
ORDER BY r.stars DESC
LIMIT 3
RETURN b.name AS BusinessName, r.text AS ReviewText",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars = 3.0 AND r.text CONTAINS 'wifi'
RETURN u, r, b",Verbose query,grandstack,True,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.date = date('2018-09-10')
RETURN b.name AS BusinessName, b.address AS Address",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH c, count(b) AS numBusinesses
WHERE numBusinesses > 3
RETURN c.name
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
WITH u, count(r) AS reviewsCount
WHERE reviewsCount > 1
RETURN u.name AS UserName, reviewsCount",Verbose query,grandstack,False,False,True
"MATCH (b:Business)
WHERE distance(b.location, point({longitude: -113.995297, latitude: 46.877981})) <= 8046.72
RETURN b.name
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
RETURN b.name, avg(r.stars) AS average_rating
ORDER BY average_rating DESC
LIMIT 1",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'car wash'
RETURN u, r, b",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Brewery'})
RETURN b
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE b.city = 'San Mateo' AND date(r.date) >= date('2016-08-01') AND date(r.date) <= date('2016-08-31')
RETURN b.name, b.address, r.reviewId, r.stars",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {address: '111 E 5th Ave'})
RETURN u.name AS UserName",Verbose query,grandstack,False,False,True
"MATCH (b:Business {name: 'Neo4j'})
RETURN b.address
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars >= 4
RETURN r, u.name AS reviewer, b.name AS business
ORDER BY r.stars DESC, r.date DESC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'great selection'
RETURN b.name, b.address, b.city, b.state",Verbose query,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)
RETURN r",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'KettleHouse Brewing Co.'})
RETURN u.name AS UserName",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
RETURN b.name
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review {stars: 5})
RETURN u
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})
RETURN b.name
ORDER BY b.businessId
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame', address: '723 California Dr'})
RETURN b",Verbose query,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})
RETURN b",Verbose query,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WITH b, avg(r.stars) AS averageRating
ORDER BY averageRating DESC
LIMIT 5
RETURN b.name AS BusinessName, b.address AS Address, averageRating",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.name STARTS WITH 'Z'
RETURN b.city, b.state",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: ""Ducky's Car Wash""})
RETURN u.name AS UserName",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE c.name = 'Brewery'
WITH b
MATCH (b)-[:IN_CATEGORY]->(c2:Category)
WHERE c2.name = 'Restaurant'
RETURN b.name",Verbose query,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'books'
RETURN b",Verbose query,grandstack,False,False,False
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)
WHERE r.stars >= 3.5
RETURN b.name, b.address, r.stars",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'service'
RETURN b
LIMIT 5",Verbose query,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2017-12-01') AND r.date <= date('2017-12-31')
RETURN b.name
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS '1st St' AND r.stars >= 4.0
RETURN b.name, b.address, r.reviewId, r.stars",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'sandwich'
RETURN r, u, b
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: ""Library""})
WHERE EXISTS {
    (b)<-[:REVIEWS]-(:Review)-[:WROTE]->(:User)
}
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)
WITH collect(u) AS allUsers
MATCH (b:Business)
WHERE all(allUser IN allUsers WHERE exists {
    (allUser)-[:WROTE]->(:Review)-[:REVIEWS]->(b)
})
RETURN b",Verbose query,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date >= date('2016-01-01') AND r.date <= date('2016-01-31')
RETURN u.name AS UserName, r.text AS ReviewText",Verbose query,grandstack,False,False,False
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)
RETURN b.name, count(r) AS reviews_count
ORDER BY reviews_count DESC
LIMIT 1",Verbose query,grandstack,True,False,False
"MATCH (b:Business {state: 'MT'})
RETURN b.name
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)
WHERE NOT exists{(b)<-[:REVIEWS]-(:Review)}
RETURN b
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.address CONTAINS 'Broadway St' AND r.date >= date('2017-01-01') AND r.date <= date('2017-12-31')
RETURN u, r, b",Verbose query,grandstack,False,False,False
"MATCH (b:Business)
RETURN b, distance(b.location, point({longitude: -113.990976, latitude: 46.870035})) AS dist
ORDER BY dist ASC
LIMIT 1",Verbose query,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b
ORDER BY r.date DESC
LIMIT 5",Verbose query,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.address CONTAINS 'Main St'
RETURN DISTINCT u.name",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN b.name AS BusinessName, b.address AS Address",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, u, b
ORDER BY r.stars ASC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'IPA'
RETURN b",Verbose query,grandstack,False,False,True
"MATCH (b:Business {address: '200 W Pine St'})
RETURN b.name",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Car Wash'})
RETURN u.name AS UserName
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.stars = 5.0
RETURN b.name, b.location
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.state = 'CA'
RETURN DISTINCT u.name",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date >= date('2015-09-01') AND r.date <= date('2015-09-30')
RETURN b.name AS BusinessName, u.name AS UserName",Verbose query,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.address CONTAINS 'Pine St'
RETURN b
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars > 4.5
RETURN u.name AS UserName, r.text AS ReviewText, r.stars AS StarRating, b.name AS BusinessName",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Burlingame'})
RETURN DISTINCT u.name AS UserName",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 1",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.state = 'CA'
RETURN b, c",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.address CONTAINS '1st St W'
RETURN b.name AS BusinessName, r.text AS ReviewText",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.state = 'CA' AND 
      EXISTS {
        (b)<-[:REVIEWS]-(r:Review)
        WHERE r.date >= date('2017-01-01') AND r.date <= date('2017-12-31')
      }
RETURN b, c",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Breweries'})
WHERE b.city = 'Missoula'
MATCH (r:Review)-[:REVIEWS]->(b)
RETURN b.name AS BusinessName, r.text AS ReviewText",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
RETURN b.name AS BusinessName, r.date AS ReviewDate",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)-[:WROTE]-(u:User)
WHERE r.date.year = 2015
RETURN b.name AS BusinessName, r.text AS ReviewText",Pathfinding Queries,grandstack,True,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'Broadway St'
AND exists {
  (b)<-[:REVIEWS]-(r:Review)
  WHERE r.stars = 5.0
}
RETURN b.name, c.name",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)-[:WROTE]-(u:User)
WHERE u.name IN ['Jenny', 'Bob']
RETURN DISTINCT b.name",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)-[:WROTE]->(u:User)
WHERE b.address CONTAINS 'Pine St' AND r.date.year = 2017
RETURN b.name AS BusinessName, u.name AS ReviewerName",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.city = 'San Mateo'
WITH b, count(r) AS reviewsCount
WHERE reviewsCount > 2
RETURN b.name, b.businessId, collect(r.stars) AS reviewStars",Pathfinding Queries,grandstack,True,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category), (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WHERE b.address CONTAINS 'Main St'
RETURN b.name, r.text",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]->(r:Review)-[:WROTE]->(u:User)
WHERE r.date.year = 2016
RETURN b.name AS BusinessName, u.name AS ReviewerName",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)-[:WROTE]-(u:User)
WHERE toLower(r.text) CONTAINS 'awesome'
RETURN b.name AS BusinessName, u.name AS ReviewerName",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Missoula'})
WITH r, b, length(r.text) AS reviewLength
ORDER BY reviewLength DESC
LIMIT 3
RETURN b.name AS BusinessName, r.text AS ReviewText, reviewLength",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'CA'})
RETURN b.name AS BusinessName, r.stars AS Stars",Pathfinding Queries,grandstack,True,False,False
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
RETURN b.name AS BusinessName, r.text AS ReviewText",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)-[:WROTE]-(u:User)
WHERE b.address CONTAINS '5th Ave'
RETURN b.name AS BusinessName, u.name AS ReviewerName",Pathfinding Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Burlingame'})
MATCH (b)-[:IN_CATEGORY]->(c:Category)
RETURN b.name, collect(c.name) AS categories",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})
WHERE exists {
  MATCH (u:User)
  WHERE all(u IN collect(u) WHERE exists {
    MATCH (u)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
  })
}
RETURN b.name, collect(r.text) AS reviewTexts",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'California Dr'
AND exists {
  (b)<-[:REVIEWS]-(r:Review)
  WHERE r.stars = 3.0
}
RETURN b.name, c.name",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'car wash'
RETURN b.name, r.date",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]->(r:Review)
WHERE r.date.year = 2018
RETURN b.name AS BusinessName, r.text AS ReviewText",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)-[:WROTE]-(u:User {name: 'Jenny'})
WHERE b.address CONTAINS 'Front St'
RETURN b.name, b.address, r.date AS review_date",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'CA'})
RETURN b.name AS BusinessName, r.stars AS ReviewStars",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)-[:WROTE]->(u:User), (b)-[:IN_CATEGORY]->(c:Category)
WHERE r.text CONTAINS 'breakfast'
RETURN b.name AS BusinessName, c.name AS CategoryName",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS 'Broadway St'
WITH b, avg(r.stars) AS avgStars, collect(r.text) AS reviewTexts
ORDER BY avgStars ASC
RETURN b.name, b.address, avgStars, reviewTexts
LIMIT 1",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Neo4j'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
RETURN r.date, r.text, r.stars, u.name
ORDER BY r.date DESC
LIMIT 3",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE b.address CONTAINS 'California Dr' AND r.date.year = 2016
RETURN b.name, r.text",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]->(r:Review)
WITH b, collect(DISTINCT r.stars) AS uniqueStars, collect(r.text) AS reviewTexts
ORDER BY size(uniqueStars) DESC
RETURN b.name AS BusinessName, uniqueStars, reviewTexts
LIMIT 1",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.stars < 4.0
RETURN DISTINCT b.name",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(:Review)
WITH b, count(*) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN b.name, reviewsCount",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Burlingame'})
RETURN DISTINCT u.name AS UserName",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'CA'})
WHERE exists {
  (b)<-[:REVIEWS]-(:Review)
}
WITH b, count{(b)<-[:REVIEWS]-(:Review)} AS reviewCount
WHERE reviewCount > 1
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date = date('2018-09-10')
RETURN b.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)
RETURN r",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.address IN ['200 W Pine St', '313 N 1st St W']
RETURN b.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WITH b, AVG(r.stars) AS avg_stars
ORDER BY avg_stars DESC
LIMIT 5
RETURN b.name, avg_stars",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
RETURN u.name, count(r) AS reviews_count
ORDER BY reviews_count DESC
LIMIT 3",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Coffee'})
RETURN b.address",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)-[:WROTE]-(u:User)
WHERE r.text CONTAINS 'graph database'
RETURN b.name AS BusinessName, u.name AS ReviewerName",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'San Mateo'
RETURN b.name AS BusinessName, c.name AS Category
ORDER BY b.name
LIMIT 3",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review {stars: 5})
RETURN b.name",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})
RETURN b.name
ORDER BY b.name
LIMIT 5",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
MATCH (b)-[:IN_CATEGORY]->(c:Category)
RETURN b.name, collect(c.name) AS categories",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:IN_CATEGORY]->(c:Category)
MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WHERE r.text CONTAINS 'love'
RETURN b.name, r.date AS ReviewDate",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS '5th Ave'
RETURN b.name AS BusinessName, r.stars AS ReviewStars",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.state = 'CA' AND EXISTS {
    MATCH (b)<-[:REVIEWS]-(r:Review)
    WHERE r.date.year = 2018
}
RETURN b, c",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:IN_CATEGORY]->(:Category)
MATCH (r:Review {stars: 5.0})-[:REVIEWS]->(b)
WITH b, count(r) AS FiveStarReviews, collect(r.text) AS ReviewTexts
ORDER BY FiveStarReviews DESC
LIMIT 1
RETURN b.name AS BusinessName, FiveStarReviews, ReviewTexts",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)-[:WROTE]-(u:User)
WITH b, r.text AS reviewText, COUNT(DISTINCT u) AS userCount
WHERE userCount > 1
RETURN b.name, COLLECT(reviewText) AS reviews",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category), (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WHERE b.address CONTAINS 'Broadway St'
RETURN b.name AS BusinessName, b.address AS Address, r.date AS ReviewDate",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Burlingame'})
RETURN b.name AS BusinessName, r.text AS ReviewText",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'CA'})-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 5
RETURN b.name, b.address, reviewsCount",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'KettleHouse Brewing Co.'})
RETURN u.name AS UserName",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address STARTS WITH '301'
RETURN b.name, b.address, c.name",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Brewery'})
WHERE b.state = 'MT'
RETURN b",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {name: 'Neo4j'})-[:REVIEWS]-(r:Review)
RETURN r.date AS ReviewDate",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'world' AND r.text CONTAINS 'leading'
RETURN b.name, collect(r.reviewId) AS reviewIds
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WITH b, collect(DISTINCT u.userId) AS uniqueUserIds
WHERE size(uniqueUserIds) >= 3
RETURN b.name, b.businessId, b.address, b.city, b.state
ORDER BY size(uniqueUserIds) DESC
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.stars = 4.5
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'awesome'
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)-[:WROTE]->(u:User)
WHERE r.text CONTAINS ""Ninja Mike's""
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'IPA' AND r.stars > 4.5
RETURN b.name, b.address, b.city, b.state, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'full-service'
RETURN b.name, b.businessId
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.state = 'CA'
RETURN b.name, count(r) AS reviews_count
ORDER BY reviews_count DESC
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE b.city = 'Missoula' AND r.text CONTAINS 'breakfast'
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'beer'
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'best'
RETURN u.name AS UserName, r.text AS ReviewText, r.stars AS Stars, b.name AS BusinessName
ORDER BY r.stars DESC
LIMIT 5",Verbose query,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WITH b, r.date AS review_date
ORDER BY review_date
WITH b, collect(DISTINCT review_date)[..3] AS first_three_dates
WHERE size(first_three_dates) = 3
RETURN b.name, first_three_dates
ORDER BY first_three_dates[0]
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business {address: '313 N 1st St W'})-[:REVIEWS]-(r:Review)
RETURN r
ORDER BY r.stars DESC
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS ""farmer's market""
RETURN b.name, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'car'
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'love'
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 5",Verbose query,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'sandwich'
RETURN b
LIMIT 3",Verbose query,grandstack,True,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User {name: 'Will'})
WITH b, count(r) AS reviewsCount
WHERE NOT exists {
    MATCH (b)<-[:REVIEWS]-(r2:Review)<-[:WROTE]-(u2:User)
    WHERE u2.name <> 'Will'
}
RETURN b.name, reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'great' AND r.text CONTAINS 'selection'
RETURN r, u.name, b.name
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.stars = 5 AND r.text CONTAINS 'awesome'
RETURN b.name, b.address, b.city, b.state, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE length(r.text) > 50
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE u.name IN ['Jenny', 'Bob']
WITH b, COUNT(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN b.name, reviewsCount",Verbose query,grandstack,False,False,True
"MATCH (r:Review)-[:REVIEWS]->(b:Business)
WHERE b.address CONTAINS '1st St'
RETURN r
ORDER BY r.stars DESC
LIMIT 5",Verbose query,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN b.name, reviewsCount",Verbose query,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'books'
RETURN b.name, b.businessId
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS ""Ducky's""
RETURN b.name, b.businessId
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'sandwich' AND r.text CONTAINS ""farmer's market""
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE c.name CONTAINS 'car wash'
MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WITH b, r
ORDER BY r.date DESC
RETURN b.name, collect(r)[..3] AS recent_reviews
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars > 4.5
RETURN r.reviewId, r.text, r.stars, b.name, b.businessId
ORDER BY r.stars DESC
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.address IN ['301 E Main St', '1151 W Broadway St', '121 W Broadway St']
RETURN b.name",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'great selection'
RETURN u, r, b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.stars >= 4.0
RETURN b.name
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Neo4j'})
RETURN u.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]->(r:Review)
RETURN r.text AS ReviewText
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
RETURN c.name, count(b) AS num_businesses
ORDER BY num_businesses DESC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
RETURN DISTINCT b.address
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'CA'})
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, b
ORDER BY r.date ASC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Beer'})
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'book'
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})
RETURN b.name
ORDER BY b.name
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(:Review)
RETURN DISTINCT u.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {address: '200 W Pine St'})
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})
RETURN b
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]->(r:Review)
RETURN b.name, avg(r.stars) AS average_rating
ORDER BY average_rating DESC
LIMIT 3",Simple Retrieval Queries,grandstack,True,False,False
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)
WHERE r.stars > 4.5
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date = date('2017-11-13')
RETURN b.name, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE u.name IN ['Jenny', 'Will']
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN b.name, reviewsCount",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.stars > 4 AND r.text CONTAINS 'awesome'
RETURN b.name, b.address, b.city, b.state, collect(r.reviewId) AS reviewIds
ORDER BY r.stars DESC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: ""Library""})
WHERE exists {
  (b)<-[:REVIEWS]-(:Review)-[:WROTE]->(:User)
}
RETURN b
ORDER BY b.name
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date.year = 2017
RETURN b.name, b.businessId
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review {text: 'Great IPA selection!'})
RETURN b.name, b.address, b.city, b.state, b.businessId
ORDER BY b.businessId
LIMIT 3",Verbose query,grandstack,True,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.stars = 5
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS ""world's leading""
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)
RETURN b, distance(b.location, point({longitude: -113.995057, latitude: 46.874029})) AS dist
ORDER BY dist DESC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'IPA'
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.name STARTS WITH 'Z'
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date.year = 2016
RETURN r.reviewId, r.text, r.stars, b.name, b.businessId
ORDER BY r.stars DESC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review {stars: 5.0})
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH b, count(c) AS num_categories
ORDER BY num_categories DESC
LIMIT 3
RETURN b.name, num_categories",Verbose query,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
RETURN b.name AS BusinessName, r.date AS ReviewDate
ORDER BY r.date ASC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, u, b
ORDER BY r.date DESC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.address CONTAINS 'Broadway St'
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business {state: 'MT'})
RETURN b.name, b.businessId
ORDER BY b.businessId
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business {state: 'CA'})
RETURN b
ORDER BY b.name
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'great selection'
RETURN u, r, b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Imagine Nation Brewing'})
WITH u, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN u.name, reviewsCount",Verbose query,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date > date('2017-12-31')
RETURN b.name, b.businessId
ORDER BY r.date DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars > 4.5
RETURN r, u, b
ORDER BY r.date ASC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)
RETURN b
ORDER BY b.address ASC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, b
ORDER BY r.date ASC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: ""Ninja Mike's""})
RETURN r.reviewId, r.stars, r.text, u.name
ORDER BY r.stars DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Beer'})
RETURN b.name, b.address, b.city, b.state
ORDER BY b.businessId
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
RETURN u.name, count(r) AS reviews_count
ORDER BY reviews_count DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r.reviewId, r.stars, r.text, b.name, u.name
ORDER BY r.stars DESC
LIMIT 5",Verbose query,grandstack,True,False,False
"MATCH (b:Business {city: 'San Mateo'})
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})
RETURN b
ORDER BY b.name
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
RETURN u.name, count(r) AS reviews_count
ORDER BY reviews_count DESC
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date.year = 2016 OR r.date.year = 2017
WITH b, collect(DISTINCT r.date.year) AS yearsReviewed
WHERE ALL(year IN [2016, 2017] WHERE year IN yearsReviewed)
RETURN b
ORDER BY count(r) DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Missoula'})
WITH u, COUNT(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN u.name AS UserName, reviewsCount",Verbose query,grandstack,False,False,False
"MATCH (b:Business {address: '301 E Main St'})-[:REVIEWS]-(r:Review)
RETURN r
ORDER BY r.date ASC
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'great' AND r.text CONTAINS 'IPA'
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,False
"MATCH (b:Business {address: '200 W Pine St'})-[:REVIEWS]-(r:Review)
RETURN r
ORDER BY r.stars DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'Ninja'
RETURN b.name, b.businessId
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c1:Category {name: 'Library'}),
      (b)-[:IN_CATEGORY]->(c2:Category {name: 'Beer'})
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'awesome'
RETURN r, u, b
ORDER BY r.stars DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'selection'
RETURN r, u, b
ORDER BY r.stars DESC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE u.name STARTS WITH 'W'
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2017-01-01')
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.stars < 3.5
RETURN b.name, b.businessId, collect(r.reviewId) AS reviewIds
ORDER BY b.name
LIMIT 3",Verbose query,grandstack,True,False,False
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WITH b, MAX(r.date) AS LatestReviewDate
ORDER BY LatestReviewDate DESC
LIMIT 3
RETURN b.name AS BusinessName, LatestReviewDate",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
RETURN DISTINCT u.name
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)
RETURN b
ORDER BY distance(b.location, point({longitude: -114.009628, latitude: 46.876672}))
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'CA'})
WITH u, COUNT(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 5
RETURN u.name, reviewsCount",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WITH b, AVG(r.stars) AS avg_rating
ORDER BY avg_rating ASC
LIMIT 3
RETURN b.name, avg_rating",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WITH b, AVG(r.stars) AS avg_stars
ORDER BY avg_stars DESC
LIMIT 3
RETURN b.name, avg_stars",Verbose query,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
WITH b, count(DISTINCT u) AS userCount
WHERE userCount > 1
RETURN b
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2018-09-01') AND r.date <= date('2018-09-30')
RETURN b.name, count(r) AS reviews_count
ORDER BY reviews_count DESC
LIMIT 5",Verbose query,grandstack,True,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'car wash'
RETURN r, u, b
ORDER BY r.stars DESC
LIMIT 3",Verbose query,grandstack,True,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'breakfast'
RETURN b.name, b.businessId
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)
RETURN r
ORDER BY r.date ASC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
RETURN b.name, b.businessId, length(r.text) AS reviewLength
ORDER BY reviewLength ASC
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
RETURN b.name, b.businessId, length(r.text) AS reviewLength
ORDER BY reviewLength DESC
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars = 4.0
RETURN u, r, b
ORDER BY r.date
LIMIT 3",Verbose query,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(:Review)
RETURN DISTINCT u",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)
RETURN u.name, count(r) AS reviews_count
ORDER BY reviews_count DESC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.state = 'CA'
RETURN r, b.name, b.address, u.name
ORDER BY r.date DESC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
RETURN b.name AS BusinessName
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address = '200 W Pine St'
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'awesome'
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]->(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN b.name AS BusinessName, reviewsCount",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'CA'})
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'IPA selection'
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars > 4.5
RETURN b.name, b.businessId, r.stars
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:IN_CATEGORY]->(c:Category)
WHERE EXISTS {
    (b)<-[:REVIEWS]-(r:Review)
    WHERE r.date.year = 2018
}
RETURN b, c
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2017-01-01') AND r.date <= date('2017-12-31')
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN b.name AS BusinessName",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
WHERE reviewsCount > 0
RETURN b
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.state = 'CA'
RETURN b.name, avg(r.stars) AS average_stars
ORDER BY average_stars DESC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars < 4.5
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'sandwich' AND b.name CONTAINS ""Farmer's Market""
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'selection'
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.city = 'Burlingame'
RETURN b
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'CA'})
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'not great'
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
RETURN b.name, b.address
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date >= date('2016-01-01') AND r.date <= date('2016-12-31')
RETURN r, b
ORDER BY r.date ASC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'CA'})
RETURN DISTINCT b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (r:Review)-[:REVIEWS]->(b:Business)
WHERE b.address CONTAINS 'Broadway St'
RETURN r
ORDER BY r.date ASC
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS ""world's leading""
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review {stars: 5.0})-[:REVIEWS]->(b:Business)
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Car Wash'})
RETURN b
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address ENDS WITH 'E Main St'
RETURN r
ORDER BY r.date ASC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Missoula'})
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category), (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WHERE b.city = 'Burlingame' AND r.text CONTAINS 'car wash'
RETURN b.name, b.address, c.name, r.text, r.date
ORDER BY r.date DESC
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'great selection'
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category), (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WHERE b.state = 'CA' AND r.stars < 4
RETURN b.name, b.address, b.city, b.state, r.date, r.stars, r.text",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:IN_CATEGORY]->(c:Category)
WHERE exists {
  (b)<-[:REVIEWS]-(:Review)<-[:WROTE]-(u:User {name: 'Bob'})
}
RETURN DISTINCT c.name",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS 'Broadway St'
RETURN b.name, b.address, r.text",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2016-08-01') AND r.date <= date('2016-08-31')
RETURN b",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.location.latitude > 46.87
RETURN b.name",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {userId: 'u2'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address = '301 E Main St'
RETURN DISTINCT c.name",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:IN_CATEGORY]->(c:Category)
MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WHERE r.stars >= 4
RETURN b.name, b.address, c.name, r.stars",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category), (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WHERE b.state = 'CA' AND r.text CONTAINS 'graph database'
RETURN b, c, r, u",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date = date('2017-11-13')
RETURN b.name AS BusinessName",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE exists {
    (b)<-[:REVIEWS]-(:Review {stars: 4.5})
}
RETURN DISTINCT c.name",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review {stars: 5.0})-[:REVIEWS]->(b:Business {state: 'CA'})
RETURN b.name AS BusinessName
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
WHERE b.state = 'CA'
RETURN b",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Burlingame'
MATCH (r:Review)-[:REVIEWS]->(b)
WHERE r.text CONTAINS 'car wash'
RETURN b, c, r",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
WHERE reviewsCount >= 2
RETURN b.name",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {address: '200 W Pine St'})
RETURN u.name AS UserName",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2018-09-01') AND r.date <= date('2018-09-30')
RETURN b.name AS BusinessName",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r.reviewId, r.stars, b.name, b.businessId
ORDER BY r.stars DESC
LIMIT 3",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review {stars: 5})
RETURN u.name",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'San Mateo' AND c.name = 'Coffee'
RETURN b.name",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.city = 'Missoula' AND b.businessId STARTS WITH 'b3'
RETURN b",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'love'
RETURN b.name, collect(r.text) AS reviews
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Missoula'})
RETURN b
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName, b.location AS Location",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.name IN ['KettleHouse Brewing Co.', 'Imagine Nation Brewing']
RETURN b.address",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.date = date('2018-09-10')
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'awesome'
RETURN b
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review {stars: 5.0})
RETURN r
ORDER BY r.date ASC
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Car Wash'})
WHERE b.city = 'Missoula'
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:IN_CATEGORY]->(c:Category)
RETURN DISTINCT c.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]->(r:Review)
RETURN DISTINCT b.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'IPA'
RETURN u, r, b
ORDER BY r.date ASC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b
ORDER BY r.date ASC
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN u.name, r.date
ORDER BY r.date DESC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Beer'})
MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
RETURN r, u, b
ORDER BY r.date ASC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]->(r:Review)
RETURN DISTINCT b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'Love'
RETURN b.name
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.state = 'CA' AND r.text CONTAINS 'great'
RETURN DISTINCT b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2018-09-01') AND r.date <= date('2018-09-30')
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.address IN ['313 N 1st St W', '111 E 5th Ave']
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'breakfast'
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r.reviewId, r.date, r.text, r.stars, b.name, u.name
ORDER BY r.date ASC
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'MT'})
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
WHERE b.city = 'Missoula'
RETURN b.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.address CONTAINS 'California Dr'
RETURN b.name
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: ""Ducky's Car Wash""})
RETURN u
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date = date('2018-09-10')
RETURN b.name, b.businessId
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars > 4
RETURN b.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.address = '201 E Front St'
RETURN DISTINCT u.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS 'California Dr'
RETURN r
ORDER BY r.date ASC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Zootown Brew'})
RETURN r.reviewId, r.date, r.stars, r.text, u.name
ORDER BY r.stars DESC, r.date DESC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)
WHERE r.date >= date('2016-01-01') AND r.date <= date('2016-12-31')
RETURN u.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.state = 'MT'
RETURN b.name, count(r) as reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'great IPA'
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Burlingame'})
RETURN b.name AS BusinessName
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS 'W Broadway St'
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.state = 'CA'
RETURN DISTINCT b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
RETURN b.name, b.businessId, MAX(r.date) AS MostRecentReviewDate
ORDER BY MostRecentReviewDate DESC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Brewery'})
WHERE b.city = 'San Mateo'
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address = '201 E Front St'
RETURN r
ORDER BY r.date ASC
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Missoula'})
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Burlingame'})
RETURN b.name AS BusinessName
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {address: '723 California Dr'})
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {address: '716 N San Mateo Dr'})
RETURN b.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Public Library'})
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'car wash'
RETURN r, u, b
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'selection of books'
RETURN b.name, b.address, b.city, b.state
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date.year = 2017
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars >= 4
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2017-01-01') AND r.date <= date('2017-12-31')
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 5
RETURN b.name, reviewsCount",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'sandwich'
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'Awesome service'
RETURN b.name, b.businessId
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]->(r:Review)
WITH b, count(r) AS reviewsCount
WHERE reviewsCount > 0
RETURN b
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2015-08-01') AND r.date <= date('2015-08-31')
RETURN b.name
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars < 4.0
RETURN r, u, b
ORDER BY r.date
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS ""Farmer's Market""
RETURN r, u, b
ORDER BY r.date ASC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date.month = 9
RETURN DISTINCT b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})
RETURN b
ORDER BY b.name
LIMIT 5",Verbose query,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.state = 'CA'
RETURN b.name AS BusinessName, c.name AS Category",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Coffee'})
WHERE b.city = 'Burlingame'
RETURN b.address",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
WITH b, count(DISTINCT u) AS userCount
WHERE userCount > 1
RETURN b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'selection'
RETURN r, b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})
RETURN b.name, b.address",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date = date('2017-05-03')
RETURN r.text AS ReviewText",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'CA'})
RETURN b.name AS BusinessName, b.address AS Address",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.address CONTAINS '1st St W'
RETURN b.name, b.state",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.city = 'Burlingame'
RETURN b.name AS BusinessName, r.date AS ReviewDate",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'sandwich'
RETURN b.name, b.address, b.city, b.state",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {address: '200 W Pine St'})-[:IN_CATEGORY]->(c:Category)
RETURN c.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Hanabi'})
RETURN u.name AS reviewerName, r.stars AS starRating",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'MT'})-[:REVIEWS]->(r:Review)
WHERE r.date.year = 2016
RETURN b.name, b.address, collect(r.reviewId) AS reviewIds",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address = '111 E 5th Ave'
RETURN b.name, r.text",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Brewery'})
WHERE b.city = 'Missoula'
RETURN b.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {address: '723 California Dr'})-[:REVIEWS]-(r:Review)
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 1",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {address: '716 N San Mateo Dr'})-[:IN_CATEGORY]->(c:Category)
RETURN b, c",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars = 3.0
RETURN r.text AS ReviewText",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, b",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date = date('2018-09-10')
RETURN b.name AS BusinessName, u.name AS UserName",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]->(r:Review)
RETURN b.name, r.stars",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date.year = 2016
RETURN DISTINCT u.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: ""Library""})
WHERE b.state = 'CA'
RETURN b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)<-[:WROTE]-(u:User)
WHERE b.city = 'Burlingame'
RETURN b.address, r.text",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Zootown Brew'})-[:IN_CATEGORY]->(c:Category)
MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
RETURN c.name AS Category, r.text AS ReviewText, r.stars AS ReviewStars",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)
WHERE b.location.latitude > 37
RETURN b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Imagine Nation Brewing'})
RETURN u.name AS UserName",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Missoula'
MATCH (r:Review)-[:REVIEWS]->(b)
WHERE r.text CONTAINS 'IPA'
RETURN b.name, b.address, c.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS 'Main St'
RETURN b.name AS BusinessName, r.stars AS ReviewStars",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {address: '1151 W Broadway St'})-[:IN_CATEGORY]->(c:Category)
RETURN c.name AS CategoryName",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)
RETURN count(r) AS NumberOfReviews",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {address: '723 California Dr'})-[:REVIEWS]-(r:Review)
RETURN b.name, b.businessId",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'MT'})
RETURN b.name, b.address",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Business)
WHERE r.date >= date('2018-09-01') AND r.date <= date('2018-09-30')
RETURN u",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'Pine St'
RETURN b.name AS BusinessName, c.name AS Category",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date < date('2017-01-01')
RETURN r, u.name AS reviewer, b.name AS business",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'breakfast'
RETURN b.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Market on Front'})
RETURN b.state",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)
RETURN b.city, count(b) AS NumberOfBusinesses",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Missoula Public Library'})
RETURN u.name AS UserName",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'IPA'
RETURN b.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {address: '716 N San Mateo Dr'})
RETURN b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.stars > 4.5
RETURN b.name AS BusinessName, r.text AS ReviewText",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {name: ""Ninja Mike's""})
RETURN b.location AS LocationPoint",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)
RETURN u.name AS reviewer_name
ORDER BY r.stars DESC
LIMIT 1",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'Broadway St'
RETURN b.name AS BusinessName, c.name AS Category",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]->(r:Review {stars: 5.0})
RETURN b.name, b.address",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'car wash'
RETURN r, u.name AS reviewer, b.name AS business",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.state = 'CA'
RETURN COUNT(DISTINCT c) AS NumberOfCategories",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2018-08-01') AND r.date <= date('2018-08-31')
RETURN DISTINCT b.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {address: '301 E Main St'})-[:REVIEWS]->(r:Review)
RETURN b.name AS BusinessName, r.date AS ReviewDate",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.city IN ['Missoula', 'San Mateo']
WITH u, collect(DISTINCT b.city) AS cities
WHERE ALL(city IN ['Missoula', 'San Mateo'] WHERE city IN cities)
RETURN u.name AS UserName",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'world leading'
RETURN r, b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Missoula'
WITH c, count(b) AS businessCount
WHERE businessCount > 1
RETURN c.name, businessCount",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.stars = 4.0
RETURN b.name AS BusinessName, b.city AS City",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE b.address CONTAINS 'Pine St'
RETURN r.text AS ReviewText, b.name AS BusinessName",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN u.name AS UserName, b.name AS BusinessName, r.date AS ReviewDate
ORDER BY r.date DESC
LIMIT 1",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
RETURN DISTINCT u.name AS UserName",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Imagine Nation Brewing'})<-[:REVIEWS]-(r:Review)
RETURN r.text AS ReviewText, r.stars AS Stars",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Zootown Brew'})
RETURN u.name AS UserName, r.stars AS StarRating",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName, b.location AS Location",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Burlingame'
RETURN DISTINCT c.name",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address IN ['1151 W Broadway St', '121 W Broadway St']
RETURN r.text AS ReviewText, r.date AS ReviewDate",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'CA'})
RETURN b.name AS BusinessName, b.address AS Address",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.stars < 4
RETURN b.name AS BusinessName, r.text AS ReviewText",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE b.state = 'CA' AND r.date.year = 2016
RETURN b",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {name: 'Neo4j'})-[:REVIEWS]-(r:Review)
RETURN b, r",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Coffee'})
RETURN DISTINCT u.name",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.city = 'Burlingame' AND u.name STARTS WITH 'A'
RETURN b.name, b.address",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS 'E Front St'
RETURN b.name, r.text, r.stars",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(:Category)
WHERE b.name CONTAINS 'Brew'
MATCH (b)<-[:REVIEWS]-(r:Review)
RETURN b.name AS BusinessName, r.text AS ReviewText",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2017-01-01') AND r.date <= date('2017-12-31')
RETURN r",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address = '716 N San Mateo Dr'
RETURN b.name, c.name",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'CA'})
RETURN b.name AS BusinessName, r.text AS ReviewText",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE b.state = 'MT'
RETURN DISTINCT b.name",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.name = 'KettleHouse Brewing Co.'
RETURN b, c",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {name: ""Ducky's Car Wash""})-[:IN_CATEGORY]->(c:Category)
MATCH (b)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
RETURN c.name AS Category, r AS Review, u.name AS User",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
RETURN DISTINCT u.name AS UserName",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.city = 'San Mateo' AND r.text CONTAINS 'car wash'
RETURN b",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Missoula'
RETURN b.name, c.name",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'CA'})
RETURN b.name, b.address, b.city",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS '1st St W'
RETURN r.text AS ReviewText",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.city = 'Missoula' AND b.address STARTS WITH '2'
RETURN b",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName, b.location AS Location",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE c.name = 'Beer'
WITH b
MATCH (b)-[:IN_CATEGORY]->(c2:Category)
WHERE c2.name = 'Coffee'
RETURN b",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WITH b, AVG(r.stars) AS avgRating
ORDER BY avgRating DESC
LIMIT 5
RETURN b.name, avgRating",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS 'Broadway St'
RETURN r.text AS ReviewText, r.date AS ReviewDate",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.address ENDS WITH 'Main St'
RETURN u.name AS ReviewerName",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {state: 'MT'})
RETURN b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS '1st St W'
RETURN b.name AS BusinessName, r.stars AS ReviewStars",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category), (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WHERE b.state = 'CA' AND r.text CONTAINS 'great'
RETURN b.name, b.address, b.city, collect(r.text) AS reviews",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address = '313 N 1st St W'
RETURN b.name AS BusinessName, c.name AS Category",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Neo4j'})
RETURN u.name AS reviewerName, r.stars AS starRating",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WITH b, MIN(r.stars) AS lowestRating
MATCH (u2:User)-[:WROTE]->(r2:Review {stars: lowestRating})-[:REVIEWS]->(b)
RETURN b.name AS BusinessName, r2.text AS ReviewText",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'Front St'
RETURN b.name AS BusinessName, b.address AS Address, c.name AS Category",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.city = 'San Mateo' AND r.date.year = 2017
RETURN b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})
RETURN b.name",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Beer'})
RETURN b",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review {stars: 5.0})
RETURN u",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {address: '301 E Main St'})
RETURN b",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.stars >= 4
RETURN DISTINCT b.name",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
RETURN b.name AS BusinessName, b.city AS City",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
RETURN b.name AS BusinessName, b.address AS Address",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)
RETURN r",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.state = 'CA' AND EXISTS { MATCH (b)-[:REVIEWS]->(:Review) }
RETURN DISTINCT b.name",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Burlingame'
RETURN b.name AS BusinessName, c.name AS Category",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {address: '1151 W Broadway St'})
RETURN u.name AS UserName",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
RETURN b.name, count(r) AS NumberOfReviews
ORDER BY NumberOfReviews DESC",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]->(r:Review)
WHERE r.date > date('2017-01-01')
RETURN b",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
RETURN b.name AS BusinessName, r.text AS ReviewText, r.stars AS Rating",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Coffee'})
WHERE EXISTS {
  (b)<-[:REVIEWS]-(r:Review)
  WHERE r.text CONTAINS 'best'
}
RETURN b",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName, r.text AS ReviewText",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Missoula' AND b.address CONTAINS 'Broadway St'
RETURN b.name AS BusinessName, c.name AS Category",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'great selection'
RETURN r, u.name AS reviewer, b.name AS business",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.date = date('2016-11-21')
RETURN b.name, b.address, b.city, b.state",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2017-10-01') AND r.date <= date('2017-12-31')
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)
WITH u, count{(u)-[:WROTE]->(:Review)} AS reviewsCount
RETURN avg(reviewsCount) AS averageReviewsPerUser",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (r:Review)
WHERE r.text CONTAINS 'selection'
RETURN r",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:IN_CATEGORY]->(c:Category)
WITH b, count(c) AS numCategories
ORDER BY numCategories DESC
LIMIT 1
RETURN b.name, b.address, numCategories",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName, r.date AS ReviewDate",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category)
RETURN DISTINCT c.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Burlingame'})
RETURN count(DISTINCT u) AS NumberOfUsers",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:IN_CATEGORY]->(c:Category)
MATCH (r:Review {stars: 5.0})-[:REVIEWS]->(b)
RETURN b.name, count(r) AS FiveStarReviews
ORDER BY FiveStarReviews DESC
LIMIT 1",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
WITH b, count(DISTINCT u) AS userCount
WHERE userCount = 2
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {address: '301 E Main St'})
RETURN u.name AS UserName",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business {name: 'Zootown Brew'})<-[:REVIEWS]-(r:Review)-[:WROTE]->(u:User)
RETURN r.text AS ReviewText, u.name AS UserName",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
RETURN b.name AS BusinessName, r.date AS ReviewDate
ORDER BY r.date ASC
LIMIT 1",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category)
RETURN b.name AS BusinessName, c.name AS CategoryName",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WITH AVG(r.stars) AS avgStars
MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.stars > avgStars
RETURN b",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)-[:WROTE]->(u:User)
WITH b, count(r) AS reviewsCount, collect(u.name) AS reviewerNames
WHERE reviewsCount = 1
RETURN b.name AS BusinessName, reviewerNames",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Imagine Nation Brewing'})
RETURN u.name AS reviewer, r.stars AS star_rating",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]->(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN b.name, b.address, reviewsCount",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'breakfast'
RETURN b.name, b.address, b.city, b.state",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date = date('2017-05-21')
RETURN u, r, b",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Business)
WITH u, AVG(r.stars) AS avgRating
ORDER BY avgRating DESC
LIMIT 1
RETURN u.name AS userName, avgRating",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH b, count(DISTINCT c) AS numCategories
WHERE numCategories >= 2
RETURN b",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH b, count(c) AS num_categories
ORDER BY num_categories DESC
RETURN b.name, num_categories",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category), (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WHERE b.city = 'Burlingame' AND r.stars = 4.0
RETURN b.location, b.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE u.name STARTS WITH 'J'
RETURN DISTINCT b",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'great'
RETURN b.name, b.address",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Missoula' OR b.city = 'San Mateo'
WITH c, collect(b.city) AS cities
WHERE ALL(city IN ['Missoula', 'San Mateo'] WHERE city IN cities)
RETURN DISTINCT c.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
WITH b
MATCH (r:Review)-[:REVIEWS]->(b)
RETURN count(r) AS NumberOfReviews",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.stars = 4.0
WITH b, count(r) AS reviewsCount
WHERE NOT exists {
    MATCH (b)-[:REVIEWS]->(r2:Review)
    WHERE r2.stars <> 4.0
}
RETURN b.name",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH c, count(DISTINCT b.location) AS locations
WHERE locations > 1
RETURN c.name AS Category, locations",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE u.name IN ['Bob', 'Angie']
WITH b, count(DISTINCT u) AS reviewers
WHERE reviewers = 2
RETURN b.name",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'love'
RETURN b.name, r.stars",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]->(r:Review)-[:WROTE]->(u:User)
WHERE r.text CONTAINS 'library'
RETURN b.name, b.address, r.text, u.name",Complex Aggregation Queries,grandstack,True,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 1
RETURN b.name AS BusinessName, reviewsCount AS NumberOfReviews",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.stars = 5
WITH b, count(r) AS reviewsCount
WHERE NOT exists {
    MATCH (b)-[:REVIEWS]->(r2:Review)
    WHERE r2.stars <> 5
}
RETURN b",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.city = 'San Mateo' AND r.text CONTAINS 'world'
RETURN b",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)
WHERE distance(b.location, point({longitude: -113.995297, latitude: 46.877981})) <= 5000
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'CA'})
WHERE NOT EXISTS {
  (b)<-[:REVIEWS]-(:Review)
}
RETURN b.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WITH u, b, COUNT(r) AS reviews_count
WHERE reviews_count > 1
RETURN u.name AS UserName, b.name AS BusinessName, reviews_count",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 1
MATCH (b)-[:IN_CATEGORY]->(c:Category)
RETURN c.name AS Category, reviewsCount",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE date(r.date).month = 1
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.stars >= 3 AND r.stars <= 4
RETURN b.name, b.address, b.city, b.state, r.stars",Complex Aggregation Queries,grandstack,True,False,False
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
RETURN b.name AS BusinessName, b.address AS Address, r.text AS ReviewText, r.stars AS Stars, u.name AS UserName",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE toLower(r.text) CONTAINS 'ipa'
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars = 3.0
RETURN r.text AS ReviewText, b.name AS BusinessName",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (library:Business {name: 'Missoula Public Library'})
WITH library
MATCH (business:Business {city: 'Missoula'})
WHERE distance(library.location, business.location) <= 1000
RETURN business",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (u:User)
WITH collect(u) AS users
MATCH (b:Business)
WHERE all(u IN users WHERE exists {
    (u)-[:WROTE]->(:Review)-[:REVIEWS]->(b)
})
RETURN b.name AS BusinessName",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.date = date('2018-09-10')
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 1
MATCH (b)-[:REVIEWS]-(r:Review)
RETURN b, collect(r) AS Reviews",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WITH u, b, COUNT(r) AS reviews_count
WHERE reviews_count > 1
RETURN u.name AS UserName, b.name AS BusinessName, reviews_count
ORDER BY u.name, b.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE NOT EXISTS {
    MATCH (b)<-[:REVIEWS]-(r:Review)
    WHERE r.text CONTAINS 'awesome'
}
RETURN DISTINCT c.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date >= date('2016-01-01') AND r.date <= date('2016-12-31')
RETURN r.text AS ReviewText, u.name AS UserName",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {address: '313 N 1st St W'})-[:REVIEWS]->(r:Review)
RETURN b.name AS BusinessName, r.text AS ReviewText",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
RETURN b.name, count(r) AS NumberOfReviews
ORDER BY NumberOfReviews DESC",Complex Aggregation Queries,grandstack,True,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.state = 'CA'
RETURN r",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'E Front St'
RETURN b.name AS BusinessName, c.name AS Category",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
RETURN u.name AS UserName, r.text AS ReviewText",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE distance(b.location, point({longitude: -113.990976, latitude: 46.870035})) <= 2000
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
RETURN b.name AS BusinessName, r.stars AS StarRating
ORDER BY r.stars ASC
LIMIT 1",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)
RETURN r",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.state = 'CA'
RETURN b.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review {text: 'Great IPA selection!'})
RETURN u.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars = 5
RETURN u, r, b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})
RETURN b.address
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Business)
WHERE r.stars = 5
RETURN u",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})
RETURN b.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {address: '301 E Main St'})
RETURN b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})
RETURN count(b) AS NumberOfBusinessesInBurlingame",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, u, b
ORDER BY r.date DESC
LIMIT 5",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
RETURN u.name AS reviewer_name, r.date AS review_date
ORDER BY r.date ASC
LIMIT 1",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {userId: 'u1'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'W Broadway St'
RETURN DISTINCT c.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.stars >= 3.5
RETURN DISTINCT b.name, b.address, b.city, b.state",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: ""Library""})
RETURN b.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Coffee'})
RETURN b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date >= date('2018-01-01') AND r.date < date('2019-01-01')
RETURN b
ORDER BY r.date ASC
LIMIT 3",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business)
WHERE b.state = 'CA'
RETURN DISTINCT u.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Zootown Brew'})
RETURN u.name AS UserName",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business {state: 'MT'})
RETURN b.address",Simple Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
WHERE reviewsCount > 1
RETURN b",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Neo4j'})-[:IN_CATEGORY]->(c:Category)
RETURN c.name",Simple Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.stars > 4.5
RETURN DISTINCT b.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'car wash'
RETURN DISTINCT b.name",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business {name: 'Neo4j'})-[:IN_CATEGORY]->(c:Category)
RETURN count(c) AS NumberOfCategories",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'KettleHouse Brewing Co.'})
RETURN u.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 1",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE NOT exists{ (:User)-[:WROTE]->(:Review)-[:REVIEWS]->(b) }
RETURN b",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName, b.city AS City",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH c, count{(b)-[:REVIEWS]->(:Review)} AS reviewCount
RETURN c.name AS Category, reviewCount AS NumberOfReviews",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WITH u, count(DISTINCT b) AS uniqueBusinesses
RETURN u.name AS userName, uniqueBusinesses
ORDER BY uniqueBusinesses DESC
LIMIT 1",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)-[:IN_CATEGORY]->(c:Category)
WHERE r.date.year = 2018
RETURN DISTINCT c.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WITH b, collect(r.stars) AS stars
WHERE any(star IN stars WHERE star > 4) AND any(star IN stars WHERE star < 4)
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)
WITH b, AVG(r.stars) AS avg_stars
RETURN b.name AS BusinessName, avg_stars
ORDER BY avg_stars DESC
LIMIT 1",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars < 3.5
RETURN u.name AS UserName, r.text AS ReviewText, r.stars AS StarRating, b.name AS BusinessName",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Zootown Brew'})
RETURN b.address AS Address",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
RETURN b.state, count(b) AS NumberOfBusinesses",Complex Aggregation Queries,grandstack,True,False,False
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN DISTINCT b.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date < date('2016-01-01')
RETURN b.name, b.address, b.city, b.state",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WITH b, AVG(r.stars) AS avg_stars
ORDER BY avg_stars DESC
LIMIT 5
RETURN b.name, avg_stars",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE size{(b)<-[:REVIEWS]-(:Review)} = 3
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Missoula'
RETURN DISTINCT c.name",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
RETURN b.city, count(b) AS NumberOfBusinesses",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'sandwich'
RETURN r, u.name AS reviewer, b.name AS business",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
RETURN u.name, count(r) AS reviews_count
ORDER BY reviews_count DESC
LIMIT 1",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, u, b
ORDER BY r.date DESC
LIMIT 3",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Missoula Public Library'})-[:REVIEWS]-(r:Review)
RETURN AVG(r.stars) AS average_rating",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
RETURN u.name AS UserName, count(r) AS ReviewCount",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})
RETURN b.name, b.address",Complex Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Burlingame'
RETURN b, c",Complex Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category)
RETURN c.name AS Category, b.address AS Address",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Market on Front'})-[:REVIEWS]-(r:Review)
RETURN r.text AS ReviewText, r.date AS ReviewDate, r.stars AS Stars",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
RETURN b.name AS BusinessName, r.stars AS Rating",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'CA'})-[:REVIEWS]-(r:Review)
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 1",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.state = 'MT'
RETURN r, b",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})
RETURN b.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE b.address CONTAINS 'E Front St'
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Missoula'})
RETURN DISTINCT u",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.stars >= 4 AND r.stars <= 5
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)
RETURN r",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business)
RETURN count(DISTINCT b) AS NumberOfBusinessesReviewedByBob",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'graph database'
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business)
RETURN DISTINCT b.state",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {name: ""Ducky's Car Wash""})-[:IN_CATEGORY]->(c:Category)
RETURN c.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(:Review)
WITH b, count(*) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN b.name, reviewsCount",Pathfinding Queries,grandstack,True,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.stars = 5.0
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)
WITH collect(u) AS allUsers
MATCH (b:Business)
WHERE all(allUser IN allUsers WHERE exists {
    (allUser)-[:WROTE]->(:Review)-[:REVIEWS]->(b)
})
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category)
RETURN DISTINCT c.name",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)
WHERE b.address = '301 E Main St'
WITH b.location AS referenceLocation
MATCH (other:Business)
WHERE other.location IS NOT NULL
RETURN other.name, distance(referenceLocation, other.location) AS Distance
ORDER BY Distance ASC
LIMIT 1",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date = date('2018-09-10')
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, u, b
ORDER BY r.date ASC
LIMIT 3",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Neo4j'})-[:IN_CATEGORY]->(c:Category)<-[:IN_CATEGORY]-(other:Business)
RETURN other",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, u, b
ORDER BY r.date ASC
LIMIT 5",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2016-01-01') AND r.date <= date('2016-12-31')
RETURN b.name, b.businessId, collect(r.reviewId) AS reviewIds",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
WHERE u.name IN ['Will', 'Jenny']
WITH b, count(DISTINCT u) AS userCount
WHERE userCount = 2
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.name AS BusinessName, r.stars AS StarRating
ORDER BY r.stars ASC
LIMIT 1",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
RETURN b.name AS BusinessName, r.text AS ReviewText, r.stars AS Stars
ORDER BY r.stars DESC
LIMIT 1",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'selection of books'
RETURN b.address",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2018-09-01') AND r.date <= date('2018-09-30')
RETURN b",Pathfinding Queries,grandstack,True,False,False
"MATCH (b:Business {name: 'Zootown Brew'})
WITH b.state AS zootownState
MATCH (review:Review)-[:REVIEWS]->(business:Business)
WHERE business.state = zootownState
RETURN review",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address = '723 California Dr'
RETURN r",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE b.address = '716 N San Mateo Dr'
RETURN r",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE length(r.text) > 100
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'Wifi'
RETURN count(DISTINCT b) AS NumberOfBusinessesWithWifiReviews",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Burlingame'
RETURN DISTINCT c.name",Pathfinding Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r.reviewId, r.date, r.text, r.stars, b.name AS businessName, u.name AS userName
ORDER BY r.date DESC",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WITH u, count(DISTINCT b) AS businessesReviewed
WHERE businessesReviewed > 1
RETURN u.name AS UserName, businessesReviewed",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review)
RETURN r",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'IPA'
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Missoula'
RETURN DISTINCT c.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'car wash'
RETURN b.name, b.address",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'Broadway St'
RETURN DISTINCT c.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category), (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WHERE b.address = '200 W Pine St'
RETURN r, b.name, c.name, u.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: ""Ninja Mike's""})
RETURN u.name AS UserName",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars = 5
RETURN u, r, b",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {address: '301 E Main St'})
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN DISTINCT b.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
RETURN count(b) AS NumberOfLibraries",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address IN ['1151 W Broadway St', '121 W Broadway St']
RETURN b.name, r.text, r.date, r.stars",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WITH b, count(r) AS reviewsCount
WHERE reviewsCount > 1
RETURN b",Pathfinding Queries,grandstack,True,False,False
"MATCH (b:Business {state: 'CA'})
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
RETURN DISTINCT u.name AS UserName",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE distance(b.location, point({address: '301 E Main St'})) <= 1000
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {city: 'Burlingame'})
RETURN DISTINCT u",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Missoula'
RETURN DISTINCT c.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.state = 'CA'
RETURN COUNT(DISTINCT c) AS num_categories",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
RETURN b.name AS BusinessName, avg(r.stars) AS AverageStars
ORDER BY AverageStars DESC
LIMIT 1",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, u, b
ORDER BY r.date DESC
LIMIT 3",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Neo4j'})
RETURN b.address",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})
RETURN b",Pathfinding Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)
WHERE b.address CONTAINS 'E Front St'
RETURN b.address",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
MATCH (r:Review)-[:REVIEWS]->(b)
RETURN b, r",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)-[:WROTE]-(u:User)
WITH b, count(DISTINCT u) AS userCount
WHERE userCount > 1
RETURN b.name, b.address",Pathfinding Queries,grandstack,True,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE exists {
  MATCH (b)-[:IN_CATEGORY]->(c1:Category),
        (b)-[:IN_CATEGORY]->(c2:Category)
  WHERE c1 <> c2
}
RETURN b.name, r.text, r.stars",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
WHERE b.state = 'CA'
RETURN b",Pathfinding Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.state = 'CA'
RETURN r",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)
WHERE distance(b.location, point({address: '301 E Main St'})) <= 1000
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, u, b
ORDER BY r.stars DESC
LIMIT 3",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WITH b, count(r) AS reviewsCount
ORDER BY reviewsCount ASC
LIMIT 1
RETURN b.name AS BusinessName, reviewsCount",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business)
RETURN DISTINCT b.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'San Mateo'
RETURN count(DISTINCT c) AS NumberOfCategories",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)
WHERE r.date >= date('2017-01-01') AND r.date <= date('2017-12-31')
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars < 4
RETURN r, u, b",Pathfinding Queries,grandstack,False,False,True
"MATCH (b1:Business {name: 'Zootown Brew'})
MATCH (b2:Business)
WHERE b1.city = b2.city AND b1.name <> b2.name
RETURN b2",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Missoula Public Library'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User)
RETURN count(DISTINCT u) AS NumberOfUsers",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date >= date('2018-01-01') AND r.date < date('2019-01-01')
RETURN r.text
ORDER BY r.date ASC
LIMIT 1",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.text CONTAINS 'breakfast'
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'KettleHouse Brewing Co.'})-[:IN_CATEGORY]->(c:Category)
RETURN c.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
RETURN b.address AS Address
ORDER BY r.date DESC
LIMIT 1",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)
WHERE b.businessId IN ['b1', 'b2', 'b3']
RETURN b.name",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'full-service'
RETURN u, r, b",Pathfinding Queries,grandstack,True,False,False
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WHERE r.date = date('2017-11-13')
RETURN b.name, b.address, b.city, b.state",Pathfinding Queries,grandstack,True,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review {stars: 5.0})
RETURN DISTINCT b.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business {city: 'San Mateo'})
RETURN DISTINCT u.name AS UserName",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r.reviewId, r.text, length(r.text) AS textLength, b.name
ORDER BY textLength DESC
LIMIT 3",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
WITH b, length(b.name) AS nameLength
ORDER BY nameLength DESC
LIMIT 1
RETURN b.name AS BusinessName, b.location AS Location",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:IN_CATEGORY]->(c:Category)
RETURN count(DISTINCT c) AS NumberOfCategories",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r, u, b
ORDER BY r.date DESC
LIMIT 3",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
RETURN u.name AS UserName, avg(r.stars) AS AverageStars",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
RETURN b.city, count(b) AS NumberOfBusinesses",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WITH b, collect(DISTINCT r.stars) AS uniqueStars
RETURN b.name AS BusinessName, size(uniqueStars) AS Diversity
ORDER BY Diversity DESC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business)
RETURN count(DISTINCT b) AS NumberOfBusinessesReviewedByBob",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Angie'})-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business)
RETURN DISTINCT b.city",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WITH b, AVG(r.stars) AS avg_stars
ORDER BY avg_stars ASC
LIMIT 5
RETURN b.name, avg_stars",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH c, count(b) AS businessCount
WHERE businessCount = 3
RETURN c.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Burlingame'})-[:REVIEWS]-(r:Review)
RETURN b, r",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Beer'})
WITH u, count(DISTINCT b) AS businessesReviewed
ORDER BY businessesReviewed DESC
LIMIT 1
RETURN u.name AS userName, businessesReviewed",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business {name: 'Neo4j'})
RETURN u.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date >= date('2017-01-01') AND r.date <= date('2017-12-31')
RETURN r, u.name AS reviewer, b.name AS business",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)
WHERE NOT exists{ (:Review)-[:REVIEWS]->(b) }
RETURN b.address",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Library'})
RETURN b.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'Missoula'})-[:REVIEWS]-(r:Review)
RETURN b.name, avg(r.stars) AS average_rating
ORDER BY average_rating DESC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (u:User {name: 'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Coffee'})
RETURN r, b",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Burlingame' AND b.address CONTAINS 'California Dr'
RETURN b.name, b.address, c.name",Complex Retrieval Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category), (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b)
WHERE b.city = 'San Mateo' AND r.text CONTAINS 'leading'
RETURN r, b, c, u",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.state = 'MT' AND r.date < date('2017-01-01')
RETURN b.name, b.address",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business {address: '200 W Pine St'})-[:REVIEWS]-(r:Review)
RETURN b, r",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category {name: 'Coffee'})
WHERE b.state = 'CA'
MATCH (r:Review)-[:REVIEWS]->(b)
RETURN b.name, b.address, r.stars",Complex Retrieval Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'Missoula' AND c.name = 'Beer'
RETURN b",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r.text AS review_text
ORDER BY r.stars ASC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r.reviewId, r.text, r.stars, b.name, u.name
ORDER BY r.stars DESC
LIMIT 5",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN b.address AS BusinessAddress",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(:Review)
WITH b, count(*) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN b.name, b.businessId, reviewsCount",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)
RETURN b.name, count(r) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'W Broadway St'
RETURN b.name, b.address, c.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.city = 'Burlingame'
RETURN AVG(r.stars) AS average_stars_rating",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review)
RETURN count(r) AS NumberOfReviews",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
WITH u, count(r) AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 3
RETURN u.name, reviewsCount",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
WITH u, count(r) AS reviewsCount
WHERE reviewsCount > 1
RETURN u",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.city = 'San Mateo'
RETURN DISTINCT c.name",Pathfinding Queries,grandstack,True,False,False
"MATCH (b:Business {city: 'San Mateo'})-[:REVIEWS]-(r:Review)
WITH b, AVG(r.stars) AS avgRating
WHERE avgRating > 4.5
RETURN b.name, avgRating",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.date >= date('2016-01-01') AND r.date <= date('2016-12-31')
RETURN count(r) AS TotalReviewsIn2016",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS ""farmer's market""
RETURN r, u.name AS reviewer, b.name AS business",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business {address: '716 N San Mateo Dr'})
WITH b.location AS referenceLocation
MATCH (nearby:Business)
WHERE distance(nearby.location, referenceLocation) <= 2000
RETURN nearby",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH b, count(c) AS num_categories
ORDER BY num_categories DESC
LIMIT 1
RETURN b.name AS business_name, num_categories",Pathfinding Queries,grandstack,False,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE b.state = 'MT'
RETURN r",Pathfinding Queries,grandstack,False,False,True
"MATCH (u:User {name: 'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars > 4
RETURN b",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)
WITH b, count{(b)<-[:REVIEWS]-(:Review)} AS reviewCount
WHERE reviewCount = 2
MATCH (b)<-[:REVIEWS]-(r:Review)
RETURN b.name, r.text, r.date, r.stars",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.text CONTAINS 'world leading'
RETURN b",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {name: 'Zootown Brew'})
RETURN b.city AS City",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business)<-[:REVIEWS]-(r:Review)-[:WROTE]->(u:User)
WHERE r.text CONTAINS 'comfortable places'
RETURN b.name, b.address, b.city, b.state",Pathfinding Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'MT'})-[:REVIEWS]->(r:Review)
WITH b, count(r) AS reviewsCount
WHERE reviewsCount > 1
RETURN count(b) AS businessesReviewedMoreThanOnce",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]-(r:Review)
WITH b.city AS city, count(r) AS reviewsCount
WHERE reviewsCount = 2
RETURN DISTINCT city",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WITH u, AVG(r.stars) AS avg_stars
ORDER BY avg_stars DESC
LIMIT 1
RETURN u.name AS user, avg_stars",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (r:Review)
WHERE r.stars = 3.5
RETURN count(r) AS NumberOfReviews",Simple Aggregation Queries,grandstack,True,False,False
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.text CONTAINS 'great selection'
RETURN r, u.name AS reviewer, b.name AS business",Pathfinding Queries,grandstack,False,False,False
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WITH b, count(c) AS numCategories
WHERE numCategories > 1
RETURN b",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)
WHERE NOT exists{ (u)-[:WROTE]->(:Review) }
RETURN u",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
RETURN r.reviewId, r.text, b.name
ORDER BY length(r.text) ASC
LIMIT 3",Simple Aggregation Queries,grandstack,False,False,False
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WITH b, collect(DISTINCT r.stars) AS uniqueStars
ORDER BY size(uniqueStars) DESC
RETURN b.name, uniqueStars
LIMIT 3",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)
WITH u, AVG(r.stars) AS avg_stars
ORDER BY avg_stars ASC
LIMIT 1
RETURN u.name AS user, avg_stars",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)
WHERE r.stars = 4.0
RETURN u, r, b",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE b.address CONTAINS 'E Front St'
WITH b, count(r) AS reviewsCount
RETURN b.name, b.address, reviewsCount
ORDER BY reviewsCount DESC
LIMIT 1",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {state: 'CA'})-[:REVIEWS]-(r:Review {stars: 5.0})
RETURN count(DISTINCT b) AS NumberOfBusinessesWithPerfectReviews",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)
WHERE b.address CONTAINS 'Main St'
RETURN DISTINCT c.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (r:Review)
WHERE r.text CONTAINS 'selection'
RETURN r",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business {address: '200 W Pine St'})-[:IN_CATEGORY]->(c:Category)
RETURN c.name",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)
WITH b.city AS city, count(b) AS numBusinesses
ORDER BY numBusinesses ASC
LIMIT 1
RETURN city",Simple Aggregation Queries,grandstack,False,False,True
"MATCH (b:Business)-[:REVIEWS]->(r:Review)
WHERE r.stars < 4.0
RETURN count(DISTINCT b) AS businesses_with_low_ratings",Simple Aggregation Queries,grandstack,True,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1970 AND m.released > 2000
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 2005 AND m.released <= 2010 AND m.tagline = 'Speed has no limits'
RETURN m.title, m.released",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie {title: 'V for Vendetta'})
WHERE p.born > 1960
RETURN p
ORDER BY p.born
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN m.title AS Movie, m.released AS ReleaseYear, collect(p.name) AS ProducersReviewers
ORDER BY m.votes DESC
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED {summary: 'Silly, but fun'}]->(:Movie)
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'compelling' AND m.votes > 50
RETURN m
ORDER BY m.votes DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:PRODUCED]-(p)
RETURN p.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1950 AND p.born < 1960
RETURN m.title, m.released
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Simple Retrieval Queries,movies,True,False,False
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born = 1965
RETURN m.title AS Movie, max(p.rating) AS Rating
ORDER BY Rating DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie), (r:Person)-[rev:REVIEWED]->(m)
WHERE 'Captain' IN a.roles AND rev.rating < 60
RETURN m.title AS MovieTitle, m.released AS ReleaseYear, rev.summary AS ReviewSummary, rev.rating AS ReviewRating
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'real' AND m.released < 2000
RETURN m
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(:Movie)
RETURN p.name AS ActorName
ORDER BY length(p.name) DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE size(r.roles) = 2
RETURN m.title AS Movie, collect(p.name) AS Actors",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN m.title AS Movie, r.summary AS Review, r.rating AS Rating
ORDER BY r.rating DESC",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80
RETURN m.title, r.summary, r.rating",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie {title: 'Speed Racer'})
RETURN p.name AS reviewer, r.rating AS rating",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:FOLLOWS]->(:Person {name: ""Keanu Reeves""})
RETURN p",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(:Movie)
RETURN p.name, p.born
ORDER BY p.born ASC
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {summary: 'An amazing journey'}]-(:Person)
RETURN m",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)
WITH p, count(m) AS movies_written
ORDER BY movies_written DESC
LIMIT 1
RETURN p.name AS writer, movies_written",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.released > 2000
RETURN p.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 1980 AND m.released <= 1989
RETURN m",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie {title: 'Speed Racer'})
RETURN p.name",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(:Movie)
WHERE p.born >= 1960 AND p.born <= 1969
RETURN p",Complex Retrieval Queries,movies,True,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN p.name, count(m) AS movies_reviewed
ORDER BY movies_reviewed DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
RETURN m.title AS Movie, p.roles AS Roles",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:PRODUCED]-(p)-[:ACTED_IN]->(m)
RETURN p.name, collect(m.title) AS movies
ORDER BY size(movies) DESC
LIMIT 3",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE length(m.tagline) > 30
RETURN m.title, m.tagline",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person {name: ""Lana Wachowski""})-[r]->(m)
RETURN p, r, m",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes < 50
RETURN m",Complex Retrieval Queries,movies,True,False,False
"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)
RETURN p.name AS PersonName, count{(p)-[:FOLLOWS]->(:Person)} AS FollowsCount
ORDER BY FollowsCount DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'world'
RETURN m",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN {roles: roles}]->(m:Movie {title: ""The Matrix""})
RETURN roles",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:REVIEWED]-(reviewer:Person)
WHERE reviewer.rating >= 80
RETURN p.name AS Writer, m.title AS Movie
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limits' AND m.released > 2005
RETURN m
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:FOLLOWS]->(other:Person)
WITH p, count(other) AS followsCount
WHERE followsCount > 3
RETURN p.name
ORDER BY followsCount DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = 'An amazing journey' AND r.rating > 80
RETURN p.name, r.summary, r.rating
ORDER BY r.rating DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.votes > 100
WITH p, count(m) AS moviesCount
WHERE moviesCount >= 2
RETURN p.name
ORDER BY moviesCount DESC
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Houston' AND m.released < 2000
RETURN m
LIMIT 5",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born < 1950 AND m.tagline CONTAINS 'journey'
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {summary: 'Dark, but compelling'}]-(p:Person)
WHERE m.released >= 1980 AND m.released <= 1990
RETURN m.title, m.released
ORDER BY m.votes DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.tagline CONTAINS 'real world' AND m.released > 1995
RETURN p
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p:Person)
WHERE m.released IS NOT NULL AND p.summary = 'Pretty funny at times'
RETURN d.name AS Director, count(m) AS MoviesDirected
ORDER BY MoviesDirected DESC
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born = 1967
RETURN m
ORDER BY m.released DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie {tagline: 'Welcome to the Real World'})
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes > 1000
RETURN m.title, m.votes",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released > 2000
RETURN m",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie {title: 'The Matrix'})
RETURN p.name",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released < 1990
RETURN p.name, m.title, m.released",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)
WHERE p.born > 1950
RETURN p",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
RETURN count(m) AS NumberOfMovies",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS MovieTitle, p.name AS PersonName",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {summary: 'Dark, but compelling'}]-(:Person)
RETURN m.title AS MovieTitle",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person {born: 1965})-[:DIRECTED]->(m:Movie)
RETURN p.name, m.title",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE exists{ (p)-[:ACTED_IN]->(m) }
RETURN p.name AS Director, m.title AS Movie",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m
ORDER BY m.votes ASC
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p)
RETURN p.name, m.title",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.released < 1990
RETURN p
ORDER BY p.born DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released >= 1990 AND m.released < 2000
WITH p, count(m) AS movies_count
RETURN p.name AS actor, movies_count
ORDER BY movies_count DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS MovieTitle, p.name AS ProducerDirector",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie {title: 'The Matrix Revolutions'})
RETURN p.name, r.summary",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)
WHERE NOT exists{ (p)-[:ACTED_IN]->(:Movie) }
RETURN p",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 50
RETURN m.title, r.summary, r.rating",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
RETURN p.name AS Director, m.title AS Movie, m.released AS Year
ORDER BY m.released ASC
LIMIT 1",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline STARTS WITH 'The'
RETURN m.title, m.tagline, m.released",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)
RETURN p.name AS person_name, count{(p)<-[:FOLLOWS]-(:Person)} AS followers_count
ORDER BY followers_count DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born < 1970
RETURN m.title, m.released, m.tagline, m.votes
ORDER BY m.votes DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.released > 2000
WITH p, count(m) AS movies_written
ORDER BY movies_written DESC
LIMIT 1
RETURN p.name, movies_written",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie), (p)-[:PRODUCED]->(m)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear",Complex Retrieval Queries,movies,False,False,True
"MATCH (follower:Person)-[:FOLLOWS]->(:Person {name: ""Keanu Reeves""})
MATCH (follower)-[:REVIEWED]->(movie:Movie)
RETURN movie.title AS MovieTitle, movie.released AS ReleaseYear",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name, m.title",Complex Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)<-[:REVIEWED {summary: 'Pretty funny at times'}]-(p:Person)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WITH p, count(DISTINCT a.roles) AS diversity
ORDER BY diversity DESC
LIMIT 1
RETURN p.name AS Actor, diversity AS RoleDiversity",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)
WHERE p.born = 1996
RETURN p",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name, m.title",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released % 10 = 0
RETURN m",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED]-(p:Person)
WHERE m.released < 1985
RETURN m.title AS Movie, p.name AS Reviewer, m.released AS ReleaseYear, collect(p.summary) AS ReviewSummaries",Complex Retrieval Queries,movies,True,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
MATCH (p)-[:DIRECTED]->(m)
MATCH (p)-[:PRODUCED]->(m)
RETURN p.name, m.title",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE size(r.roles) > 3
RETURN m.title, collect(p.name) AS actors, r.roles",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE NOT exists{ (p)-[:ACTED_IN]->(:Movie) }
RETURN p.name",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN {roles: roles}]->(m:Movie {title: ""The Matrix Revolutions""})
RETURN roles",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1950
RETURN m.title, m.released",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(:Movie)
RETURN p.name, p.born
ORDER BY p.born DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED {summary: 'Silly, but fun'}]->(m:Movie)
WITH p, count(m) AS moviesCount
RETURN p.name AS reviewer, moviesCount
ORDER BY moviesCount DESC
LIMIT 1",Complex Retrieval Queries,movies,True,False,False
"MATCH (p:Person)-[r:REVIEWED {summary: 'Fun, but a little far fetched'}]->(m:Movie)
RETURN m",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title, m.released",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN p.name, m.title, size(r.roles) AS num_roles
ORDER BY num_roles DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.title IS NOT NULL AND NOT CONTAINS(m.title, ' ')
RETURN m.title",Complex Retrieval Queries,movies,True,False,False
"MATCH (p:Person {name: ""Joel Silver""})-[:ACTED_IN]->(m:Movie)
RETURN m",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
RETURN p.name, p.born
ORDER BY p.born DESC
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)
WHERE NOT exists{ (p)-[:REVIEWED]->(:Movie) }
RETURN p",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(reviewer)
RETURN p.name AS Producer, m.title AS Movie, MAX(review.rating) AS HighestRating
ORDER BY HighestRating DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,True
"MATCH (:Person)-[r:REVIEWED]->(:Movie)
RETURN r.summary AS ReviewSummary, count(r) AS Count
ORDER BY Count DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:REVIEWED]->(m)
RETURN p.name",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.tagline CONTAINS 'Speed'
RETURN p.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.tagline CONTAINS 'limit'
WITH p, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 1
RETURN p.name, moviesDirected",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie {released: 2012})
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie {title: 'Speed Racer'})
RETURN p.name, r.roles
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person {name: 'Keanu Reeves'})-[r]->(m:Movie)
RETURN p, r, m",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED]-(:Person)
RETURN m.title, count(*) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name, m.title",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:WROTE]-(p)
RETURN p.name, m.title
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released < 1980
RETURN DISTINCT p.born AS BirthYear",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released > 2000
RETURN m
ORDER BY m.votes ASC
LIMIT 1",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born > 1960
RETURN m
ORDER BY m.released DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED {summary: 'Silly, but fun'}]->(:Movie)
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limits'
RETURN m
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real World'
RETURN m",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WITH m, count(r.roles) AS totalRoles
ORDER BY totalRoles DESC
LIMIT 5
RETURN m.title, totalRoles",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
MATCH (p)-[:DIRECTED]->(m)
MATCH (p)-[:PRODUCED]->(m)
RETURN p.name, m.title",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'football'
RETURN m
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:ACTED_IN]-(p)
RETURN p.name, m.title",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person {name: 'Nancy Meyers'})-[:ACTED_IN]->(m:Movie)
RETURN m",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p, count(m) AS moviesProduced
ORDER BY moviesProduced DESC
LIMIT 5
RETURN p.name, moviesProduced",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED {rating: 75}]->(m:Movie)
RETURN m.title AS MovieTitle, p.name AS ReviewerName",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960 AND exists {
  (p)-[:REVIEWED]->(m)
}
RETURN m.title, m.released
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[r:ACTED_IN]->(m)
RETURN p.name, r.roles",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person {born: 1967})-[:REVIEWED]->(m:Movie)
RETURN m
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person {name: ""Nancy Meyers""})-[:ACTED_IN|DIRECTED|PRODUCED|WROTE]->(m:Movie)
RETURN m",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)
RETURN p.name, p.born
ORDER BY p.born
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN p.name, count(m) AS movies_reviewed
ORDER BY movies_reviewed DESC
LIMIT 1",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released = 2003
RETURN m",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes > 1000
RETURN m",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 5",Simple Retrieval Queries,movies,True,False,False
"MATCH (p:Person)
WHERE p.born > 1960
RETURN p
ORDER BY p.born ASC
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
RETURN p.name, m.title, r.rating",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1950
RETURN m
ORDER BY m.released DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
RETURN m.title AS Movie, m.released AS Year, m.tagline AS Tagline, m.votes AS Votes, relationships(p-[:ACTED_IN]->m)[0].roles AS Roles",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person {born: 1952})-[:PRODUCED]->(m:Movie)
RETURN m
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie {tagline: 'Welcome to the Real World'})
RETURN p.name",Simple Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)<-[r:REVIEWED {summary: 'Dark, but compelling'}]-(p:Person)
RETURN m.title, m.released, count(p) AS reviewCount
ORDER BY reviewCount DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, count(m) AS moviesDirected
WHERE moviesDirected > 1
RETURN p.name, moviesDirected",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m
ORDER BY m.votes ASC
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:FOLLOWS]->(:Person {name: ""Keanu Reeves""})
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(:Movie)
WHERE exists {
    MATCH (p)-[:ACTED_IN]->(:Movie)
}
RETURN p",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.released DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released <= 1999
RETURN m",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie {title: 'The Matrix'})
RETURN p.name AS WriterName",Simple Retrieval Queries,movies,True,False,False
"MATCH (p:Person)
WHERE p.born = 1964
RETURN p
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 50
RETURN m.title, r.summary, r.rating",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person {name: ""Carrie-Anne Moss""})-[:ACTED_IN {roles: roles}]->(m:Movie {title: ""The Matrix Revolutions""})
RETURN roles",Simple Retrieval Queries,movies,True,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released >= 2000 AND m.released < 2010
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person {name: 'Joel Silver'})-[:DIRECTED]->(m:Movie)
RETURN m",Simple Retrieval Queries,movies,False,False,True
"MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)<-[:FOLLOWS]-(p1)
RETURN p1, p2",Simple Retrieval Queries,movies,False,False,True
"MATCH (oldest:Person)
WHERE oldest.born = (SELECT min(p.born) FROM Person p)
MATCH (oldest)-[:ACTED_IN]->(m:Movie)
RETURN m
ORDER BY m.released DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
RETURN p.name, p.born
ORDER BY p.born ASC
LIMIT 5",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED {rating: 85}]->(m:Movie)
RETURN m.title AS MovieTitle, p.name AS ReviewerName, r.summary AS ReviewSummary",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p)
RETURN p.name, collect(m.title) AS Movies
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie {tagline: 'Speed has no limits'})
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person {name: 'Joel Silver'})-[:REVIEWED]->(m:Movie)
RETURN m.title, m.released, m.tagline, m.votes
ORDER BY m.votes DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1970
RETURN m.title AS MovieTitle, m.released AS ReleaseYear",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE exists {
  (p)-[:REVIEWED]->(m)
}
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie {title: 'Speed Racer'})
RETURN p.name, r.roles",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p, count(m) AS moviesProduced
WHERE moviesProduced >= 3
RETURN p.name, moviesProduced",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released = 1999
RETURN m.title
ORDER BY m.votes DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person {born: 1960})-[:REVIEWED]->(m:Movie)
RETURN m
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'freedom'
RETURN m.title, m.tagline",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released > 2000
RETURN m
ORDER BY m.votes DESC
LIMIT 5",Simple Retrieval Queries,movies,True,False,False
"MATCH (p:Person)-[:DIRECTED]->(:Movie)
WHERE p.born > 1970
RETURN p
ORDER BY p.born ASC
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released <= 2000 AND m.votes > 100
RETURN m",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie {tagline: 'Everything is connected'})
RETURN p.name
LIMIT 5",Simple Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)<-[:REVIEWED {rating: r}]-(p:Person)
WHERE m.released < 1985 AND r > 90
RETURN m.title, m.released, r
ORDER BY r DESC
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person {born: 1967})-[:PRODUCED]->(m:Movie)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
ORDER BY m.released
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE m.tagline CONTAINS 'Houston'
RETURN d.name, count(m) AS movies_directed
ORDER BY movies_directed DESC
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:REVIEWED]->(m:Movie {title: 'Apollo 13'})
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 200
RETURN p.name, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie {released: 1996})
RETURN m
ORDER BY m.title
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:FOLLOWS]->(followed:Person {born: 1956})
RETURN p.name AS Name
ORDER BY p.name
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person {name: 'Carrie-Anne Moss'})-[:ACTED_IN]->(m:Movie)
RETURN m.title
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN p.name, count(m) AS movies_reviewed
ORDER BY movies_reviewed DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie {title: 'The Matrix Revolutions'})
WHERE exists{ (p)-[:PRODUCED]->(m) }
RETURN p.name",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released = 2008
RETURN m
ORDER BY m.title
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)
RETURN p, count{(p)<-[:FOLLOWS]-(:Person)} AS followers
ORDER BY followers DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN p, m
ORDER BY r.rating ASC
LIMIT 1",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE size(r.roles) > 1
RETURN m.title, collect(p.name) AS actors, r.roles",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released >= 1990 AND m.released < 2000
RETURN p
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.votes > 500
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released < 1985
RETURN m
ORDER BY m.released DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'journey'
RETURN m
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 5
RETURN p.name, moviesDirected",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN p.name, m.title, size(r.roles) AS num_roles
ORDER BY num_roles DESC
LIMIT 1",Simple Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)<-[:REVIEWED {summary: 'Fun, but a little far fetched'}]-(p:Person)
RETURN m.title, m.released, m.tagline
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born = 1949
RETURN p, collect(m) AS DirectedMovies",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie {title: ""Something's Gotta Give""})
RETURN p.name
LIMIT 3",Simple Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.released = 2001
RETURN m",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN m.title, count(r.roles) AS total_roles
ORDER BY total_roles DESC
LIMIT 5",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:REVIEWED]->(:Movie)
WHERE p.born = 1980
RETURN p
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE exists {
  (p)-[:REVIEWED]->(m)
}
RETURN m.title AS MovieTitle, collect(p.name) AS ReviewingActors",Simple Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(:Movie)
WHERE exists{ (p)-[:FOLLOWS]->(:Person) }
RETURN p
LIMIT 3",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'compelling'
RETURN m",Simple Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
RETURN p.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 1",Simple Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released < 2000
RETURN m
ORDER BY m.votes DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,False
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WITH d, count{(d)-[:FOLLOWS]->(:Person)} AS followers
ORDER BY followers DESC
LIMIT 1
MATCH (d)-[:DIRECTED]->(movie:Movie)
RETURN movie
LIMIT 3",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN m.title AS MovieTitle, p.name AS ProducerReviewer",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = 'Pretty funny at times'
RETURN p.name
LIMIT 3",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.tagline CONTAINS 'Robin Williams'
RETURN p.name
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)-[r:REVIEWED]->()
WHERE m.tagline CONTAINS 'end' AND r.rating > 75
RETURN m.title, m.tagline, r.rating
ORDER BY m.released
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(reviewer:Person)
WHERE p.born < 1960 AND EXISTS {
  (reviewer)-[:REVIEWED]->(m {summary: 'Dark, but compelling'})
}
RETURN m.title AS MovieTitle
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE m.tagline CONTAINS 'Real World'
RETURN d.name, count(m) AS movies_directed
ORDER BY movies_directed DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE d.born > 1970 AND m.tagline CONTAINS 'fun'
RETURN m.title, m.tagline, m.released
ORDER BY m.released
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (director:Person)-[:DIRECTED]->(movie:Movie)<-[:ACTED_IN]-(actor:Person)
WHERE (director.born - director.born % 10) = (actor.born - actor.born % 10)
RETURN movie.title AS Movie, director.name AS Director, actor.name AS Actor
ORDER BY movie.votes DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (actor:Person)-[:ACTED_IN]->(m:Movie)<-[:PRODUCED]-(producer:Person)
WHERE actor.born > 1980 AND producer.born < 1950
RETURN actor.name, m.title
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person {name: 'Lana Wachowski'})-[:PRODUCED]->(m:Movie)
RETURN m
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)
WHERE p1.born = p2.born
RETURN p1
LIMIT 5",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1950 AND m.tagline CONTAINS 'limits'
RETURN p.name
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(d)
RETURN d.name AS Director, count(m) AS MoviesReviewedAndDirected
ORDER BY MoviesReviewedAndDirected DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person {name: 'Keanu Reeves'})-[:PRODUCED]->(m:Movie)
RETURN m
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:REVIEWED {summary: 'Slapstick redeemed only by the Robin Williams and '}]-(reviewer:Person)
RETURN p.name AS Actor, count(m) AS MoviesReviewed
ORDER BY MoviesReviewed DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born > 1975 AND m.released > 2005
RETURN p.name
ORDER BY p.born
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE exists{(p)-[:ACTED_IN]->(m)}
RETURN m.title AS Movie, m.released AS ReleaseYear
ORDER BY m.released DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person {name: 'Joel Silver'})-[:ACTED_IN]->(m:Movie)
RETURN m
ORDER BY m.released
LIMIT 3",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes < 50
RETURN p.name
LIMIT 5",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:REVIEWED {summary: 'An amazing journey'}]->(:Movie)
WHERE p.born > 1970
RETURN p
LIMIT 3",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name, m.title
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WHERE p.born > 1970
WITH m, count(a.roles) AS totalRoles
ORDER BY totalRoles DESC
LIMIT 5
RETURN m.title, totalRoles",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born < 1950 AND r.rating < 50
RETURN p.name, p.born, m.title, r.rating
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.tagline CONTAINS 'Real World'
RETURN p.name
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE exists {
  (p)-[:REVIEWED]->(m)
}
RETURN m.title AS MovieTitle
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.tagline = 'Welcome to the Real World' AND m.released > 1995
RETURN m
ORDER BY m.released DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie {title: 'Speed Racer'})
RETURN p.name, r.summary",Complex Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m.title
ORDER BY m.votes DESC
LIMIT 5",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.tagline CONTAINS 'beginning'
WITH p, count(m) AS moviesCount
WHERE moviesCount > 1
RETURN p
LIMIT 3",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)-[r:REVIEWED]->()
WHERE m.tagline CONTAINS 'journey' AND r.rating > 85
RETURN m.title, m.tagline, r.rating
ORDER BY r.rating DESC
LIMIT 3",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:FOLLOWS]->(lf:Person {name: 'Laurence Fishburne'})
MATCH (lf)-[:FOLLOWS]->(p)
RETURN p.name
LIMIT 5",Complex Retrieval Queries,movies,False,False,False
"MATCH (director:Person {born: 1965})-[:DIRECTED]->(movie:Movie)<-[:ACTED_IN]-(actor:Person {born: 1952})
RETURN movie
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE p.born < 1980 AND m.tagline CONTAINS 'speed'
RETURN p
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WHERE m.released < 1990
WITH p, count(a.roles) AS total_roles
ORDER BY total_roles DESC
LIMIT 3
RETURN p.name AS actor, total_roles",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:ACTED_IN]-(p)
RETURN p.name, m.title
LIMIT 3",Complex Retrieval Queries,movies,True,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born > 1960 AND m.tagline CONTAINS 'football'
RETURN m.title, m.tagline, m.released
ORDER BY m.votes DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.votes > 2000
RETURN p.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)
WHERE p.born > 1970
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {rating: r}]-(p:Person)
WHERE m.released > 2000 AND r > 80
RETURN m.title, m.released, p.name, r",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED]-(:Person)
RETURN m.title, count{(m)<-[:REVIEWED]-(:Person)} AS reviewCount
ORDER BY reviewCount DESC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (follower:Person)-[:FOLLOWS]->(keanu:Person {name: ""Keanu Reeves""})
WHERE exists {
    (follower)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(keanu)
}
RETURN follower",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE exists {
  (p)-[:DIRECTED]->(m)
} AND exists {
  (p)-[:WROTE]->(m)
}
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1980
RETURN AVG(m.rating) AS average_rating",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN m.title AS Movie, p.name AS Actor, r.roles AS Roles
ORDER BY m.votes DESC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.tagline CONTAINS 'beginning'
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m.title, m.released
ORDER BY m.votes ASC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (p1:Person)-[r1:REVIEWED]->(m:Movie)<-[r2:REVIEWED]-(p2:Person)
WHERE p1 <> p2
RETURN p1.name AS Reviewer1, p2.name AS Reviewer2, m.title AS Movie, r1.summary AS Review1, r2.summary AS Review2",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WHERE p.born IS NOT NULL
RETURN p.name, p.born, collect(m.title) AS movies
ORDER BY p.born ASC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
RETURN m.title, m.released
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released = 1996
RETURN m.tagline
ORDER BY m.votes DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
RETURN p.name, p.born, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = 'Fun, but a little far fetched'
RETURN m.title, r.rating",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 1980 AND m.released <= 1989
RETURN avg(m.votes) AS average_votes",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:FOLLOWS]->(followed:Person)
WHERE followed.born >= 1960 AND followed.born < 1970
RETURN followed
ORDER BY followed.born
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (d:Person {name: ""Nancy Meyers""})-[:DIRECTED]->(m:Movie)
WITH m
ORDER BY m.released
LIMIT 3
MATCH (a:Person)-[r:ACTED_IN]->(m)
RETURN m.title AS Movie, a.name AS Actor, r.roles AS Roles",Simple Aggregation Queries,movies,True,False,False
"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released > 2000
WITH p, count(m) AS moviesDirected, collect(m.title) AS movieTitles
ORDER BY moviesDirected DESC
LIMIT 1
RETURN p.name AS Director, moviesDirected, movieTitles",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie {title: 'Speed Racer'})
RETURN p.name
ORDER BY p.born DESC
LIMIT 5",Complex Retrieval Queries,movies,True,False,False
"MATCH (m:Movie)<-[:REVIEWED {rating: r}]-(p:Person)
WHERE r < 50
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
RETURN p.name, p.born
ORDER BY p.born DESC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:FOLLOWS]->(followed:Person)
RETURN followed.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.released < 2010
RETURN m.title, m.released, relationships(p-[:ACTED_IN]->m)[0].roles AS roles",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m.title, m.tagline, m.votes
ORDER BY m.votes ASC
LIMIT 1",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
RETURN p.name, count(m) AS directedMovies
ORDER BY directedMovies DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie {title: ""The Matrix""})
RETURN p.name AS reviewer_name, r.rating AS rating",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p, count(m) AS moviesProduced
ORDER BY moviesProduced DESC
LIMIT 1
MATCH (p)-[:PRODUCED]->(movie:Movie)
RETURN p.name, collect(movie.title) AS movies",Simple Aggregation Queries,movies,True,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie {title: ""Something's Gotta Give""})
RETURN count(p) AS NumberOfActors",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'real' AND m.released >= 2000 AND m.released < 2010
RETURN m.title, m.released, m.tagline",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[r:REVIEWED]-(:Person)
WITH m, AVG(r.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 5
RETURN m.title, avgRating",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1950
RETURN p.name, collect(m.title) AS DirectedMovies
ORDER BY p.born
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {summary: 'Dark, but compelling'}]-(:Person)
RETURN m.title",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS MovieTitle",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.released < 1990
RETURN count(DISTINCT p) AS reviewers_count",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL
RETURN m
ORDER BY m.released DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 1
MATCH (p)-[:ACTED_IN]->(movie:Movie)
RETURN p.name, collect(movie.title) AS movie_titles",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person {name: ""Laurence Fishburne""})-[:REVIEWED]->(m:Movie)
RETURN m.title AS Movie, m.rating AS Rating
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
RETURN m
ORDER BY m.votes DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person {born: 1996})-[:ACTED_IN]->(m:Movie)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
ORDER BY m.released
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary = 'Silly, but fun' AND m.tagline CONTAINS 'world'
RETURN m.title, m.tagline, r.summary
LIMIT 3",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1980 AND m.released < 2000
RETURN p
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN p.name AS reviewer, m.title AS movie, r.rating AS rating
ORDER BY r.rating DESC
LIMIT 1",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:ACTED_IN]-(p)
RETURN p.name
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie {title: 'The Matrix'})
WITH p, r.roles AS roles
RETURN avg(size(roles)) AS average_roles_per_actor",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born >= 1950 AND p.born < 1960
RETURN m.title, m.released",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:FOLLOWS]->(actor:Person)
WITH actor, count(p) AS followers
ORDER BY followers DESC
LIMIT 3
RETURN actor.name, followers",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {summary: 'Silly, but fun'}]-(:Person)
RETURN m.title",Complex Aggregation Queries,movies,True,False,False
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WITH m, count(DISTINCT p) AS reviewers_count
WHERE reviewers_count > 3
RETURN m.title AS Movie, reviewers_count",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN p.name, r.roles, m.title, m.released",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(:Movie)
WHERE p.born > 1960
RETURN p.name, p.born
ORDER BY p.born
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born = (SELECT min(p2.born) FROM (MATCH (p2:Person) RETURN p2))
RETURN m.title AS MovieTitle",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL
RETURN m
ORDER BY m.tagline DESC
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name, m.title",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released >= 1990 AND m.released <= 2000
RETURN p.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released % 10 = 0
RETURN m.title
ORDER BY m.released
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1970 AND m.released < 1990
RETURN p.name
ORDER BY p.born ASC
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes > 500
RETURN m
ORDER BY m.votes DESC
LIMIT 5",Verbose query,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, AVG(r.rating) AS avgRating
RETURN p.name AS reviewer, avgRating
ORDER BY avgRating DESC
LIMIT 1",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.tagline CONTAINS 'real'
RETURN p.name
LIMIT 3",Verbose query,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE exists {
    (p)-[:ACTED_IN]->(m)
}
RETURN m.title AS MovieTitle",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, count(m) AS actedInMovies
MATCH (p)-[:DIRECTED]->(m:Movie)
WITH p, actedInMovies, count(m) AS directedMovies
WHERE actedInMovies > 0 AND directedMovies > 0
RETURN p.name, actedInMovies, directedMovies
ORDER BY actedInMovies + directedMovies DESC
LIMIT 1",Complex Aggregation Queries,movies,False,False,True
"MATCH (director:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(movie:Movie)<-[:ACTED_IN]-(actor:Person)
RETURN actor.name AS ActorName",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE exists {
  (p)-[:REVIEWED]->(m)
}
RETURN m.title AS MovieTitle",Complex Aggregation Queries,movies,True,False,False
"MATCH (p:Person)-[:DIRECTED]->(:Movie)
WHERE p.born > 1950
RETURN p
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating >= 70 AND r.rating <= 85
RETURN m.title, m.released, avg(r.rating) AS averageRating
ORDER BY averageRating DESC
LIMIT 5",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WITH m, count(p) AS num_actors
WHERE num_actors > 3
RETURN m.title AS Movie, num_actors",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)
WHERE size((p)-[:FOLLOWS]->(:Person)) > 5
RETURN p.name",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)
WHERE p.born >= 1980 AND p.born <= 1989
WITH p, count{(p)<-[:FOLLOWS]-(:Person)} AS followers
RETURN avg(followers) AS average_followers",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m
ORDER BY m.votes ASC
LIMIT 5",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1970
RETURN m.title, m.released",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED {summary: 'Fun, but a little far fetched'}]->(m:Movie)
RETURN m.title
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1980
RETURN m.title, m.released",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name, m.title",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, count(DISTINCT m) AS movies_count
ORDER BY movies_count DESC
RETURN p.name, movies_count
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE m.released > 2000
RETURN DISTINCT m.title, p.summary",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'journey'
RETURN m
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.released >= 1990 AND m.released < 2000
WITH p, count(m) AS productions
RETURN p.name AS Producer, productions
ORDER BY productions DESC
LIMIT 1",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
RETURN p.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 3",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie {tagline: 'Speed has no limits'})
RETURN m.title AS MovieTitle, collect(p.name) AS Producers",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
RETURN m.title, r.rating
ORDER BY r.rating DESC
LIMIT 3",Verbose query,movies,True,False,False
"MATCH (p:Person)-[:REVIEWED]->(:Movie), (p)-[:ACTED_IN]->(m:Movie)
WHERE m.tagline CONTAINS 'no limits'
RETURN p.name
LIMIT 3",Verbose query,movies,True,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'speed' AND m.votes > 500
RETURN m
ORDER BY m.votes DESC
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)
WHERE p1.born - p2.born >= 20
RETURN p1
LIMIT 3",Verbose query,movies,False,False,False
"MATCH (m:Movie)<-[:REVIEWED {rating: r}]-(p:Person)
WHERE m.released < 1985 AND r > 85
RETURN m.title, m.released, m.tagline, collect(p.name) AS reviewers
ORDER BY m.released DESC
LIMIT 5",Verbose query,movies,True,False,False
"MATCH (p:Person)-[:PRODUCED]->(:Movie)
WHERE size((p)-[:FOLLOWS]->()) > 2
RETURN p.name
LIMIT 3",Verbose query,movies,True,False,False
"MATCH (m:Movie)
WHERE m.released > 2000 AND m.votes > 1000
RETURN m.title
ORDER BY m.votes DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1970 AND m.released < 1980
RETURN p.name
ORDER BY p.born ASC
LIMIT 3",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {rating: r}]-(p:Person)
WHERE m.tagline = 'Dark, but compelling' AND r > 90
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
ORDER BY m.released DESC
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:REVIEWED]-(p)
RETURN m.title AS Movie, collect(p.name) AS WritersReviewers
ORDER BY m.votes DESC
LIMIT 5",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.tagline CONTAINS 'limits'
RETURN p.name
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released < 2000
RETURN m
ORDER BY m.votes DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:REVIEWED]->(m:Movie {tagline: 'Fun, but a little far fetched'})
RETURN p.name
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie {released: 1999})
RETURN p.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
RETURN m
ORDER BY m.released
LIMIT 3",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:FOLLOWS]->(followed:Person {born: 1961})
RETURN p.name, count(p) AS follows_count
ORDER BY follows_count DESC
LIMIT 3",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person {born: 1952})-[:ACTED_IN]->(m:Movie)
WHERE m.votes IS NOT NULL
RETURN m
ORDER BY m.votes ASC
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:REVIEWED]->(m:Movie {title: 'The Matrix Revolutions'})
RETURN p.name
LIMIT 3",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960
RETURN m
ORDER BY m.released
LIMIT 3",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960
WITH p, count(m) AS moviesProduced
WHERE moviesProduced > 1
RETURN p.name, moviesProduced
ORDER BY moviesProduced DESC
LIMIT 5",Verbose query,movies,True,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.tagline CONTAINS 'limit'
WITH p, count(m) AS movies_count
WHERE movies_count > 3
RETURN p.name
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m1:Movie)
WHERE exists {
    (p)-[:ACTED_IN]->(m2:Movie)
    WHERE m1 <> m2
}
RETURN p
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[r:DIRECTED|PRODUCED]->(m:Movie)
WHERE m.released >= 2000 AND m.released < 2010
WITH m, COUNT(r) AS involvementCount
ORDER BY involvementCount DESC, m.released DESC
RETURN m.title, m.released, involvementCount
LIMIT 5",Verbose query,movies,False,False,True
"MATCH (p:Person)
WHERE size((p)-[:FOLLOWS]->(:Person)) > 3
RETURN p
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released > 2000
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 5",Verbose query,movies,False,False,False
"MATCH (p:Person)-[:WROTE]->(:Movie)
WHERE p.born >= 1950 AND p.born <= 1959
RETURN p
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'journey' AND m.released < 2000
RETURN m
ORDER BY m.released
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS Movie, p.name AS ProducerDirector
ORDER BY m.votes DESC
LIMIT 5",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2010 AND p.born > 1980
RETURN p.name, p.born, m.title, m.released
ORDER BY m.released ASC
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released > 1990
RETURN d.name, d.born, m.title, m.released
ORDER BY d.born ASC
LIMIT 5",Verbose query,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED {summary: 'Dark, but compelling'}]->(m:Movie)
RETURN m
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(:Movie)
WHERE p.name STARTS WITH 'J'
RETURN p
LIMIT 3",Verbose query,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1960 AND m.votes < 100
RETURN m
ORDER BY m.votes DESC
LIMIT 5",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.name ENDS WITH 'son' AND m.released > 2000
RETURN m.title, m.released
ORDER BY m.released ASC
LIMIT 3",Verbose query,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 50
RETURN p.name, COUNT(m) AS movies_reviewed
ORDER BY movies_reviewed DESC
LIMIT 5",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born >= 1940 AND p.born < 1950
RETURN m
ORDER BY m.released DESC
LIMIT 5",Verbose query,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {summary: 'Silly, but fun'}]-(p:Person)
WHERE m.released >= 1990 AND m.released < 2000
RETURN m
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WITH p, count(DISTINCT m) AS moviesCount, collect(a.roles) AS roles
WHERE moviesCount >= 5
UNWIND roles AS roleList
WITH p, moviesCount, reduce(totalRoles = 0, r IN roleList | totalRoles + size(r)) AS totalRoles
RETURN p.name AS Actor, moviesCount AS MoviesCount, totalRoles AS TotalRoles
ORDER BY totalRoles DESC
LIMIT 5",Verbose query,movies,False,False,True
"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:ACTED_IN]-(p)
RETURN p.name AS PersonName",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)
WITH p, count{(p)<-[:FOLLOWS]-(:Person)} AS followersCount
ORDER BY followersCount DESC
LIMIT 1
MATCH (follower:Person)-[:FOLLOWS]->(p)
RETURN p.name AS MostFollowedPerson, collect(follower.name) AS Followers",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN p.name, count(r) AS reviews_count
ORDER BY reviews_count DESC
LIMIT 5",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE m.released >= 1990 AND m.released < 2000
UNWIND r.roles AS role
RETURN role, COUNT(role) AS role_count
ORDER BY role_count DESC",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born >= 1960 AND p.born < 1970
RETURN p, collect(m) AS movies",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE size(r.roles) = 3
RETURN m.title AS MovieTitle, collect(p.name) AS Actors",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline ENDS WITH 'world'
RETURN m.title, m.tagline",Complex Aggregation Queries,movies,True,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN m.title AS Movie, r.rating AS Rating
ORDER BY r.rating ASC
LIMIT 5",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
WITH m ORDER BY m.votes DESC LIMIT 1
MATCH (p:Person)-[:ACTED_IN]->(m)
RETURN p.name AS ActorName",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p, count(m) AS moviesProduced
WHERE moviesProduced > 3
RETURN p.name, moviesProduced",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN {roles: roles}]->(m:Movie {title: ""The Matrix Revolutions""})
RETURN roles",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1950
RETURN m.title, m.released",Complex Aggregation Queries,movies,False,False,False
"MATCH (reviewer:Person)-[r:REVIEWED]->(movie:Movie)
WHERE reviewer.born IS NOT NULL
WITH movie, r, reviewer
ORDER BY reviewer.born DESC
LIMIT 3
RETURN movie.title AS MovieTitle, movie.released AS ReleaseYear, r.rating AS Rating, r.summary AS Summary, reviewer.name AS ReviewerName, reviewer.born AS ReviewerBirthYear",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released > 2000
WITH p, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 1
RETURN p.name AS director, movies_count",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE exists {
    (p:Person)-[:REVIEWED]->(m)
}
WITH m, count{(p:Person)-[:REVIEWED]->(m)} AS reviewsCount
WHERE reviewsCount > 1
RETURN m",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
UNWIND m.roles AS role
RETURN role, count(*) AS frequency
ORDER BY frequency DESC",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH m, count(DISTINCT p.born) AS diversity
ORDER BY diversity DESC
LIMIT 5
RETURN m.title, diversity",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)
MATCH (p)-[:DIRECTED]->(m)
MATCH (p)-[:PRODUCED]->(m)
RETURN p.name, m.title",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating = 100
RETURN m.title AS MovieTitle, p.name AS ReviewerName",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie), (p)-[:PRODUCED]->(m)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN p.name, m.title, size(r.roles) AS num_roles
ORDER BY num_roles DESC
LIMIT 1",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN m.title, count(r.roles) AS total_roles
ORDER BY total_roles DESC
LIMIT 5",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:FOLLOWS]->(followed:Person)
RETURN followed",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 50
RETURN p",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)-[:ACTED_IN]->(m)
RETURN p.name, m.title",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {summary: 'Dark, but compelling'}]-(:Person)
RETURN m",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)
RETURN p, count{(p)<-[:FOLLOWS]-(:Person)} AS followers
ORDER BY followers DESC
LIMIT 1",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes >= 100 AND m.votes <= 500
RETURN m",Complex Aggregation Queries,movies,False,False,True
"MATCH (reviewer:Person)-[:REVIEWED]->(movie:Movie)<-[:DIRECTED]-(director:Person {name: ""Lana Wachowski""})
RETURN DISTINCT reviewer.name",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
RETURN p.name, p.born
ORDER BY p.born DESC
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH m, count(p) AS producers_count
WHERE producers_count > 1
RETURN m.title AS Movie, producers_count",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.released DESC
LIMIT 5",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(director:Person {name: ""Lana Wachowski""})
RETURN p.name AS Actor",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(:Movie)
RETURN p.name, p.born
ORDER BY p.born ASC
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE m.released < 2000
RETURN m.title, r.roles",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p)
RETURN p.name, m.title, a.roles, r.summary, r.rating",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(:Movie)
WHERE exists{ (p)-[:FOLLOWS]->(:Person) }
RETURN p.name",Complex Aggregation Queries,movies,False,False,True
"MATCH (:Person)-[r:REVIEWED]->(:Movie)
RETURN DISTINCT r.summary",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WHERE m.released < 1980
RETURN p.name, collect(m.title) AS movies, count(a) AS roles_count
ORDER BY roles_count DESC
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS Movie, p.name AS ProducerDirector",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {summary: 'Fun, but a little far fetched'}]-(:Person)
RETURN m",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(:Movie)
WHERE p.born > 1980
RETURN p.name
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie {title: ""Something's Gotta Give""})
RETURN p.name AS writer, m.released AS releaseYear",Verbose query,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m
ORDER BY m.votes ASC
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(:Movie), (p)-[:PRODUCED]->(:Movie)
RETURN DISTINCT p.name
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limit'
RETURN m.title, m.tagline",Verbose query,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN p.name AS reviewer, r.summary AS review_summary, r.rating AS rating
ORDER BY r.rating DESC
LIMIT 1",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS MovieTitle, p.name AS PersonName",Verbose query,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN m.title, avg(r.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
RETURN p.name, p.born
ORDER BY p.born DESC
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie {title: 'Speed Racer'})
RETURN p.name, r.roles",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m1:Movie)
WHERE exists {
    (p)-[:ACTED_IN]->(m2:Movie)
    WHERE m1 <> m2
}
RETURN p.name
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, count(m) AS moviesDirected
WHERE moviesDirected > 2
RETURN count(p) AS directorsCount",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS MovieTitle, p.name AS ProducerDirector",Verbose query,movies,False,False,True
"MATCH (p:Person)
RETURN p, count{(p)--()} AS totalRelationships
ORDER BY totalRelationships DESC
LIMIT 1",Verbose query,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
RETURN m.title
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.released ASC
LIMIT 3",Verbose query,movies,True,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'real'
RETURN m.title, m.tagline
LIMIT 3",Verbose query,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS Movie, p.name AS Person",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.title AS MovieTitle",Verbose query,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN {roles: roles}]->(m:Movie {title: ""The Matrix""})
RETURN roles",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.title IN ['The Matrix', 'Speed Racer']
WITH p, count(m) AS movies_count
WHERE movies_count = 2
RETURN p.name",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
WHERE exists {
  (p)-[:REVIEWED]->(m)
}
RETURN m.title AS MovieTitle, m.released AS ReleaseYear",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes > 1000
RETURN p.name AS Director, m.title AS Movie",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.released ASC
LIMIT 5",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie {title: 'Speed Racer'})
RETURN p.name, r.roles",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WITH m, count(p) AS reviewers_count
WHERE reviewers_count > 2
RETURN m.title AS Movie, reviewers_count",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 2000 AND m.released <= 2010
RETURN m
ORDER BY m.released DESC
LIMIT 5",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie {title: 'Speed Racer'})
RETURN p.name AS Producer, m.released AS ReleaseYear",Verbose query,movies,False,False,True
"MATCH (p:Person)
WHERE p.born < 1960
RETURN p
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released < 1980
RETURN p.name
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released > 1995
RETURN d.name, count(m) AS movies_directed
ORDER BY movies_directed DESC
LIMIT 5",Verbose query,movies,False,False,False
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, count(m) AS movie_count
WHERE movie_count > 1
RETURN p.name, movie_count
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, count(m) AS films_directed
ORDER BY films_directed DESC
LIMIT 3
RETURN p.name, films_directed",Verbose query,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:FOLLOWS]->(followed:Person)
RETURN followed",Verbose query,movies,True,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
RETURN m.title AS MovieTitle, r.rating AS Rating
LIMIT 3",Verbose query,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes > 5000
RETURN m.title, m.votes",Verbose query,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Welcome'
RETURN m",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN {roles: roles}]->(m:Movie {title: ""The Matrix""})
RETURN roles",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, count(m) AS movies_directed
WHERE movies_directed > 1
RETURN p.name, movies_directed",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED {summary: 'Pretty funny at times'}]->(m:Movie)
RETURN m.title, r.rating
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED {rating: 100}]-(reviewer:Person)
RETURN p.name AS Director, m.title AS MovieTitle
ORDER BY m.released ASC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
RETURN p.name, m.title
ORDER BY p.born ASC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'world'
RETURN m.title, m.released
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p)
WHERE m.released < 2000
RETURN m.title, m.released",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person {name: ""Nancy Meyers""})-[:WROTE]->(m:Movie)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.tagline IS NOT NULL
WITH p, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5
RETURN p.name, movies_count",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
WITH m, count(p) AS num_actors
ORDER BY num_actors DESC
LIMIT 3
MATCH (p:Person)-[r:ACTED_IN]->(m)
RETURN m.title, collect(p.name) AS actors, collect(r.roles) AS roles",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE 'Villain' IN r.roles
RETURN m.title AS Movie, collect(p.name) AS Actors
LIMIT 3",Simple Aggregation Queries,movies,True,False,False
"MATCH (p:Person)-[r:REVIEWED {summary: 'The coolest football movie ever'}]->(m:Movie)
RETURN m.title AS MovieTitle, p.name AS ReviewerName",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born < 1950
RETURN AVG(m.votes) AS average_votes",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p)
RETURN p.name, m.title
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE any(role IN r.roles WHERE role CONTAINS 'Doctor')
RETURN m.title AS Movie, collect(p.name) AS Actors
ORDER BY m.votes DESC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN m.title AS MovieTitle",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(p)
RETURN m.title AS MovieTitle
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH m, count(DISTINCT p) AS num_actors
ORDER BY num_actors DESC
LIMIT 5
RETURN m.title, num_actors",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born >= 1950 AND p.born < 1960
RETURN m
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
RETURN p.name, m.title, p.born
ORDER BY p.born ASC
LIMIT 3",Simple Aggregation Queries,movies,True,False,False
"MATCH (p:Person {born: 1970})-[:DIRECTED]->(m:Movie)
RETURN m.title AS MovieTitle",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(:Movie), (p)-[:DIRECTED]->(:Movie)
RETURN p.name, p.born
ORDER BY p.born DESC
LIMIT 3",Simple Aggregation Queries,movies,True,False,False
"MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
WITH m, count(a) AS num_actors
ORDER BY num_actors DESC
LIMIT 5
RETURN m.title AS Movie, m.released AS ReleaseYear, num_actors AS NumberOfActors",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE m.votes = (SELECT max(m2.votes) FROM Movie m2)
RETURN p.name AS reviewer, r.summary AS review_summary",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)<-[:REVIEWED {rating: r}]-(p)
WHERE r > 90
RETURN m.title AS Movie, r.roles AS Roles",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1970
RETURN p.name, m.title
ORDER BY p.born ASC
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'journey' AND exists{(m)<-[:REVIEWED]-(:Person)}
RETURN m.title, m.tagline",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released >= 1990 AND m.released < 2000
WITH m, count(p) AS actorCount
WHERE actorCount > 5
RETURN m.title, m.released, actorCount",Simple Aggregation Queries,movies,False,False,False
"MATCH (kr:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(lf:Person {name: ""Laurence Fishburne""})
RETURN m.title AS MovieTitle
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born >= 1980 AND p.born < 1990
RETURN m.title, r.rating
ORDER BY r.rating DESC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person {born: 1949})-[:DIRECTED]->(m:Movie)
RETURN m.title AS MovieTitle
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name AS PersonName
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WITH m, d, m.votes AS votes
ORDER BY votes DESC
LIMIT 5
RETURN avg(2023 - d.born) AS average_age_of_directors",Simple Aggregation Queries,movies,True,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.tagline CONTAINS 'limits'
WITH p, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN p.name, movies_count",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE 'Hero' IN r.roles
RETURN m.title AS Movie, p.name AS Actor",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born > 1980
RETURN m.title, r.rating
ORDER BY r.rating DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WITH m, collect({actor: p.name, roles: r.roles}) AS actors_roles
ORDER BY size(r.roles) DESC
RETURN m.title AS Movie, actors_roles
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE any(role IN r.roles WHERE role CONTAINS 'Captain')
RETURN m.title, p.name, r.roles
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE p.born < 1950
RETURN m.title, r.summary
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (m:Movie)<-[r:REVIEWED {summary: 'An amazing journey'}]-(p:Person)
RETURN m.title, r.rating
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released >= 2000 AND m.released < 2010
WITH m, count(p) AS actorCount
WHERE actorCount > 3
RETURN m.title, m.released, actorCount",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WITH p, count(DISTINCT m.tagline) AS diversity
ORDER BY diversity DESC
LIMIT 3
RETURN p.name AS Actor, diversity AS GenreDiversity",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'amazing journey' AND r.rating < 80
RETURN m",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE exists{(p)-[:ACTED_IN]->(m)}
RETURN p.name
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released <= 2000 AND m.votes > 5000
RETURN m.title, m.released, m.votes",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released >= 1990 AND m.released <= 2000
RETURN p.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 5",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p)
WHERE m.released > 2000
RETURN p.name, m.title, m.released
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie {title: 'The Matrix'})
RETURN p.name",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released = 1999
RETURN m.title, m.tagline, m.votes",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)
WHERE m.title = 'Speed Racer'
RETURN p.name",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
RETURN m.title, m.released, r.rating, r.summary",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m
ORDER BY m.votes ASC
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)
WHERE p.born >= 1940 AND p.born <= 1960
RETURN p",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1960
RETURN m",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limit'
RETURN m.title, m.tagline",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person {born: $born})-[:PRODUCED]->(m:Movie)
WITH m
ORDER BY m.released
LIMIT 3
MATCH (actor:Person)-[r:ACTED_IN]->(m)
RETURN m.title, actor.name, r.roles",Simple Aggregation Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Houston'
RETURN m
ORDER BY m.votes DESC
LIMIT 5",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'real' AND m.released < 2000
RETURN m.title
ORDER BY m.released
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born >= 1960 AND p.born < 1970
RETURN m.title AS Movie, m.released AS ReleaseYear
ORDER BY m.released DESC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: 'Nancy Meyers'})-[:REVIEWED]->(m:Movie)
RETURN m.title, m.released, m.tagline, m.votes, [(p)-[:REVIEWED]->(m) | m.summary][0] AS summary
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'fun'
RETURN m.title, m.released
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1970 AND m.released < 2000
RETURN p.name, p.born, collect(m.title) AS movies
ORDER BY p.born
LIMIT 3",Pathfinding Queries,movies,True,False,False
"MATCH (m:Movie)
WHERE m.released > 2000
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 5",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(p)
RETURN p.name, m.title
LIMIT 3",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released >= 1990 AND m.released < 2000
RETURN p.name, p.born, m.title, m.released
ORDER BY p.born DESC
LIMIT 3",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p)
RETURN p.name, m.title, a.roles, r.summary, r.rating
LIMIT 3",Pathfinding Queries,movies,True,False,False
"MATCH (m:Movie)<-[:REVIEWED {rating: r}]-(p:Person)
WHERE m.released >= 1980 AND m.released <= 1990 AND r > 80
RETURN m.title, m.released, r AS rating",Pathfinding Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.released < 1980 AND m.votes IS NOT NULL
RETURN m
ORDER BY m.votes ASC
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born < 1950 AND m.summary CONTAINS 'funny'
WITH p
MATCH (p)-[:ACTED_IN]->(m:Movie)
RETURN p.name, p.born, collect(m.title) AS movies
LIMIT 3",Pathfinding Queries,movies,True,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born > 1960 AND m.tagline CONTAINS 'speed'
RETURN p.name, m.title, m.tagline",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)
WHERE size{(p)-[:FOLLOWS]->(:Person)} > 5
RETURN p.name
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:REVIEWED]-(p)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear, p.name AS PersonName
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.votes >= 100
WITH p, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5
RETURN p.name, movies_count",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960 AND exists {
  (p)-[:REVIEWED {rating: r}]->(m)
  WHERE r > 90
}
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
ORDER BY m.released
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.tagline CONTAINS 'freedom'
WITH p, count(m) AS moviesCount
WHERE moviesCount > 1
RETURN p.name
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie {title: 'Speed Racer'})
RETURN p.name, r.roles",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, AVG(r.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN p.name AS Reviewer, avgRating",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)
RETURN p, count{(p)<-[:FOLLOWS]-(:Person)} AS followers
ORDER BY followers DESC
LIMIT 1",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m.title
ORDER BY m.votes DESC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)
WHERE p.born > 1980
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released <= 2000
RETURN m.title, m.released",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie {tagline: 'Welcome to the Real World'})
RETURN m.title
LIMIT 3",Simple Aggregation Queries,movies,True,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
RETURN p.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released > 2000
RETURN d.name, m.title, m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS Movie, p.name AS ProducerDirector
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)
WHERE size((p)-[:FOLLOWS]->(:Person)) > 5
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'freedom'
RETURN m.title, m.released
ORDER BY m.released DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p1:Person), (p2:Person), (p3:Person)
WHERE p1 <> p2 AND p1 <> p3 AND p2 <> p3
WITH p1, p2, p3, abs(p1.born - p2.born) AS diff1, abs(p2.born - p3.born) AS diff2, abs(p3.born - p1.born) AS diff3
ORDER BY diff1 + diff2 + diff3 ASC
RETURN p1.name, p2.name, p3.name, diff1, diff2, diff3
LIMIT 3",Simple Aggregation Queries,movies,True,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN m.title, count(r.roles) AS total_roles
ORDER BY total_roles DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (actor:Person)-[:ACTED_IN]->(m:Movie {tagline: 'Dark, but compelling'})
RETURN actor.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN m.title, r.rating, r.summary
ORDER BY r.rating DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE m.votes < 50
RETURN d.name, collect(m.title) AS Movies
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL
RETURN m.title, m.tagline
ORDER BY length(m.tagline) DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m1:Movie)
WHERE exists {
  (p)-[:DIRECTED]->(:Movie)
} AND exists {
  (p)-[:PRODUCED]->(:Movie)
}
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p1:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(p2:Person)
WHERE p1.born - p1.born % 10 = p2.born - p2.born % 10 AND p1 <> p2
RETURN m.title AS Movie, collect(p1.name) AS Actors, p1.born - p1.born % 10 AS Decade
ORDER BY Decade",Simple Aggregation Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Speed'
RETURN m.title
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH m, count(r) AS reviews
ORDER BY reviews DESC
LIMIT 5
RETURN m.title, reviews",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released < 1980
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WITH m, count(DISTINCT r.roles) AS diversity
ORDER BY diversity DESC
LIMIT 3
RETURN m.title, diversity",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED {summary: 'An amazing journey'}]->(m:Movie)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p:Person)
WITH d, avg(p.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN d.name, avgRating",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE NOT EXISTS { (p)-[:DIRECTED]->(:Movie) }
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)
WHERE p.name STARTS WITH 'L'
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born = 1970
RETURN p.name, m.title",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE NOT exists{ (p)-[:ACTED_IN]->(:Movie) }
RETURN p.name, count(m) AS directedMovies
ORDER BY directedMovies DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WITH m, count(DISTINCT r.roles) AS diversity
ORDER BY diversity DESC
LIMIT 5
RETURN m.title AS Movie, diversity AS CastDiversity",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'end'
RETURN m",Complex Retrieval Queries,movies,True,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN p, m, r.roles AS roles
ORDER BY size(r.roles) DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:PRODUCED]-(p)-[:ACTED_IN]->(m)
RETURN p.name, collect(m.title) AS movies
ORDER BY size(movies) DESC
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie {tagline: 'Welcome to the Real World'})
RETURN m.title",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN {roles: roles}]->(m:Movie {title: ""The Matrix Revolutions""})
RETURN roles",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1970 AND m.released < 2000
RETURN p.name, m.title, m.released",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m
ORDER BY m.votes DESC
LIMIT 5",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie {title: 'The Matrix'})
RETURN p.name AS DirectorName",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
RETURN m.title AS MovieTitle",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE m.released < 2000
WITH p, count(r) AS reviews
ORDER BY reviews DESC
LIMIT 3
RETURN p.name AS PersonName, reviews AS NumberOfReviews",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born > 1960
RETURN m.title, m.released
ORDER BY m.released ASC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.tagline IS NOT NULL
WITH p, count(DISTINCT m.tagline) AS distinctTaglines
ORDER BY distinctTaglines DESC
LIMIT 3
RETURN p.name, distinctTaglines",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'slapstick'
RETURN m.title, m.released, r.summary, r.rating
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN m.title, count(r.roles) AS total_roles
ORDER BY total_roles DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WITH p, count(DISTINCT a.roles) AS diversity
ORDER BY diversity DESC
LIMIT 3
RETURN p.name AS Actor, diversity AS RolesDiversity",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.tagline CONTAINS 'world'
WITH p, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
RETURN p.name, moviesDirected",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, max(p.born) AS oldest
MATCH (oldestActor:Person {born: oldest})-[:ACTED_IN]->(movie:Movie)
RETURN movie.title AS MovieTitle, movie.released AS ReleaseYear",Complex Retrieval Queries,movies,True,False,False
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WHERE m.released < 1985
RETURN p.name, count(a.roles) AS total_roles
ORDER BY total_roles DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,False
"MATCH (m:Movie)<-[:REVIEWED {summary: 'An amazing journey'}]-(p:Person)
RETURN m.title AS MovieTitle, p.name AS ReviewerName",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
WITH p, count(m) AS moviesReviewed
ORDER BY moviesReviewed DESC
LIMIT 1
RETURN p.name AS reviewer, moviesReviewed",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE exists{ (p)-[:ACTED_IN]->(m) }
RETURN m.title AS MovieTitle, m.released AS ReleaseYear",Complex Retrieval Queries,movies,False,False,False
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WITH m, count(DISTINCT (a:Person)-[:ACTED_IN]->(m)) AS actorCount
WHERE actorCount >= 3
RETURN d.name, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie {title: ""The Matrix""})
RETURN p.name, r.rating",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[:WROTE]->(:Movie)
RETURN p.name, p.born
ORDER BY p.born DESC
LIMIT 5",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[r:PRODUCED]->(m:Movie)
WHERE m.released >= 2000 AND m.released < 2010
WITH p, count(m) AS moviesProduced
RETURN p.name AS Producer, moviesProduced
ORDER BY moviesProduced DESC
LIMIT 1",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)
WHERE count{(p)-[:FOLLOWS]->(:Person)} > 5
RETURN p",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born >= 1950 AND p.born < 1960
RETURN m.title, m.released",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE exists{(p)-[:REVIEWED]->(m)}
WITH p, count{(p)-[:REVIEWED]->(m)} AS reviewsCount
ORDER BY reviewsCount DESC
LIMIT 5
RETURN p.name, reviewsCount",Complex Retrieval Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WITH m, count(p) AS reviewers_count
WHERE reviewers_count > 1
RETURN m.title, reviewers_count",Complex Retrieval Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN p.name, count(m) AS movies_reviewed
ORDER BY movies_reviewed DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released >= 1990 AND m.released < 2000
RETURN p
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'funny'
RETURN m.title AS MovieTitle, r.summary AS ReviewSummary
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {summary: 'A solid romp'}]-(p:Person)
RETURN m.title
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN p.name, collect(m.title) AS movies
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released > 2005
RETURN d.name, count(m) AS movies_directed
ORDER BY movies_directed DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WITH m, avg(r.rating) AS averageRating
ORDER BY averageRating DESC
LIMIT 3
RETURN m.title, averageRating",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.tagline CONTAINS 'freedom'
RETURN p.name, m.title
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.tagline IS NOT NULL
WITH p, count(m) AS directedMovies
ORDER BY directedMovies DESC
LIMIT 3
RETURN p.name, directedMovies",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH m, count{(p)-[:FOLLOWS]->(:Person)} AS followersCount
ORDER BY followersCount DESC
LIMIT 3
RETURN m.title, followersCount",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born >= 1960 AND p.born < 1970
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
ORDER BY m.released DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(:Movie)
WHERE NOT exists{ (d)-[:REVIEWED]->(:Movie) }
RETURN d.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, m ORDER BY m.votes ASC
LIMIT 3
RETURN p.name AS Actor",Simple Aggregation Queries,movies,False,False,True
"MATCH (:Person)-[r:REVIEWED]->(:Movie)
RETURN r.summary AS Summary, count(r) AS Count
ORDER BY Count DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WITH p, count(DISTINCT r.roles) AS distinctRoles
ORDER BY distinctRoles DESC
LIMIT 3
RETURN p.name, distinctRoles",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WITH m, count(DISTINCT p) AS reviewers_count
ORDER BY reviewers_count DESC
LIMIT 3
RETURN m.title, reviewers_count",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH m, AVG(r.rating) AS avgRating
ORDER BY avgRating ASC
LIMIT 3
RETURN m.title, avgRating",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.tagline CONTAINS 'journey'
WITH p, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN p.name AS person_name, movies_count",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE exists {
  (p)-[:REVIEWED]->(m)
}
RETURN m.title AS MovieTitle
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
RETURN p.name, p.born
ORDER BY p.born DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released % 3 = 0
RETURN m.title
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)
RETURN p
ORDER BY p.born ASC
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WITH p, count(DISTINCT a.roles) AS variety
ORDER BY variety DESC
LIMIT 5
RETURN p.name, variety",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.tagline CONTAINS 'limits'
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
RETURN p.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'compelling'
WITH m, count(r) AS reviewsCount
WHERE reviewsCount >= 2
RETURN m.title, m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[r:REVIEWED {rating: 75}]->(m:Movie)
RETURN m.title
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
MATCH (p)-[:DIRECTED]->(m)
MATCH (p)-[:PRODUCED]->(m)
RETURN p.name, m.title
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.released DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)
WHERE p1.name STARTS WITH substring(p2.name, 0, 1)
RETURN p1.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born > 1970
RETURN m.title AS MovieTitle
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (:Person)-[r:REVIEWED]->(:Movie)
RETURN max(r.rating) AS highest_rating",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p, count(m) AS producedMovies
ORDER BY producedMovies ASC
LIMIT 3
RETURN p.name AS Director, producedMovies",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE exists{(m)<-[:REVIEWED]-(:Person)}
WITH p, count(m) AS reviewedMoviesCount
ORDER BY reviewedMoviesCount DESC
LIMIT 3
RETURN p.name AS PersonName, reviewedMoviesCount",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(p)
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.released ASC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
RETURN p.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE size(r.roles) = 3
RETURN m.title AS Movie, collect(p.name) AS Actors
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)
RETURN p, count{(p)<-[:FOLLOWS]-(:Person)} AS followers
ORDER BY followers DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'real'
RETURN m
ORDER BY m.votes DESC
LIMIT 5",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.votes >= 1000
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m
ORDER BY m.votes ASC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
RETURN d.name, m.title, m.votes
ORDER BY m.votes ASC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL
RETURN m.tagline AS Tagline, count(m) AS Frequency
ORDER BY Frequency DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WITH p, collect(a.roles) AS allRoles
UNWIND allRoles AS roles
WITH p, collect(DISTINCT roles) AS uniqueRoles
ORDER BY size(uniqueRoles) DESC
RETURN p.name, uniqueRoles
LIMIT 3",Simple Aggregation Queries,movies,True,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limit' AND m.votes IS NOT NULL
RETURN m
ORDER BY m.votes DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
RETURN p.name, count(m) AS produced_movies
ORDER BY produced_movies DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH m, count(DISTINCT p) AS actorCount
ORDER BY actorCount DESC
LIMIT 3
RETURN m.title, actorCount",Simple Aggregation Queries,movies,False,False,False
"MATCH (m:Movie)<-[r:REVIEWED]-(p:Person)
WHERE r.summary CONTAINS 'fun'
RETURN m.title, m.released, r.rating, r.summary
ORDER BY r.rating DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born >= 1940 AND p.born < 1950
RETURN m.title AS Movie, collect(p.name) AS Actors
ORDER BY m.votes DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1970
RETURN m
ORDER BY m.released ASC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE m.tagline IS NOT NULL
RETURN d.name, count(DISTINCT m.tagline) AS distinctTaglines
ORDER BY distinctTaglines DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:FOLLOWS]->(m:Movie)
RETURN m.title AS Movie, count(p) AS Followers
ORDER BY Followers DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m1:Movie), (p)-[:ACTED_IN]->(m2:Movie)
WHERE m1.released = m2.released + 1 OR m1.released = m2.released - 1
RETURN p.name, collect(m1.title) AS Movie1, collect(m2.title) AS Movie2
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL
RETURN m.title, m.tagline
ORDER BY m.tagline DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, sum(r.rating) AS total_rating
ORDER BY total_rating DESC
LIMIT 3
RETURN p.name AS person_name, total_rating",Simple Aggregation Queries,movies,False,False,False
"MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.tagline CONTAINS 'beginning'
RETURN a.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p)
RETURN m.title AS Movie, p.name AS Director_Reviewer
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WITH p, sum(size(a.roles)) AS totalRoles
ORDER BY totalRoles DESC
LIMIT 3
RETURN p.name AS PersonName, totalRoles",Simple Aggregation Queries,movies,False,False,True
"MATCH (a)-[r]->(b)
RETURN a, r, b
ORDER BY r.creationDate DESC
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:FOLLOWS]->(d:Person)-[:DIRECTED]->(:Movie)
WITH p, count(d) AS directorsFollowed
ORDER BY directorsFollowed DESC
LIMIT 3
RETURN p.name, directorsFollowed",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie), (p)-[:DIRECTED]->(m)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
LIMIT 3",Simple Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, count(DISTINCT m.title) AS distinctTitles
ORDER BY distinctTitles DESC
LIMIT 3
RETURN p.name AS PersonName, distinctTitles",Simple Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {summary: 'Dark, but compelling'}]-(:Person)
RETURN m.title AS MovieTitle",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie {title: 'Speed Racer'})
RETURN p.name AS Reviewer, r.rating AS Rating",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)
RETURN p
ORDER BY p.born ASC
LIMIT 3",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie {title: 'The Matrix Revolutions'})
UNWIND r.roles as role
RETURN role, count(role) AS frequency
ORDER BY frequency DESC",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)
WHERE p.born < 1950
RETURN p",Complex Aggregation Queries,movies,True,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS MovieTitle, p.name AS ProducerDirector",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WITH p, count(m) AS movies_reviewed
WHERE movies_reviewed > 1
RETURN p
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.title IN ['The Matrix', 'Speed Racer']
WITH p, count(m) AS movies_count
WHERE movies_count = 2
RETURN p.name",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m.title, m.votes
ORDER BY m.votes DESC
LIMIT 5",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN {roles: roles}]->(m:Movie {title: ""The Matrix""})
RETURN roles",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN m",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie {title: 'The Matrix'})
RETURN p.name",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie {tagline: 'Welcome to the Real World'})
RETURN m",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p)
RETURN p.name, m.title",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 90
RETURN m.title AS MovieTitle
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes > 1000
RETURN m.title",Complex Aggregation Queries,movies,True,False,False
"MATCH (m:Movie)
WHERE m.released >= 1990 AND m.released <= 2000
RETURN m",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released < 1980
RETURN m
ORDER BY m.released DESC
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WITH p, sum(size(a.roles)) AS total_roles
ORDER BY total_roles DESC
LIMIT 3
RETURN p.name, total_roles",Pathfinding Queries,movies,False,False,False
"MATCH (m:Movie)<-[:REVIEWED {summary: 'An amazing journey'}]-(p:Person)
RETURN m.title AS MovieTitle, p.name AS ReviewerName",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(:Movie)
WHERE size((p)-[:FOLLOWS]->(:Person)) > 5
RETURN p.name",Pathfinding Queries,movies,True,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:PRODUCED]-(p)
RETURN m.title AS MovieTitle",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN m.title AS Movie, r.roles AS Roles
ORDER BY size(r.roles) DESC
LIMIT 1",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)<-[:ACTED_IN]-(a:Person)
WHERE p.born < 1960
RETURN m.title, m.released, a.name, a.roles
ORDER BY size(a.roles)
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE EXISTS {
    MATCH (p)-[:DIRECTED]->(m2:Movie)
    WHERE m.title = m2.title
}
RETURN m.title AS MovieTitle",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released % 5 = 0
RETURN m.title AS MovieTitle, m.released AS ReleaseYear, relationships(p-[:ACTED_IN]->m)[0].roles AS Roles",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)-[:REVIEWED]->(:Movie)
RETURN p.name, p.born
ORDER BY p.born ASC
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 50
RETURN m.title, r.summary, r.rating",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
RETURN p.name, count(m) AS directedMovies
ORDER BY directedMovies DESC
LIMIT 1",Pathfinding Queries,movies,True,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE m.released > 2010
RETURN p.name, m.title, r.roles",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'compelling'
RETURN m.title, m.tagline",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)
WHERE p.born > 1970 AND exists{(p)-[:ACTED_IN]->(:Movie)}
RETURN p.name, p.born",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:FOLLOWS]->(followed:Person)
WHERE followed.born > 1980
WITH p, count(followed) AS followsCount
ORDER BY followsCount DESC
LIMIT 1
RETURN p.name AS person, followsCount",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie {title: ""Speed Racer""})<-[:REVIEWED]-(p:Person)
RETURN p.name AS reviewer, m.title AS movie, r.summary AS review_summary",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
RETURN p.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(:Movie)
WHERE p.born >= 1960 AND p.born <= 1969
RETURN p.name, p.born",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN m.title, m.released, size(r.roles) AS num_roles
ORDER BY num_roles DESC
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WITH p, count(DISTINCT m) AS movies_count
RETURN p.name AS actor, movies_count
ORDER BY movies_count DESC
LIMIT 1",Complex Aggregation Queries,movies,True,False,False
"MATCH (p:Person {born: 1990})-[:FOLLOWS]->(followed:Person)-[:ACTED_IN|DIRECTED|PRODUCED|WROTE]->(m:Movie)
RETURN DISTINCT m.title AS MovieTitle",Complex Aggregation Queries,movies,False,False,False
"MATCH (:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 80
RETURN AVG(m.released) AS averageReleaseYear",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.votes < 100
RETURN p.name",Complex Aggregation Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.released = 1999
RETURN m",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE exists {
  (p)-[:DIRECTED]->(m) AND (p)-[:WROTE]->(m)
}
WITH m, count(p) AS involvementCount
WHERE involvementCount = 1
RETURN m.title, m.released",Complex Aggregation Queries,movies,False,False,True
"MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)
WHERE p1.born = p2.born
RETURN p1, p2",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)
WITH p, count(DISTINCT a.roles) AS diversity
ORDER BY diversity DESC
LIMIT 3
RETURN p.name AS Actor, diversity",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:PRODUCED]-(p)
RETURN m.title AS MovieTitle, p.name AS PersonName",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {summary: 'Dark, but compelling'}]-(:Person)
RETURN m.title AS MovieTitle",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED {summary: 'An amazing journey'}]->(m:Movie)
RETURN m.title, r.rating
ORDER BY r.rating DESC
LIMIT 5",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WITH p, count(m) AS moviesDirected
WHERE moviesDirected > 2
RETURN p.name",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:PRODUCED]-(p)
RETURN p.name, m.title",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'limits'
RETURN m.title, m.tagline, m.released",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 2000 AND m.released < 2010
RETURN avg(m.votes) AS average_votes",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN m.title AS Movie, r.rating AS Rating
ORDER BY r.rating ASC
LIMIT 3",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN p.name, count(m) AS movies_reviewed
ORDER BY movies_reviewed DESC
LIMIT 1",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1980
WITH p, count(m) AS movies_count
WHERE movies_count > 1
RETURN p.name, movies_count",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN m.title AS MovieTitle",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN p.name, m.title, size(r.roles) AS num_roles
ORDER BY num_roles DESC
LIMIT 1",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline STARTS WITH 'Everything'
RETURN m.title, m.tagline, m.released",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:FOLLOWS]->(other:Person)
WITH p, count(other) AS follows_count
ORDER BY follows_count DESC
LIMIT 3
RETURN p.name, follows_count",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
UNWIND p.roles AS role
RETURN DISTINCT role",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WITH p, count(m) AS moviesProduced
WHERE moviesProduced > 3
RETURN p.name, moviesProduced",Complex Aggregation Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes < 50
RETURN m.title, m.votes",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born < 1970
RETURN avg(m.rating) AS average_rating",Complex Aggregation Queries,movies,False,False,False
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:ACTED_IN]-(p)
RETURN p.name, m.title",Complex Aggregation Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released % 20 = 0
RETURN p",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes IS NOT NULL
RETURN m
ORDER BY m.votes ASC
LIMIT 5",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)
WHERE exists{(p)-[:PRODUCED]->(:Movie)} AND 
      exists{(p)-[:DIRECTED]->(:Movie)} AND 
      exists{(p)-[:ACTED_IN]->(:Movie)}
WITH p, count{(p)-[:PRODUCED]->(:Movie)} AS producedCount, 
          count{(p)-[:DIRECTED]->(:Movie)} AS directedCount, 
          count{(p)-[:ACTED_IN]->(:Movie)} AS actedInCount
RETURN p.name, producedCount, directedCount, actedInCount
ORDER BY producedCount + directedCount + actedInCount DESC
LIMIT 1",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person {name: ""Laurence Fishburne""})-[:PRODUCED]->(m:Movie)
WHERE m.released >= 2001
RETURN m
ORDER BY m.released ASC
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED {rating: 100}]->(m:Movie)
RETURN p.name, m.title",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN m.title, r.roles
ORDER BY size(r.roles) DESC
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.name = 'Joel' AND m.votes > 100
RETURN p, m",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released >= 1980 AND m.released <= 1989
RETURN m
ORDER BY m.released DESC
LIMIT 5",Pathfinding Queries,movies,True,False,False
"MATCH (m:Movie)
WHERE m.votes < 100
RETURN m
ORDER BY m.votes ASC
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person {name: ""Lana Wachowski""})-[:DIRECTED]->(m:Movie)
RETURN count(m) AS NumberOfMoviesDirected",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born > 1970
RETURN m.title, m.released",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < 1950
RETURN p.name, p.born, collect(m.title) AS movies
ORDER BY p.born
LIMIT 3",Pathfinding Queries,movies,True,False,False
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
WHERE m.released >= 1990 AND m.released < 2000
RETURN m.title AS Movie, m.released AS Year, relationships(p-[:ACTED_IN]->m)[0].roles AS Roles",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie {title: 'Speed Racer'})
RETURN count(DISTINCT p) AS reviewer_count",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'Real'
RETURN m",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE p.born >= 1960 AND p.born < 1970
RETURN p.name, collect(m.title) AS DirectedMovies",Pathfinding Queries,movies,False,False,False
"MATCH (m:Movie)<-[:REVIEWED {rating: r}]-(p:Person)
WHERE r > 85
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
ORDER BY m.released
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
RETURN p.name, count(m) AS movies_reviewed
ORDER BY movies_reviewed DESC
LIMIT 1",Pathfinding Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.released % 5 = 0
RETURN m",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)
RETURN p, count{(p)<-[:FOLLOWS]-(:Person)} AS followers
ORDER BY followers DESC
LIMIT 1",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m1:Movie), 
      (p)-[:DIRECTED]->(m2:Movie), 
      (p)-[:PRODUCED]->(m3:Movie)
WHERE m1 <> m2 AND m2 <> m3 AND m1 <> m3
RETURN p.name, m1.title AS ActedIn, m2.title AS Directed, m3.title AS Produced",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person {name: ""Joel Silver""})-[:PRODUCED]->(m:Movie)
RETURN sum(m.votes) AS TotalVotes",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie {title: 'The Matrix'})
RETURN p.name, r.summary",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.released DESC
LIMIT 5",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)-[:REVIEWED]->()
WHERE m.released >= 1990 AND m.released <= 2000
RETURN m",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.tagline CONTAINS 'limits'
RETURN p.name AS ProducerName, m.title AS MovieTitle",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE size(r.roles) > 4
RETURN m.title, r.roles",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE NOT exists{ (p)-[:ACTED_IN]->(:Movie) }
RETURN DISTINCT p",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m
ORDER BY m.released ASC
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:FOLLOWS]->(keanu:Person {name: ""Keanu Reeves""})
RETURN p.name, count{(p)-[:FOLLOWS]->(keanu)} AS follows_count
ORDER BY follows_count DESC
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS MovieTitle, p.name AS WriterDirector",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE m.tagline CONTAINS 'end'
RETURN p.name, r.roles",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:FOLLOWS]->(lw:Person {name: ""Lana Wachowski""})
RETURN p.name AS FollowerName
ORDER BY p.born DESC
LIMIT 5",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person {name: ""Laurence Fishburne""})-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2000
RETURN m.title, m.released, [(p)-[r:ACTED_IN]->(m) | r.roles] AS roles",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p)
RETURN p.name, m.title",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {rating: 75}]-(p:Person)
RETURN m.title AS MovieTitle, p.name AS ReviewerName",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN m.title, count(r.roles) AS total_roles
ORDER BY total_roles DESC
LIMIT 5",Pathfinding Queries,movies,False,False,True
"MATCH (director:Person)-[:DIRECTED]->(m:Movie)
WITH director, count(m) AS moviesDirected
WHERE moviesDirected > 3
MATCH (follower:Person)-[:FOLLOWS]->(director)
RETURN follower",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
RETURN m.title, r.roles
ORDER BY size(r.roles) DESC
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:REVIEWED]->(m:Movie)
WHERE p.born > 1970
RETURN AVG(m.rating) AS average_rating",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE m.title CONTAINS 'Matrix'
RETURN p.name, r.roles",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating > 75
WITH p, count(m) AS moviesReviewed
ORDER BY moviesReviewed DESC
RETURN p.name, moviesReviewed",Pathfinding Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'football'
RETURN m
ORDER BY m.released DESC
LIMIT 5",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'funny'
RETURN p.name, m.title, r.summary",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.votes > 2000
RETURN m",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE p.born < 1960
RETURN m.title AS MovieTitle, m.released AS ReleaseYear",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.released % 10 = 0 AND m.votes > 500
RETURN m
ORDER BY m.released ASC
LIMIT 3",Pathfinding Queries,movies,True,False,False
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE m.released < 1980
UNWIND r.roles AS role
RETURN role, COUNT(role) AS role_count
ORDER BY role_count DESC",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
RETURN p.name, p.born
ORDER BY p.born DESC
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.rating < 60
RETURN p.name
LIMIT 3",Simple Aggregation Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE NOT exists{ (:Person)-[:REVIEWED]->(m) }
RETURN m
ORDER BY m.votes DESC
LIMIT 5",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN {roles: roles}]->(m:Movie {title: ""The Matrix""})
RETURN roles",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie)
WHERE r.summary CONTAINS 'Robin Williams'
RETURN m.title AS MovieTitle, r.summary AS ReviewSummary",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE m.released > 1995
WITH p, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 1
RETURN p.name AS Director, moviesDirected",Pathfinding Queries,movies,False,False,False
"MATCH (p1:Person)-[:FOLLOWS]->(p2:Person)
WHERE exists{ (p2)-[:FOLLOWS]->(p1) }
RETURN p1.name, p2.name
LIMIT 3",Pathfinding Queries,movies,False,False,False
"MATCH (p:Person {name: ""Keanu Reeves""})-[:ACTED_IN]->(m:Movie)
RETURN m.title AS Movie, size(m.roles) AS RolesListSize",Pathfinding Queries,movies,True,False,False
"MATCH (p:Person)-[r:ACTED_IN|DIRECTED|PRODUCED]->(m:Movie)
WHERE p.born > 1980
RETURN p.name, collect(m.title) AS movies",Pathfinding Queries,movies,False,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'beginning'
RETURN m",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:REVIEWED]->(m:Movie {title: 'Speed Racer'})
RETURN r.summary AS Summary
ORDER BY r.rating ASC
LIMIT 1",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
WHERE m.released < 1990
RETURN p.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 3",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)<-[:REVIEWED {rating: r}]-(p:Person)
WHERE m.released >= 2000 AND m.released < 2010 AND r < 60
RETURN m.title, m.released, r AS rating, p.name AS reviewer",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE size(r.roles) = 5
RETURN m.title, collect(p.name) AS actors",Pathfinding Queries,movies,False,False,True
"MATCH (p:Person)-[:PRODUCED]->(m:Movie)
RETURN p.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 1",Pathfinding Queries,movies,False,False,True
"MATCH (m:Movie)
WHERE m.release_date < date('2000-01-01') AND m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (v:Video)-[:IN_GENRE]->(g:Genre)
WHERE v.runtime > 100
RETURN g, count(v) AS videoCount
ORDER BY videoCount DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.popularity > 20
RETURN l.name AS Language
ORDER BY m.popularity DESC
LIMIT 3",Verbose query,neoflix,False,True,False
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
WHERE m.budget > 50000000
RETURN p.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'})
RETURN m.title AS MovieTitle, m.average_vote AS AverageVote
ORDER BY m.average_vote DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.release_date > date('2010-12-31')
RETURN DISTINCT l.name
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name, count(a) AS NumberOfAdultFilms
ORDER BY NumberOfAdultFilms DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u.id, count(r) AS ratings_count
ORDER BY ratings_count DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE m.budget > 50000000
RETURN c
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
RETURN p.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
RETURN m.title, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE m.revenue > 500000000
RETURN DISTINCT c.name
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.popularity > 20
RETURN g
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)
WHERE m.budget > 100000000
RETURN pc.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date < date('2000-01-01') AND m.average_vote IS NOT NULL
RETURN m
ORDER BY m.average_vote DESC
LIMIT 5",Verbose query,neoflix,True,False,False
"MATCH (m:Movie)
WHERE m.runtime > 120 AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE m.status = 'Released' AND r.job = 'Director'
RETURN p.name, count(m) AS num_films
ORDER BY num_films DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.release_date > date('2015-01-01')
WITH m, count(l) AS languages_spoken
ORDER BY languages_spoken DESC
RETURN m.title, languages_spoken
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
WHERE m.runtime > 200
WITH g, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 3
RETURN g.name, movieCount",Complex Aggregation Queries,neoflix,False,False,False
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
WITH p, count(DISTINCT (m)-[:PRODUCED_IN_COUNTRY]->(:Country)) AS countries_count
WHERE countries_count > 5
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:IN_GENRE]->(g:Genre)
WHERE v.runtime < 30
RETURN g.name, count(v) AS videoCount
ORDER BY videoCount DESC
LIMIT 3",Verbose query,neoflix,True,False,False
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE v.budget > 1000000
RETURN c.name, count(v) AS num_videos
ORDER BY num_videos DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.revenue > 200000000
RETURN l.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CREW_FOR]->(a:Adult), (p)-[:CREW_FOR]->(v:Video)
WHERE a.job = 'Director' AND v.job = 'Director'
RETURN p.name AS Director
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.poster_path STARTS WITH '/rh'
WITH g, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 5
RETURN g.name AS Genre, movieCount",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
WITH p, count(DISTINCT (m)-[:ORIGINAL_LANGUAGE]->()) AS num_languages
WHERE num_languages >= 3
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.runtime < 80
WITH pc, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN pc.name, movies_count",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE m.tagline CONTAINS 'love'
RETURN c.name AS Country, count(m) AS MoviesProduced
ORDER BY MoviesProduced DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,False
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director' AND m.average_vote < 5
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.runtime > 150
WITH pc, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5
RETURN pc.name, movies_count",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director'
WITH m, count(p) AS directorCount
ORDER BY directorCount DESC
RETURN m.title AS MovieTitle, directorCount
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.average_vote < 4
RETURN l.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)
WHERE exists {
    (m)-[:HAS_KEYWORD]->(k:Keyword)
    WHERE k.name = 'Oscar'
}
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
WITH g, count(m) AS movieCount
ORDER BY movieCount ASC
LIMIT 5
RETURN g.name AS Genre, movieCount AS MoviesCount",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 100000000 AND m.average_vote > 7
RETURN m
ORDER BY m.average_vote DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WITH m, count(pc) AS num_companies
ORDER BY num_companies DESC
LIMIT 5
RETURN m.title, num_companies",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE v.revenue = 0
RETURN DISTINCT pc
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(a) AS NumberOfAdultFilms
ORDER BY NumberOfAdultFilms DESC
LIMIT 3",Verbose query,neoflix,False,False,False
"MATCH (a:Adult)-[:HAS_KEYWORD]->(k:Keyword)
WHERE a.budget < 500000
RETURN k.name, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (a:Adult {tagline: 'Trust Will Get You Killed'})
RETURN a
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.overview IS NOT NULL
RETURN m.title, size(split(m.overview, ' ')) AS word_count
ORDER BY word_count DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (v:Video)-[:IN_COLLECTION]->(c:Collection)
RETURN DISTINCT c
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)<-[:CAST_FOR]-(p:Person)-[:FROM_COUNTRY]->(c:Country)
WITH m, count(DISTINCT c) AS num_countries
ORDER BY num_countries DESC
LIMIT 5
RETURN m.title, num_countries",Verbose query,neoflix,True,False,False
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue > 0
RETURN m.title, m.budget, m.revenue, (toFloat(m.budget) / m.revenue) AS budgetToRevenueRatio
ORDER BY budgetToRevenueRatio DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (a:Adult)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN DISTINCT l.name
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('1990-01-01') AND m.release_date <= date('1999-12-31')
RETURN m
ORDER BY m.popularity DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage IS NOT NULL
RETURN m.title
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
WITH p, count(m) AS moviesCount
WHERE moviesCount > 0
MATCH (p)-[:CAST_FOR]->(v:Video)
WITH p, count(v) AS videosCount
WHERE videosCount > 0
RETURN p.name, moviesCount, videosCount
ORDER BY moviesCount DESC, videosCount DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.budget > 200000000
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 5",Verbose query,neoflix,False,True,False
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
WHERE m.poster_path ENDS WITH '.jpg'
RETURN k.name
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.runtime > 150
RETURN pc.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: ""United States of America""})
WHERE m.vote_count > 5000
RETURN m
ORDER BY m.release_date
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)
WHERE r.order = 0
RETURN p.name, count(m) AS leading_roles
ORDER BY leading_roles DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u.id AS UserID, avg(r.rating) AS AverageRating
ORDER BY AverageRating DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.release_date > date('2010-01-01')
RETURN a
ORDER BY a.release_date ASC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.average_vote IS NOT NULL
RETURN a.title, a.average_vote
ORDER BY a.average_vote DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (v:Video)-[:IN_GENRE]->(g:Genre)
WHERE v.popularity > 5
RETURN DISTINCT g.name
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(v) AS NumberOfVideos
ORDER BY NumberOfVideos DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
WITH m, count(p) AS cast_count
ORDER BY cast_count DESC
LIMIT 5
RETURN m.title, cast_count",Verbose query,neoflix,False,False,True
"MATCH (m:Movie {tagline: 'Roll the dice and unleash the excitement!'})
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director'
WITH p, count(m) AS films_directed
ORDER BY films_directed DESC
LIMIT 5
RETURN p.name AS Director, films_directed",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.revenue IS NOT NULL
RETURN g.name, sum(m.revenue) as totalRevenue
ORDER BY totalRevenue DESC
LIMIT 3",Verbose query,neoflix,False,False,False
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (v:Video)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN l.name AS Language, count(v) AS Count
ORDER BY Count DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'adventure'})
RETURN m
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(a:Adult)
WITH p, count(a) AS num_adult_films
ORDER BY num_adult_films DESC
LIMIT 3
RETURN p.name, num_adult_films",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)-[r:RATED]->(m)
WHERE r.timestamp = date('2020-01-01')
RETURN m.title AS MovieTitle
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE m.revenue IS NOT NULL
RETURN m.title, m.revenue, c.name
ORDER BY m.revenue DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'France'})
RETURN m.title AS MovieTitle
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (p:ProductionCompany)-[:PRODUCED_BY]-(a:Adult)
WITH p, count(a) AS numAdultFilms
ORDER BY numAdultFilms DESC
RETURN p.name, numAdultFilms
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.title STARTS WITH 'The'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.average_vote > 8.0
RETURN m
ORDER BY m.average_vote DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.budget > 500000
RETURN a
ORDER BY a.id
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,False
"MATCH (a:Adult)
WHERE a.average_vote IS NOT NULL
RETURN a.title, a.average_vote
ORDER BY a.average_vote DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
RETURN a.title, a.runtime
ORDER BY a.runtime DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
RETURN a.title, a.vote_count
ORDER BY a.vote_count DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.revenue IS NOT NULL
RETURN a
ORDER BY a.revenue DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'Animated'})
RETURN m.title AS MovieTitle
ORDER BY m.popularity DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH c, count(m) AS movie_count
ORDER BY movie_count ASC
LIMIT 3
RETURN c.name AS Country, movie_count AS Movies_Produced",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(ol:Language),
      (m)-[:SPOKEN_IN_LANGUAGE]->(sl:Language)
WHERE ol.id <> sl.id
RETURN m.title, ol.name AS original_language, sl.name AS spoken_language
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.budget > 50000000
RETURN DISTINCT l.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
WHERE m.average_vote IS NOT NULL
RETURN g.name AS Genre, avg(m.average_vote) AS AverageVote
ORDER BY AverageVote DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL AND m.popularity IS NOT NULL
RETURN m
ORDER BY m.popularity DESC, m.revenue ASC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage IS NOT NULL
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date.dayOfWeek = 'MONDAY'
RETURN m
ORDER BY m.release_date
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'love'
RETURN m.title, m.tagline
ORDER BY m.popularity DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('1990-01-01') AND m.release_date <= date('1999-12-31')
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path CONTAINS '/rh'
RETURN m
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE NOT EXISTS { (m)-[:IN_COLLECTION]->(:Collection) }
RETURN m
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
RETURN m.title AS MovieTitle, c.name AS CollectionName
ORDER BY m.popularity DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)
WITH pc, count(m) AS numMovies
ORDER BY numMovies ASC
LIMIT 3
RETURN pc.name, numMovies",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN l.id AS LanguageID, l.name AS LanguageName, count(m) AS MovieCount
ORDER BY MovieCount DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
WITH g, count(m) AS movieCount
ORDER BY movieCount ASC
LIMIT 3
RETURN g.name AS Genre, movieCount",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue > 0
RETURN m.title, m.budget, m.revenue, (toFloat(m.budget) / m.revenue) AS budgetToRevenueRatio
ORDER BY budgetToRevenueRatio DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.vote_count IS NOT NULL
RETURN m
ORDER BY m.vote_count ASC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.release_date IS NOT NULL
RETURN a.title, a.release_date
ORDER BY a.release_date ASC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:HAS_KEYWORD]->(k:Keyword)
WITH a, count(k) AS keyword_count
RETURN a.title, keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE NOT exists {
  (a)-[:PRODUCED_IN_COUNTRY]->(:Country)
}
RETURN a
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:IN_GENRE]->(g:Genre)
WITH v, count(g) AS genreCount
ORDER BY genreCount DESC
LIMIT 5
RETURN v.title AS VideoTitle, genreCount",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany)
WITH v, count(pc) AS num_companies
ORDER BY num_companies DESC
LIMIT 3
RETURN v.title AS VideoTitle, num_companies AS NumberOfProductionCompanies",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH v, count(DISTINCT c) AS countries_count
ORDER BY countries_count DESC
RETURN v.title, countries_count
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:HAS_KEYWORD]->(k:Keyword)
WITH v, count(k) AS keywordCount
ORDER BY keywordCount DESC
RETURN v.title, keywordCount
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WITH m, count(c) AS num_collections
ORDER BY num_collections DESC
LIMIT 5
RETURN m.title AS MovieTitle, num_collections AS NumberOfCollections",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(g) AS genreCount
ORDER BY genreCount DESC
LIMIT 3
RETURN m.title, genreCount",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, count(u) AS userCount
ORDER BY userCount DESC
LIMIT 5
RETURN m.title, userCount",Complex Aggregation Queries,neoflix,True,False,False
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WITH m, count(pc) AS num_companies
ORDER BY num_companies DESC
RETURN m.title, num_companies
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (c:Country)<-[:PRODUCED_IN_COUNTRY]-(m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH c, COUNT(DISTINCT l) AS languages_spoken
RETURN c.name AS country, languages_spoken
ORDER BY languages_spoken DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
RETURN m.title, count(l) AS num_languages
ORDER BY num_languages DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.department = 'Production'
WITH m, count(p) AS crew_count
ORDER BY crew_count DESC
LIMIT 5
RETURN m.title, crew_count",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WITH m, size((m)<-[:CAST_FOR]-(:Person)) AS cast_count
ORDER BY cast_count DESC
RETURN m.title, cast_count
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre {name: 'Animation'})
RETURN p.name AS PackageName
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package {name: 'Gold'})-[:PROVIDES_ACCESS_TO]->(g:Genre)
RETURN g.name AS GenreName
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package)<-[:FOR_PACKAGE]-(s:Subscription)
RETURN p.name AS PackageName, count(s) AS SubscriptionsCount
ORDER BY SubscriptionsCount DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package)
RETURN p
ORDER BY p.price DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (s:Subscription)-[:FOR_PACKAGE]->(p:Package)
RETURN s.id AS SubscriptionID, p.name AS PackageName, p.duration AS PackageDuration
ORDER BY p.duration DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre)
WITH p, count(g) AS genres_count
RETURN p.name, genres_count
ORDER BY genres_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
RETURN a.title, a.popularity
ORDER BY a.popularity DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:HAS_KEYWORD]->(k:Keyword)
WITH a, count(k) AS keywordCount
WHERE keywordCount = 1
RETURN a
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.revenue IS NOT NULL
RETURN a.title, a.revenue
ORDER BY a.revenue ASC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.poster_path IS NOT NULL
RETURN a.title, a.poster_path
ORDER BY a.popularity DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.tagline CONTAINS 'sex'
RETURN a
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country {id: ""IT""})
RETURN a.title AS Title, a.id AS ID
ORDER BY a.popularity DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)
RETURN v
ORDER BY v.popularity DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WITH c, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 3
RETURN c.name, movieCount",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE m.revenue IS NOT NULL
RETURN m.title, m.release_date, m.revenue
ORDER BY m.release_date ASC, m.revenue DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)
RETURN m.title, count(p) AS cast_count
ORDER BY cast_count DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person {gender: 1})-[:CAST_FOR]->(m:Movie)
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Action'})
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(ol:Language), (m)-[:SPOKEN_IN_LANGUAGE]->(sl:Language {id: 'en'})
WHERE ol.id <> 'en'
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL
RETURN m.title, m.budget, m.revenue, abs(m.revenue - m.budget) AS discrepancy
ORDER BY discrepancy DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.title <> m.original_title AND m.status = ""Released""
RETURN m.title AS CurrentTitle, m.original_title AS OriginalTitle, m.release_date AS ReleaseDate
ORDER BY m.release_date DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE c.backdrop_path = '/9FBwqcd9IRruEDUrTdcaafOMKUq.jpg'
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path ENDS WITH '.jpg'
RETURN m
ORDER BY m.id DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.status = 'Released' AND exists {
    MATCH (m2:Movie {id: m.id})
    WHERE m2.status = 'In Production'
}
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre), (m)-[:IN_COLLECTION]->(c:Collection)
WHERE NOT EXISTS {
    MATCH (m)-[:IN_GENRE]->(og:Genre)
    WHERE g.id = og.id
}
RETURN m.title, g.name, c.name
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WITH p, count(r) AS roles
ORDER BY roles DESC
LIMIT 3
RETURN p.name, roles",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)
WHERE r.character = 'Charlie Wilson'
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Drama'})
MATCH (m)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH c, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN c.name, movies_count",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.budget > 50000000
RETURN l.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
WHERE exists {
    MATCH (p)-[:CREW_FOR {job: 'Producer'}]->(m)
}
RETURN p
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.average_vote IS NOT NULL AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.average_vote ASC, m.revenue DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)
RETURN pc.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE date(m.release_date).dayOfWeek IN [6, 7]
RETURN m
ORDER BY m.release_date
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WITH c, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 3
RETURN c.name, movieCount",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany {id: 10})
RETURN v
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)-[:HAS_KEYWORD]->(k:Keyword)
WITH v, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3
RETURN v.title AS VideoTitle, keyword_count",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)<-[:RATED]-(u:User)
WITH v, count(u) AS userCount
ORDER BY userCount DESC
LIMIT 5
RETURN v.title, userCount",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage CONTAINS 'disney'
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m.title, m.runtime
ORDER BY m.runtime DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH m, count(l) AS languages_spoken
ORDER BY languages_spoken DESC
RETURN m.title, languages_spoken
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE pc.name CONTAINS 'Studios'
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
RETURN g.name AS Genre, count(m) AS MovieCount
ORDER BY MovieCount DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)
RETURN pc.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (l:Language)<-[:SPOKEN_IN_LANGUAGE]-(m:Movie)
RETURN l.name AS Language, count(m) AS MoviesCount
ORDER BY MoviesCount DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue ASC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.overview IS NOT NULL
RETURN m
ORDER BY size(m.overview) DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.vote_count
ORDER BY m.vote_count DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
RETURN m.title, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 120
RETURN m
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.status = 'Released' AND m.budget IS NOT NULL
RETURN m
ORDER BY m.budget DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date IS NOT NULL
RETURN m.title, m.release_date
ORDER BY m.release_date ASC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.average_vote IS NOT NULL
RETURN m.title, m.average_vote
ORDER BY m.average_vote DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date > date('2010-01-01')
RETURN m
ORDER BY m.release_date ASC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,False
"MATCH (a:Adult)
WHERE a.budget < 10000
RETURN a
ORDER BY a.budget DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.imdb_id STARTS WITH 'tt007'
RETURN a
ORDER BY a.imdb_id
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United States of America'})
WHERE a.average_vote IS NOT NULL
RETURN a.title, a.average_vote
ORDER BY a.average_vote ASC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.vote_count IS NOT NULL
RETURN a.title, a.vote_count
ORDER BY a.vote_count DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.tagline CONTAINS 'love'
RETURN a
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.poster_path = '/tzVK7nTnzUiVeFSZhOAIHmrgXUS.jpg'
RETURN a
ORDER BY a.average_vote DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.release_date.year % 4 = 0 AND NOT (a.release_date.year % 100 = 0 AND a.release_date.year % 400 <> 0)
RETURN a.title, a.release_date
ORDER BY a.release_date
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.runtime > 100
RETURN a
ORDER BY a.release_date
LIMIT 5",Pathfinding Queries,neoflix,False,False,False
"MATCH (v:Video)
WHERE v.revenue = 0
RETURN v
ORDER BY v.popularity DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE count{(u:User)-[:RATED]->(m)} = 5
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.budget IS NOT NULL
RETURN a
ORDER BY a.budget DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.revenue IS NOT NULL
RETURN v
ORDER BY v.revenue ASC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[cf:CREW_FOR]->(p:Person)
WHERE cf.department = 'Production'
WITH v, count(p) AS crewCount
ORDER BY crewCount DESC
LIMIT 5
RETURN v.title AS VideoTitle, crewCount",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path = '/vzmL6fP7aPKNKPRTFnZmiUfciyV.jpg'
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.release_date >= date('2010-01-01')
RETURN v.title, v.release_date
ORDER BY v.release_date ASC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime = 90
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Verbose query,neoflix,False,False,False
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'France'})
WHERE m.average_vote > 8
RETURN m
ORDER BY m.average_vote DESC
LIMIT 3",Verbose query,neoflix,True,False,False
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(a) AS NumberOfAdultFilms
ORDER BY NumberOfAdultFilms DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget = 50000000
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
RETURN pc.name AS ProductionCompanyName, SUM(m.revenue) AS TotalRevenue
ORDER BY TotalRevenue DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.tagline CONTAINS 'comedy'
RETURN v
ORDER BY v.average_vote DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WITH m, size((:Person)-[:CAST_FOR]->(m)) AS castSize
ORDER BY castSize DESC
LIMIT 3
RETURN m.title, castSize",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date <= date('1990-12-31')
RETURN m
ORDER BY m.release_date DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (u:User {id: 1})-[:RATED]->(m:Movie)
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.imdb_id STARTS WITH 'tt'
RETURN m.title, m.imdb_id
ORDER BY m.imdb_id
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.release_date >= date('2000-01-01')
RETURN a
ORDER BY a.release_date ASC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH m, count(l) AS languages_spoken
ORDER BY languages_spoken DESC
LIMIT 3
RETURN m.title, languages_spoken",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Universal Pictures'})
RETURN m
ORDER BY m.average_vote DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage CONTAINS 'disney'
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.vote_count
ORDER BY m.vote_count DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Producer'
WITH p, count(m) AS moviesProduced
WHERE moviesProduced > 5
RETURN p
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Lucasfilm'})
RETURN m.title AS MovieTitle
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > m.budget + 100000000
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Drama'})
WHERE m.budget < 10000000
RETURN m
ORDER BY m.release_date
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language),
      (m)-[:ORIGINAL_LANGUAGE]->(ol:Language)
WHERE l.id <> ol.id
RETURN m.title AS MovieTitle, l.name AS SpokenLanguage, ol.name AS OriginalLanguage
ORDER BY m.popularity DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
RETURN g.name AS Genre, count(m) AS MovieCount
ORDER BY MovieCount DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'})
WHERE m.runtime > 80
RETURN m
ORDER BY m.runtime DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[cf:CREW_FOR]->(m:Movie)
WHERE m.release_date > date('2010-01-01')
WITH p, count(cf) AS crew_credits
ORDER BY crew_credits DESC
LIMIT 3
RETURN p.name, crew_credits",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
WHERE m.runtime < 100
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'})
RETURN m.title AS MovieTitle
ORDER BY m.popularity DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(v:Video)
WHERE v.release_date > date('2010-01-01')
WITH p, count(r) AS roles
ORDER BY roles DESC
LIMIT 3
RETURN p.name, roles",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.release_date >= date('2000-01-01')
WITH g, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 3
RETURN g.name, movieCount",Complex Aggregation Queries,neoflix,True,False,False
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
WITH m, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 5
RETURN m.title, keyword_count",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director' AND m.average_vote IS NOT NULL
WITH p, avg(m.average_vote) AS avg_vote
RETURN p.name AS Director, avg_vote
ORDER BY avg_vote DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH m, count(DISTINCT l) AS num_languages
ORDER BY num_languages DESC
RETURN m.title, num_languages
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE m.average_vote > 7.5
RETURN c.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)
WITH p, m
WHERE size((m)-[:PRODUCED_BY]->(:ProductionCompany)) >= 5
RETURN p.name, collect(m.title) AS movies
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.status = 'In Production'
RETURN l.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH a, count(DISTINCT l) AS languages_spoken
ORDER BY languages_spoken DESC
RETURN a.title, languages_spoken
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE m.average_vote < 5
RETURN c.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CREW_FOR {job: ""Director""}]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH p, count(DISTINCT g) AS genreCount
WHERE genreCount >= 3
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.popularity > 20
WITH pc, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN pc.name, movies_count",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage IS NOT NULL AND m.release_date > date('2010-01-01')
RETURN m
ORDER BY m.release_date
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Science Fiction'})
RETURN m.title AS MovieTitle, m.popularity AS Popularity
ORDER BY m.popularity DESC
LIMIT 5",Verbose query,neoflix,False,True,False
"MATCH (m:Movie)
WHERE m.revenue > 500000000
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.vote_count > 2000 AND m.budget < 50000000
RETURN m
ORDER BY m.vote_count DESC
LIMIT 3",Verbose query,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.release_date >= date('1990-01-01') AND m.release_date <= date('1999-12-31')
RETURN m
ORDER BY m.release_date ASC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)<-[r:RATED]-(u:User)
WHERE r.rating >= 5
WITH m, count(u) AS userCount
WHERE userCount > 1
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, avg(r.rating) AS avg_rating
ORDER BY avg_rating ASC
LIMIT 5
RETURN u.id AS user_id, avg_rating",Verbose query,neoflix,False,False,True
"MATCH (a:Adult)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN l.name AS Language, count(a) AS AdultFilmsCount
ORDER BY AdultFilmsCount DESC
LIMIT 5",Verbose query,neoflix,True,False,False
"MATCH (v:Video)
WHERE v.homepage CONTAINS 'youtube'
RETURN v
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WITH m, count(r) AS crew_count
ORDER BY crew_count DESC
LIMIT 5
RETURN m.title AS MovieTitle, crew_count AS NumberOfCrewMembers",Verbose query,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.budget > 500000
RETURN a
ORDER BY a.release_date
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'})
RETURN m.title, m.budget
ORDER BY m.budget DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (v:Video)
WITH v, size((v)<-[:CAST_FOR]-(:Person)) AS cast_count
RETURN v.title, cast_count
ORDER BY cast_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path ENDS WITH '.jpg'
RETURN m
ORDER BY m.id
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH m, count(c) AS countries_count
WHERE countries_count > 3
RETURN m.title AS MovieTitle
ORDER BY m.popularity DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language {id: ""es""})
MATCH (m)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'})
RETURN m
LIMIT 3",Verbose query,neoflix,False,True,False
"MATCH (p:Person {name: ""Tom Hanks""})-[:CAST_FOR]->(m:Movie)
WHERE m.release_date > date(""1995-01-01"")
RETURN m
ORDER BY m.release_date
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (a:Adult)
RETURN a.title, a.popularity
ORDER BY a.popularity DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Action'})
WHERE m.revenue > 100000000
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Verbose query,neoflix,False,False,False
"MATCH (p:Package {name: 'Platinum'})-[:PROVIDES_ACCESS_TO]->(g:Genre)
RETURN g.name AS GenreName, count(g) AS AccessCount
ORDER BY AccessCount DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u.id, count(r) AS ratings_count
ORDER BY ratings_count DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)
WHERE r.character = 'Woody'
RETURN p.name, COUNT(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Verbose query,neoflix,False,False,False
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE m.poster_path = '/rhIRbceoE9lR4veEXuwCC2wARtG.jpg'
RETURN c
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (v:Video {title: 'Jonah: A VeggieTales Movie'})-[:HAS_KEYWORD]->(k:Keyword)
RETURN k.name
ORDER BY k.id ASC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(v) AS NumberOfVideos
ORDER BY NumberOfVideos DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie {title: 'Jumanji'})-[:SPOKEN_IN_LANGUAGE]->(l:Language)
RETURN l.name
LIMIT 3",Verbose query,neoflix,False,False,False
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]->(m:Movie)
RETURN pc.name, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:IN_GENRE]->(g:Genre)
RETURN g
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.vote_count > 5000
RETURN m
ORDER BY m.vote_count DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date > date('2010-01-01') AND m.budget > 100000000
RETURN m.title, m.release_date, m.budget
ORDER BY m.release_date ASC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (p:Person {name: 'John Doe'})-[:CREW_FOR {job: 'Director'}]->(m:Movie)
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (v:Video)
RETURN v.title, v.popularity
ORDER BY v.popularity DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 120
RETURN m
ORDER BY m.runtime DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {id: ""US""})
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.average_vote IS NOT NULL
RETURN m
ORDER BY m.average_vote DESC
LIMIT 5",Verbose query,neoflix,False,True,False
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH v, count(c) AS countriesProducedIn
ORDER BY countriesProducedIn DESC
LIMIT 5
RETURN v.title, countriesProducedIn",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH v, count(l) AS num_languages
ORDER BY num_languages DESC
RETURN v.title, num_languages
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.status = 'In Production'
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,False
"MATCH (a:Adult)
WHERE a.runtime > 90
RETURN a
ORDER BY a.release_date
LIMIT 3",Verbose query,neoflix,False,True,False
"MATCH (m:Movie)<-[:RATED {rating: 10}]-(u:User)
RETURN m.title AS MovieTitle, m.id AS MovieID
ORDER BY m.popularity DESC
LIMIT 5",Verbose query,neoflix,False,False,False
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'space'})
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie {original_title: 'Toy Story'})-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN l.name
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Warner Bros'})
WHERE m.revenue > 200000000
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m.title, avg(r.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (v:Video {title: 'Electrical Girl'})-[:IN_GENRE]->(g:Genre)
RETURN g
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (k:Keyword)<-[:HAS_KEYWORD]-(v:Video)
RETURN k.name AS Keyword, count(v) AS Frequency
ORDER BY Frequency DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director' AND m.budget > 150000000
RETURN p
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {id: 'US'})
WHERE m.average_vote < 5
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('2000-01-01') AND m.revenue IS NOT NULL
RETURN m.title, m.release_date, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.runtime < 30
RETURN v
ORDER BY v.runtime ASC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN l.name AS Language, count(m) AS MoviesCount
ORDER BY MoviesCount DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
WHERE m.budget > 50000000
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (a:Adult {tagline: 'Humiliation. Rape. Murder. You know the drill.'})
RETURN a
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Comedy'})
MATCH (m)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(m) AS MoviesProduced
ORDER BY MoviesProduced DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'adventure'
RETURN m
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date < date('2000-01-01') AND m.popularity IS NOT NULL
RETURN m.title, m.popularity
ORDER BY m.popularity DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.budget < 5000
RETURN v
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'})
WHERE m.revenue IS NOT NULL
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 20000000
RETURN m
ORDER BY m.release_date
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE v.revenue = 0
RETURN pc
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(v:Video)
RETURN u.id, count(r) AS ratings_count
ORDER BY ratings_count DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.vote_count > 100
RETURN m
ORDER BY m.average_vote ASC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m.title, m.runtime
ORDER BY m.runtime DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (a:Adult)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
RETURN l.name, count(a) AS num_adult_films
ORDER BY num_adult_films DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Verbose query,neoflix,False,False,True
"MATCH (a:Adult)
RETURN a.title, a.popularity
ORDER BY a.popularity DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN l.name AS Language, count(a) AS NumberOfAdultFilms
ORDER BY NumberOfAdultFilms DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name, count(a) AS num_adult_films
ORDER BY num_adult_films DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person {name: ""Tom Hanks""})-[:CREW_FOR {job: ""Producer""}]->(m:Movie)
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime = 90.0
RETURN m",Complex Retrieval Queries,neoflix,False,True,False
"MATCH (m:Movie)
RETURN m
ORDER BY m.release_date DESC
LIMIT 5",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'space'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
RETURN m.title, count(k) AS keyword_count
ORDER BY keyword_count DESC",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)<-[r:RATED]-(u:User)
WHERE r.timestamp >= date('2015-01-01')
RETURN m.title, m.id, r.rating, r.timestamp",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget < 10000000 AND m.revenue > 100000000
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (u:User {id: 1})-[:RATED]->(m:Movie)
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE c.name <> ""United States of America""
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.status = 'Released' AND m.vote_count > 1000
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.overview CONTAINS 'adventure'
RETURN m",Complex Retrieval Queries,neoflix,True,False,False
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue > 0
RETURN m.title, m.budget, m.revenue, (toFloat(m.budget) / m.revenue) AS budgetToRevenueRatio
ORDER BY budgetToRevenueRatio DESC
LIMIT 5",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WITH m, count(pc) AS num_companies
WHERE num_companies > 1
RETURN m.title AS MovieTitle, num_companies AS NumberOfProductionCompanies",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person {name: ""Tom Hanks""})-[:CAST_FOR {order: 0}]->(m:Movie)
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:IN_GENRE]->(g:Genre)
RETURN g.name AS GenreName",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE size{(m)-[:SPOKEN_IN_LANGUAGE]->(:Language)} > 3
RETURN m.title, count{(m)-[:SPOKEN_IN_LANGUAGE]->(:Language)} AS languages_count",Complex Retrieval Queries,neoflix,False,True,False
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language {id: 'en'})
WHERE m.tagline IS NOT NULL
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage IS NOT NULL
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date < date('2000-01-01') AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('1990-01-01') AND m.release_date <= date('1999-12-31')
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)<-[:RATED {rating: 5.0}]-(u:User)
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CREW_FOR {job: ""Director""}]->(m:Movie)
WHERE exists {
    MATCH (p)-[:CAST_FOR]->(:Movie)
}
RETURN m.title AS MovieDirected, p.name AS Director",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Package {name: 'Ultimate'})-[:PROVIDES_ACCESS_TO]->(g:Genre)
RETURN g",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person {name: 'Tom Hanks'})-[:CAST_FOR]->(m:Movie)
RETURN m.title AS MovieTitle, m.id AS MovieID",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.popularity ASC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(ol:Language),
      (m)-[:SPOKEN_IN_LANGUAGE]->(sl:Language)
WHERE ol.id <> sl.id
RETURN m.title, ol.name AS original_language, sl.name AS spoken_language",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:SPOKEN_IN_LANGUAGE]->(l:Language)
RETURN l.id, l.name",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.budget > 50000000
RETURN DISTINCT pc.name",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:IN_GENRE]->(g:Genre)
RETURN g.name AS GenreName",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person {name: 'Tom Hanks'})-[:CAST_FOR]->(m:Movie)
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'})
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'})
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 100000000
RETURN count(m) AS NumberOfMovies",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('2001-01-01')
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.vote_count IS NOT NULL
RETURN m
ORDER BY m.vote_count DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Jumanji'})-[:SPOKEN_IN_LANGUAGE]->(l:Language)
RETURN l.name AS SpokenLanguages",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 120
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.budget > 500000
RETURN a.title, a.budget",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.average_vote IS NOT NULL
RETURN a.title, a.average_vote
ORDER BY a.average_vote DESC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (a:Adult {status: 'Released'})
RETURN a",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue = 0
RETURN m",Complex Retrieval Queries,neoflix,True,False,False
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
RETURN m.title, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 1",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE NOT EXISTS {
    MATCH (c)-[:SPEAKS_LANGUAGE]->(l:Language {name: 'English'})
}
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE c.poster_path IS NOT NULL
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.average_vote IS NOT NULL
RETURN m
ORDER BY m.average_vote ASC
LIMIT 5",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE size((m)-[:IN_GENRE]->(:Genre)) > 3
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.backdrop_path IS NOT NULL
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
WHERE exists {
  MATCH (p)-[:CREW_FOR]->(m)
}
RETURN m.title AS MovieTitle, p.name AS PersonName",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage IS NOT NULL
RETURN m.title, m.homepage",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path IS NOT NULL
RETURN m
ORDER BY m.id ASC
LIMIT 5",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Drama'})
WHERE m.runtime > 120
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
RETURN m",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path ENDS WITH '.jpg'
RETURN m
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage IS NOT NULL
RETURN m",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date > date('2000-01-01')
RETURN m.title
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.vote_count
ORDER BY m.vote_count DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE c.backdrop_path = '/9FBwqcd9IRruEDUrTdcaafOMKUq.jpg'
RETURN m.title AS MovieTitle, m.id AS MovieID",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person {name: ""Tom Hanks""})-[:CAST_FOR]->(m:Movie)
RETURN m
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language {id: 'en'})
RETURN m",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Kiswahili'})
RETURN m.title AS MovieTitle
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.average_vote IS NOT NULL
RETURN m
ORDER BY m.average_vote DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: ""United States of America""})
RETURN m",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'excitement'
RETURN m
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.id DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'})
RETURN m",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'})
RETURN m.title AS MovieTitle
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (u:User {id: 1})-[:RATED]->(m:Movie)
RETURN m",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: ""Toy Story Collection""})
RETURN m
ORDER BY m.release_date
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 100
RETURN m",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: ""Pixar Animation Studios""})
RETURN m.title AS MovieTitle
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.popularity
ORDER BY m.popularity DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 50000000
RETURN m
ORDER BY m.release_date
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('1995-01-01') AND m.release_date <= date('1995-12-31')
RETURN m",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie {status: 'Released'})
RETURN m
ORDER BY m.release_date DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United States of America'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person {name: ""Tom Hanks""})-[:CREW_FOR]->(m:Movie)
RETURN m.title
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.average_vote < 5
RETURN m
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'})
WHERE m.status = 'Released'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.average_vote IS NOT NULL
RETURN m.title, m.average_vote
ORDER BY m.average_vote DESC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: ""Toy Story Collection""})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m.title, m.runtime
ORDER BY m.runtime DESC
LIMIT 5",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE count{(u:User)-[:RATED]->(m)} > 5000
RETURN m",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)
RETURN m.title, m.popularity
ORDER BY m.popularity DESC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: ""Pixar Animation Studios""})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 50000000
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person {name: 'John Williams'})-[:CREW_FOR {job: 'Composer'}]->(m:Movie)
RETURN m.title AS MovieTitle, m.release_date AS ReleaseDate",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget = 30000000
RETURN m.title
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue ASC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.vote_count > 500
RETURN m
ORDER BY m.vote_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'love'
RETURN m",Simple Retrieval Queries,neoflix,True,False,False
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'based on novel'})
RETURN m.title AS MovieTitle
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH m, count(c) AS num_countries
WHERE num_countries > 1
RETURN m.title AS MovieTitle, num_countries",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.imdb_id STARTS WITH 'tt'
RETURN m
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE size((:User)-[:RATED]->(m)) >= 100
RETURN m",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH m, count(l) AS num_languages
WHERE num_languages > 1
RETURN m.title AS MovieTitle
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)
RETURN m.title, m.budget
ORDER BY m.budget DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime < 85
RETURN m",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 300000000
RETURN m",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Spanish'})
RETURN m.original_title AS OriginalTitle",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director'
RETURN p.name, count(m) AS directed_movies
ORDER BY directed_movies DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person {name: ""Tom Hanks""})-[:CAST_FOR]->(m:Movie)
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Kiswahili'})
RETURN m.title, m.average_vote
ORDER BY m.average_vote DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date > date(""2000-01-01"")
RETURN m
ORDER BY m.budget DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.vote_count IS NOT NULL
RETURN m.title, m.imdb_id, m.vote_count
ORDER BY m.vote_count DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (u:User {id: 1})-[:RATED]->(m:Movie)
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'})
RETURN m.title AS MovieTitle
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: ""Toy Story Collection""})
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: ""Pixar Animation Studios""})
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: ""United States of America""})
WHERE m.status = ""Released""
RETURN m.title, m.release_date, m.revenue
ORDER BY m.release_date DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,False
"MATCH (a:Adult {status: 'In Production'})
RETURN a.title, a.release_date, a.status",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (a:Adult)
WHERE a.budget > 0 AND a.revenue > 0
RETURN a.title, a.revenue, a.budget, (a.revenue / a.budget) AS efficiency
ORDER BY efficiency DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.homepage IS NOT NULL
RETURN a.title, a.homepage",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
RETURN a.title, a.runtime
ORDER BY a.runtime DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (v:Video)-[r:RATED]->(u:User)
WHERE r.rating > 8.0
RETURN v.title, v.release_date, r.rating
ORDER BY r.rating DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:HAS_KEYWORD]->(k:Keyword {name: 'murder'})
RETURN a.title AS Title, a.id AS ID",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.average_vote IS NOT NULL
RETURN a
ORDER BY a.average_vote DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.runtime IS NOT NULL
RETURN a
ORDER BY a.runtime DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_BY]->(pc:ProductionCompany)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE c.name <> ""United States of America""
RETURN a.title AS AdultFilmTitle, pc.name AS ProductionCompanyName, c.name AS CountryName",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, avg(a.popularity) AS AveragePopularity
ORDER BY AveragePopularity DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.revenue = 0.0
RETURN v
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.budget < 100000
RETURN v",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Drama'})
MATCH (m)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH c, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN c.name AS Country, movies_count",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person {gender: 2})-[:CREW_FOR {job: ""Director""}]->(m:Movie)
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'excitement'
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 120
RETURN m
ORDER BY m.runtime DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.id >= 15 AND g.id <= 50
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (v:Video)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(v) AS VideoCount
ORDER BY VideoCount DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (s:Subscription)-[:FOR_PACKAGE]->(p:Package {name: 'Ultimate'})
RETURN s
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre {name: 'Animation'})
RETURN p
LIMIT 3",Pathfinding Queries,neoflix,False,True,False
"MATCH (a:Adult)
WHERE a.tagline CONTAINS 'murder'
RETURN a.title, a.tagline, a.imdb_id
ORDER BY a.popularity DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Italian'})
RETURN a
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.runtime < 60
RETURN v
ORDER BY v.runtime ASC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.average_vote IS NOT NULL
RETURN v
ORDER BY v.average_vote DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m.title, m.id, r.timestamp
ORDER BY r.timestamp DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path IS NOT NULL
RETURN m.title, count(m.poster_path) AS posterVariations
ORDER BY posterVariations DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue = 0
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage IS NOT NULL
RETURN m
ORDER BY m.popularity DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.title <> m.original_title AND m.original_language = 'en'
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'adventure'
RETURN m
ORDER BY m.average_vote DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date IS NOT NULL
RETURN m
ORDER BY m.release_date ASC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE pc.id > 1000
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l1:Language {id: 'en'}),
      (m)-[:SPOKEN_IN_LANGUAGE]->(l2:Language {id: 'es'})
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date.month >= 10 AND m.release_date.month <= 12
RETURN m
ORDER BY m.release_date.year DESC, m.release_date.month DESC, m.release_date.day DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,False
"MATCH (p:Person)-[cf:CAST_FOR]->(m:Movie)
WITH m, count(DISTINCT p.gender) AS genderDiversity
ORDER BY genderDiversity DESC
RETURN m.title, m.id, genderDiversity
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'based on novel'})
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH m, count(c) AS countries_count
WHERE countries_count > 1
RETURN m
ORDER BY m.popularity DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
RETURN m.title, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Pathfinding Queries,neoflix,True,False,False
"MATCH (m:Movie)-[r:RATED]->(u:User)
WHERE r.rating > 8.0
RETURN m.title, m.id, r.rating
ORDER BY r.rating DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.popularity > 15
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Pathfinding Queries,neoflix,True,False,False
"MATCH (m:Movie)
WHERE m.average_vote IS NOT NULL
RETURN m
ORDER BY m.average_vote ASC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date IS NOT NULL
RETURN m
ORDER BY m.release_date ASC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE size((:User)-[:RATED]->(m)) > 5000
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.release_date > date(""2010-01-01"") AND a.status = 'Released'
RETURN a.title, a.release_date, a.status",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (a:Adult)-[:ORIGINAL_LANGUAGE]->(lang:Language)
WHERE exists {
    (u:User)-[:RATED]->(a)
}
RETURN lang.name AS Language, avg(r.rating) AS AverageRating
ORDER BY AverageRating DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (a:Adult)
WHERE a.overview IS NOT NULL
RETURN a.title, a.overview
ORDER BY a.vote_count DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.runtime > 90
RETURN a.title, a.runtime",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(a) AS NumberOfAdultFilms
ORDER BY NumberOfAdultFilms DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video {title: 'Jonah: A VeggieTales Movie'})-[:HAS_KEYWORD]->(k:Keyword)
RETURN k.name AS Keyword",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
RETURN v",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (v:Video)
RETURN v
ORDER BY v.popularity DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.runtime < 30
RETURN v",Simple Aggregation Queries,neoflix,True,False,False
"MATCH (v:Video)-[:IN_GENRE]->(g:Genre)
RETURN g.name, count(v) AS videoCount
ORDER BY videoCount DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH l, count(m) AS movieCount
WHERE movieCount > 5
RETURN l.name, movieCount",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:CREW_FOR]->(p:Person)
RETURN DISTINCT p.job AS Jobs",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(g) AS genreCount
WHERE genreCount > 1
RETURN m
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE size((m)-[:HAS_KEYWORD]->(:Keyword)) = 3
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m.title, m.runtime
ORDER BY m.runtime DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie {tagline: 'Roll the dice and unleash the excitement!'})
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date IS NOT NULL
RETURN m
ORDER BY m.release_date ASC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United States of America'})
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (u:User {id: 1})-[:RATED]->(m:Movie)
RETURN m",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE EXISTS { (u:User)-[:RATED]->(m) }
RETURN m.title, count{(u)-[:RATED]->(m)} AS ratingsCount
ORDER BY ratingsCount DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'})
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)
RETURN pc.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE m.revenue > 200000000
RETURN DISTINCT c.name",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:ProductionCompany)-[:PRODUCED_BY]->(a:Adult)
WITH p, count(a) AS adultFilmCount
ORDER BY adultFilmCount DESC
RETURN p.name, adultFilmCount
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:IN_GENRE]->(g:Genre {name: 'Horror'})
RETURN a.title AS Title, a.id AS ID",Simple Aggregation Queries,neoflix,False,True,False
"MATCH (a:Adult)
RETURN a.title, a.popularity
ORDER BY a.popularity DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre {name: 'Animation'})
RETURN p",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.popularity IS NOT NULL
RETURN g.name, m.popularity
ORDER BY m.popularity DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue = 0
RETURN m
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
WHERE p.profile_path ENDS WITH 'jpg'
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'})
RETURN m
ORDER BY m.release_date
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE EXISTS { (m)-[:IN_COLLECTION]->(:Collection) }
RETURN DISTINCT pc.name",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE m.average_vote > 7.0
RETURN DISTINCT c.name
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue > 0
RETURN m.title, m.budget, m.revenue, (toFloat(m.budget) / m.revenue) AS budgetToRevenueRatio
ORDER BY budgetToRevenueRatio DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
RETURN m.title, count(k) AS keyword_count
ORDER BY keyword_count DESC",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH m, count(l) AS num_languages
WHERE num_languages > 3
RETURN m.title, num_languages",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WITH m ORDER BY m.budget DESC LIMIT 1
MATCH (p:Person)-[r:CREW_FOR]->(m)
RETURN p.name, r.job
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path ENDS WITH '.jpg'
RETURN m
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE v.budget > 500000
RETURN c.name, count(v) AS num_videos
ORDER BY num_videos DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH m, count(c) AS num_countries
WHERE num_countries > 1
RETURN m.title AS MovieTitle, num_countries",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH c, count(m) AS movie_count
WHERE movie_count > 10
RETURN c.name AS Country, movie_count",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'adventure'})
WHERE m.popularity > 15
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN m.title, l.name AS original_language
ORDER BY m.average_vote DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.status = 'In Production'
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > m.budget
RETURN m.title, m.revenue, m.budget",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('1990-01-01') AND m.release_date <= date('1999-12-31')
RETURN m
ORDER BY m.vote_count DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person {name: ""Tom Hanks""})
MATCH (m:Movie)<-[:CAST_FOR]-(p)
WHERE exists {
  MATCH (p)-[:CREW_FOR]->(m)
}
RETURN m",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(v:Video)
RETURN v.title, AVG(r.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 3",Simple Aggregation Queries,neoflix,True,False,False
"MATCH (p:Package {name: 'Ultimate'})-[:PROVIDES_ACCESS_TO]->(g:Genre)
RETURN g.name AS GenreName",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (p:Package)
WHERE p.name IN ['Gold', 'Platinum']
RETURN p.name AS PackageName, p.price AS Price",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (s:Subscription)
WHERE s.expiresAt.year = 2020
RETURN s
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH pc, count(DISTINCT g) AS genres_count
RETURN pc.name, genres_count
ORDER BY genres_count DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL
RETURN m.title, m.tagline
ORDER BY length(m.tagline) DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WITH m, count(c) AS num_collections
WHERE num_collections > 1
RETURN m.title AS MovieTitle, num_collections
ORDER BY num_collections DESC
LIMIT 5",Verbose query,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE m.budget < 5000000 AND r.job = 'Director'
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > m.budget
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Kiswahili'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person {name: 'Brad Pitt'})-[:CAST_FOR]->(m:Movie)
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.overview CONTAINS 'adventure'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.release_date < date('1980-01-01')
WITH pc, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 3
RETURN pc.name, movies_produced",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.vote_count < 50
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language)
WHERE l.id <> 'en'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.popularity > 15
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL
RETURN m
ORDER BY m.budget ASC
LIMIT 5",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 150
RETURN m",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'romance'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE c.name = 'China'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 100000000 AND m.popularity < 10
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.status = 'Released' AND m.average_vote < 4
RETURN m",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE r.rating = 10
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue = 76578911.0
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.average_vote = 7.1
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'surprise'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person)-[cf:CREW_FOR]->(m:Movie)
WHERE p.gender = 2 AND cf.department = 'Production' AND cf.job = 'Director'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie {id: 862})
WHERE r.job = 'Director'
RETURN p.name AS DirectorName",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime < 80 AND m.budget > 20000000
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.average_vote DESC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('1995-01-01') AND m.release_date <= date('1995-01-31')
RETURN m",Complex Retrieval Queries,neoflix,False,True,False
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE c.backdrop_path = '/9FBwqcd9IRruEDUrTdcaafOMKUq.jpg'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path = '/eoWvKD60lT95Ss1MYNgVExpo5iU.jpg'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.average_vote < 3
RETURN m",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Warner Bros.'})
WHERE m.revenue > 500000000
RETURN m",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)
RETURN m.title AS MovieTitle, count{(u:User)-[:RATED]->(m)} AS RatingsCount
ORDER BY RatingsCount DESC",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('1995-01-01') AND m.release_date <= date('1995-12-31')
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.vote_count > 5000
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'family'})
WHERE m.release_date >= date({year: date().year - 5, month: date().month, day: date().day})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE exists {
  (m)-[:ORIGINAL_LANGUAGE]->(:Language {name: 'Spanish'})
}
RETURN DISTINCT pc.name",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.popularity < 5 AND m.popularity > 2
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Gaeilge'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE c.backdrop_path = '/9FBwqcd9IRruEDUrTdcaafOMKUq.jpg'
RETURN m",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)
RETURN m
ORDER BY m.release_date ASC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {id: 10770})
RETURN m",Complex Retrieval Queries,neoflix,False,True,False
"MATCH (m:Movie)
WHERE m.status = 'Released' AND m.budget > 25000000
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.average_vote = 7.7
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path ENDS WITH 'T4B.jpg'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)-[:LOCATED_IN]->(c:Country {name: 'France'})
RETURN m.title AS MovieTitle, pc.name AS ProductionCompanyName",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)<-[:RATED {rating: 5.0}]-(u:User)
RETURN m",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (p:Person {name: 'Christopher Nolan'})-[:CREW_FOR {job: 'Director'}]->(m:Movie)
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WITH avg(m.runtime) AS avgRuntime
MATCH (movie:Movie)
WHERE movie.runtime > avgRuntime
RETURN movie",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH m, count(c) AS countries_count
WHERE countries_count > 3
RETURN m.title AS MovieTitle, countries_count",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.budget < 1000000 AND exists{
  MATCH (m)-[:WON]->(:Award)
}
RETURN m.title, m.budget",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[r:RATED]->(u:User)
WHERE m.revenue = 0 AND r.rating >= 8
RETURN m.title, m.id, r.rating, u.id",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'high school'})
WHERE m.average_vote > 6
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m.title, m.runtime
ORDER BY m.runtime DESC
LIMIT 5",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l1:Language {name: 'English'})
MATCH (m)-[:SPOKEN_IN_LANGUAGE]->(l2:Language {name: 'Spanish'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL
RETURN m
ORDER BY m.release_date DESC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget = 0
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 100000000 AND m.release_date > date('2000-01-01')
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m1:Movie {title: 'Toy Story'})
MATCH (m2:Movie)
WHERE m1.runtime = m2.runtime AND m1 <> m2
RETURN m2",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.average_vote IS NOT NULL
RETURN a.title, a.average_vote
ORDER BY a.average_vote DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
RETURN a.title, a.budget
ORDER BY a.budget DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(a) AS NumberOfAdultFilms
ORDER BY NumberOfAdultFilms DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(a:Adult {title: 'Standoff'})
RETURN u
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(a) AS NumberOfAdultFilms
ORDER BY NumberOfAdultFilms DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:HAS_KEYWORD]->(k:Keyword)
RETURN k.name, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
RETURN v.title
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)
RETURN v.title, v.popularity
ORDER BY v.popularity DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)
RETURN v.title, v.runtime
ORDER BY v.runtime DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, sum(v.revenue) AS TotalRevenue
ORDER BY TotalRevenue DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:IN_COLLECTION]->(c:Collection)
WHERE v.average_vote > 7
RETURN c
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN l.name AS Language, count(a) AS NumberOfAdultFilms
ORDER BY NumberOfAdultFilms DESC
LIMIT 5",Simple Aggregation Queries,neoflix,True,False,False
"MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre {name: 'Animation'})
RETURN p
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (s:Subscription)
RETURN s
ORDER BY s.expiresAt ASC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package)
RETURN p
ORDER BY p.price DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package {name: 'Ultimate'})-[:PROVIDES_ACCESS_TO]->(g:Genre)
RETURN g
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m)
WITH pc, count(DISTINCT (m)-[:IN_GENRE]->(:Genre)) AS genreCount
RETURN pc.name, genreCount
ORDER BY genreCount DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (c:Country)<-[:PRODUCED_IN_COUNTRY]-(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH c, count(DISTINCT g) AS genres_count
ORDER BY genres_count DESC
RETURN c.name AS country, genres_count
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue = 0
RETURN m
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.poster_path ENDS WITH 'jpg'
RETURN v
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WITH c, max(m.release_date) AS maxDate, min(m.release_date) AS minDate
ORDER BY maxDate - minDate DESC
LIMIT 5
RETURN c.name AS CollectionName, minDate, maxDate, maxDate - minDate AS DateRange",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.tagline CONTAINS 'sex'
RETURN a
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
WITH g, count(m) AS movieCount
ORDER BY movieCount ASC
LIMIT 3
RETURN g.name AS Genre, movieCount",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (c:Collection)<-[:IN_COLLECTION]-(m:Movie)
WITH c, count(m) AS movieCount
WHERE movieCount > 5
RETURN c
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.imdb_id STARTS WITH 'tt00'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (v:Video)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
RETURN l.name, count(v) AS num_videos
ORDER BY num_videos DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.revenue > 100000000
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'explosive'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date.year % 4 = 0 AND (m.release_date.year % 100 <> 0 OR m.release_date.year % 400 = 0)
RETURN m.title, m.release_date",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.backdrop_path = '/iWahPsY3hsKOizZHgzQcAxv4O3B.jpg'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Disney'})
RETURN m.title, m.budget
ORDER BY m.budget DESC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 120
RETURN m
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date > date('2010-01-01') AND m.vote_count > 1000
RETURN m
ORDER BY m.release_date
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.title CONTAINS 'Toy Story'
RETURN m
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.budget
ORDER BY m.budget DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (l:Language)<-[:ORIGINAL_LANGUAGE]-(m:Movie)
WITH l, count(m) AS movieCount
WHERE movieCount > 10
RETURN l.id, l.name
ORDER BY movieCount DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH c, count(m) AS movie_count
WHERE movie_count > 50
RETURN c.name AS country, movie_count
ORDER BY movie_count DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,True,False
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
RETURN g.name AS Genre, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.budget > 50000000
WITH pc, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN pc.name, movies_count",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'})
RETURN m
ORDER BY m.release_date DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
RETURN p.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:HAS_KEYWORD]->(k:Keyword)
RETURN k.name
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u.id, count(r) AS ratings_count
ORDER BY ratings_count DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.popularity
ORDER BY m.popularity DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m.title, m.runtime
ORDER BY m.runtime DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.vote_count > 1000
RETURN m
ORDER BY m.average_vote DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path STARTS WITH '/r'
RETURN m
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'})
RETURN m.title AS MovieTitle
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (u:User {id: 1})-[:RATED]->(m:Movie)
RETURN m
ORDER BY m.release_date DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]->(v:Video)
RETURN pc.name, count(v) AS NumberOfVideos
ORDER BY NumberOfVideos DESC
LIMIT 5",Simple Aggregation Queries,neoflix,True,False,False
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)
WITH p, count(m) AS movieCount
WHERE movieCount > 10
RETURN p, movieCount",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime = 90.0
RETURN m",Complex Retrieval Queries,neoflix,False,True,False
"MATCH (m:Movie)
WHERE m.status = 'In Production'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
WHERE m.budget < 1000000
RETURN k.name, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.vote_count > 1000
RETURN m
ORDER BY m.vote_count DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)
WITH pc, count(DISTINCT (m)-[:SPOKEN_IN_LANGUAGE]->(:Language)) AS num_languages
WHERE num_languages > 1
RETURN pc
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date > date('2000-01-01') AND m.runtime IS NOT NULL
RETURN m.title, m.runtime
ORDER BY m.runtime DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m.title, AVG(r.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:IN_GENRE]->(g:Genre)
RETURN g.name
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'})
RETURN m.title, m.popularity
ORDER BY m.popularity DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.budget > 100000000
RETURN pc.name, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United States of America'})
WHERE m.revenue > 50000000
RETURN m
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (v:Video)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE v.budget > 500000
RETURN l.name, count(v) AS num_videos
ORDER BY num_videos DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
WHERE m.budget > 50000000
RETURN m.title
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
WHERE m.average_vote < 5
RETURN k.name, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 150 AND m.release_date < date('2010-01-01')
RETURN m
ORDER BY m.release_date DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Father of the Bride Part II'})-[:IN_GENRE]->(g:Genre)
RETURN g
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date({year: date().year - 5, month: date().month, day: date().day}) AND m.popularity IS NOT NULL
RETURN m
ORDER BY m.popularity DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:HAS_KEYWORD]->(k:Keyword)
WITH a, count(k) AS num_keywords
ORDER BY num_keywords DESC
LIMIT 5
RETURN a.title, num_keywords",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage IS NOT NULL
RETURN m.title
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Comedy'})
RETURN m.title, m.popularity
ORDER BY m.popularity DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Drama'})
MATCH (m)-[:PRODUCED_BY]->(pc:ProductionCompany)
WITH pc, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN pc.name, movies_count",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL AND m.release_date > date('2010-01-01')
RETURN m
ORDER BY m.release_date
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.status = 'Released'
RETURN l.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country {id: ""IT""})
RETURN a.title AS Title
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (v:Video)-[:HAS_KEYWORD]->(k:Keyword)
WHERE v.budget > 1000000
RETURN k.name, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.average_vote IS NOT NULL
RETURN a.title, a.average_vote
ORDER BY a.average_vote DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
MATCH (m)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN l.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United States of America'})
WHERE m.revenue IS NOT NULL
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
RETURN g.name AS Genre, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date < date('2000-01-01') AND m.popularity IS NOT NULL
RETURN m.title AS MovieTitle, m.popularity AS Popularity
ORDER BY m.popularity DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie {title: 'Toy Story'})
RETURN p.name, r.character
ORDER BY r.order
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'})
MATCH (m)-[:PRODUCED_BY]->(pc:ProductionCompany)
RETURN DISTINCT pc
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE m.revenue > 100000000
RETURN DISTINCT c.name
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.popularity > 10
RETURN l.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,True,False
"MATCH (m:Movie {title: 'Waiting to Exhale'})-[:HAS_KEYWORD]->(k:Keyword)
RETURN k.name
ORDER BY k.id
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE m.budget > 50000000
WITH c, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN c.name, movies_count",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director' AND m.average_vote > 7.5
RETURN p.name, count(m) AS movies_directed
ORDER BY movies_directed DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'})
RETURN m
ORDER BY m.release_date DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person {name: 'Tom Hanks'})-[:CREW_FOR {job: 'Director'}]->(m:Movie)
RETURN m.title AS MovieTitle, m.revenue AS Revenue
ORDER BY m.revenue DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u.id, count(r) AS ratings_count
ORDER BY ratings_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'})
RETURN m.title AS MovieTitle, m.id AS MovieID
ORDER BY m.popularity DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Jonah: A VeggieTales Movie'})-[:IN_GENRE]->(g:Genre)
RETURN g
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
WITH m, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 5
RETURN m.title AS MovieTitle, keyword_count",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE m.runtime > 120
RETURN c.name, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'love'
RETURN m
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.revenue IS NOT NULL
RETURN l.id, l.name, sum(m.revenue) as total_revenue
ORDER BY total_revenue DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie), (p)-[:CAST_FOR]->(a:Adult)
WITH p, count(DISTINCT m) AS moviesCount, count(DISTINCT a) AS adultCount
WHERE moviesCount > 0 AND adultCount > 0
RETURN p.name
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)
WHERE m.revenue IS NOT NULL
RETURN pc.name, sum(m.revenue) AS total_revenue
ORDER BY total_revenue DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.runtime < 90
RETURN v
ORDER BY v.popularity DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path ENDS WITH '.jpg'
RETURN m.title
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
MATCH (m)-[:IN_GENRE]->(g:Genre)
RETURN g.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE m.revenue > 100000000
RETURN m.title, m.revenue, c.name
ORDER BY m.revenue DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (v:Video {title: 'Jonah: A VeggieTales Movie'})-[:IN_GENRE]->(g:Genre)
RETURN g
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date < date('2000-01-01') AND m.average_vote IS NOT NULL
RETURN m
ORDER BY m.average_vote ASC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)
RETURN m
ORDER BY m.release_date DESC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 120
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date < date('2000-01-01') AND m.average_vote > 8
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:SPOKEN_IN_LANGUAGE]->(l:Language)
RETURN l.name AS LanguageSpoken",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Spanish'})
RETURN m.original_title AS OriginalTitle",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE m.budget > 10000000
RETURN DISTINCT c.name",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.revenue > 200000000
RETURN DISTINCT pc.name",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (p:Person {name: 'Steven Spielberg'})-[:CREW_FOR {job: 'Director'}]->(m:Movie)
MATCH (m)-[:IN_GENRE]->(g:Genre)
RETURN DISTINCT g.name AS Genre",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)
WHERE r.character = 'Woody'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.vote_count
ORDER BY m.vote_count DESC
LIMIT 3",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path = '/rhIRbceoE9lR4veEXuwCC2wARtG.jpg'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director' AND m.budget > 50000000
RETURN DISTINCT p.name",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language {id: ""it""})
WHERE exists{(m)-[:WON_AWARD]->()}
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime < 85 AND m.release_date > date('2010-01-01')
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
WHERE m.popularity > 20
RETURN m",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE m.revenue < 1000000
RETURN m.title, m.revenue, c.name",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (c:Collection {name: 'Toy Story Collection'})<-[:IN_COLLECTION]-(m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN DISTINCT g.name",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie {imdb_id: 'tt0114709'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'excitement'
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United States of America'})
WHERE exists{ (m)-[:IN_GENRE]->(:Genre {name: 'Adult'}) }
RETURN m",Complex Retrieval Queries,neoflix,True,False,False
"MATCH (m:Movie)
WHERE m.homepage IS NOT NULL
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (u:User {id: 1})-[:RATED]->(m:Movie)
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.budget > 100000000
RETURN DISTINCT g.name",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'})
RETURN m",Complex Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE size{(m)<-[:RATED]-(:User)} >= 50
RETURN m.title AS MovieTitle
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('2015-01-01') AND m.status = 'Released'
RETURN m
ORDER BY m.popularity DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.runtime > 180
RETURN pc.name, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.runtime < 60
RETURN v
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE a.budget > 100000
RETURN l.name, count(a) AS num_films
ORDER BY num_films DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path ENDS WITH '/pQFoyx7rp09CJTAb932F2g8Nlho.jpg'
RETURN m.title
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
WHERE m.revenue > 200000000
RETURN k.name, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(:Collection)
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Alex & Emma'})-[:IN_GENRE]->(g:Genre)
RETURN g
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,False
"MATCH (m:Movie)
RETURN m
ORDER BY m.vote_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (a:Adult)
RETURN a.title, a.popularity
ORDER BY a.popularity DESC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.revenue IS NOT NULL
RETURN l.name, sum(m.revenue) as total_revenue
ORDER BY total_revenue DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date < date('1990-01-01')
RETURN m.title
ORDER BY m.release_date
LIMIT 5",Simple Retrieval Queries,neoflix,False,True,False
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)
RETURN pc.name AS ProductionCompanyName, sum(m.budget) AS TotalBudget
ORDER BY TotalBudget DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
RETURN v
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE a.vote_count > 10
RETURN l.name, count(a) AS num_films
ORDER BY num_films DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.runtime > 90
RETURN a.title
ORDER BY a.release_date
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language {id: 'en'})
MATCH (m)-[:HAS_KEYWORD]->(k:Keyword)
RETURN k.name, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH m, AVG(r.rating) AS avgRating
WHERE avgRating < 4.0
RETURN m.title, avgRating
ORDER BY avgRating ASC
LIMIT 5",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Nil Battey Sannata'})-[:IN_GENRE]->(g:Genre)
RETURN g
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United Kingdom'})
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 50000000
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person {name: ""Tom Hanks""})-[:CAST_FOR]->(m:Movie)
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Thriller'})
RETURN m.title, m.popularity
ORDER BY m.popularity DESC
LIMIT 3",Simple Retrieval Queries,neoflix,False,False,True
"MATCH (p:Person)
WHERE p.profile_path STARTS WITH '/p'
RETURN p
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date = DATE('1995-10-30')
RETURN m",Complex Retrieval Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language {id: 'en'})
RETURN m.original_title AS OriginalTitle
ORDER BY m.popularity DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Producer'
RETURN p.name, count(r) AS credits
ORDER BY credits DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH m, count(DISTINCT l) AS num_languages
ORDER BY num_languages DESC
LIMIT 3
RETURN m.title, num_languages",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 100000 AND m.vote_count = 10
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'space'})
WHERE m.status = 'Released'
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date = DATE('1995-12-22')
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.budget > 50000000
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
RETURN m.title, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[cf:CREW_FOR]->(m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: ""United States of America""})
WHERE cf.job = ""Director""
RETURN p.name, count(m) AS films_directed
ORDER BY films_directed DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,True,False
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.revenue > 100000000
RETURN l.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE m.average_vote > 8
RETURN DISTINCT c.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.runtime > 120
WITH pc, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN pc.name, movies_count",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date < date('2000-01-01') AND m.popularity IS NOT NULL
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)
WHERE m.status = 'Released'
WITH p, count(r) AS roles
ORDER BY roles DESC
RETURN p.name, roles
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u.id, count(r) AS ratings_count
ORDER BY ratings_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, avg(m.budget) AS avgBudget
ORDER BY avgBudget DESC
LIMIT 3
RETURN g.name AS Genre, avgBudget",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WITH c, count(m) AS num_movies
ORDER BY num_movies DESC
LIMIT 3
RETURN c.name, num_movies",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director' AND m.revenue IS NOT NULL
RETURN p.name, sum(m.revenue) as total_revenue
ORDER BY total_revenue DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[cf:CAST_FOR]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH p, g, count(m) AS movies_count
ORDER BY movies_count DESC
RETURN p.name, g.name, movies_count
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language)
WHERE EXISTS {
  (u:User)-[:RATED]->(m)
  WHERE m.average_vote IS NOT NULL
}
RETURN l.name AS Language, AVG(m.average_vote) AS AverageRating
ORDER BY AverageRating DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)
WHERE m.revenue IS NOT NULL
RETURN pc.name, avg(m.revenue) AS average_revenue
ORDER BY average_revenue DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, count(u) AS userCount
ORDER BY userCount DESC
RETURN m.title, userCount
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path ENDS WITH '.jpg'
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
WHERE m.runtime < 90
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 5",Complex Aggregation Queries,neoflix,True,False,False
"MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(:Genre)<-[:IN_GENRE]-(m:Movie)
RETURN p.name, p.duration
ORDER BY p.duration DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult {tagline: 'Humiliation. Rape. Murder. You know the drill.'})
RETURN a
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)-[:IN_GENRE]->(g:Genre)
WHERE v.budget > 100000
RETURN g.name, count(v) AS videoCount
ORDER BY videoCount DESC
LIMIT 3",Pathfinding Queries,neoflix,False,True,False
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(v) AS NumberOfVideos
ORDER BY NumberOfVideos DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
WHERE m.revenue > 1000000
RETURN k.name, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
WITH g, avg((m)<-[:RATED]-(:User).rating) AS avgRating
ORDER BY avgRating DESC
RETURN g.name AS Genre, avgRating
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(a:Adult)
RETURN pc.name, count(a) AS adultFilmCount
ORDER BY adultFilmCount DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)
WHERE m.status = 'Released'
RETURN p.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u.id, count(r) AS ratings_count
ORDER BY ratings_count DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 50000
WITH m, count{(m)-[:HAS_KEYWORD]->(:Keyword)} AS keywordCount
ORDER BY keywordCount DESC
RETURN m.title, m.budget, keywordCount
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.release_date IS NOT NULL
RETURN m.title, m.release_date, duration.between(m.release_date, date()).years AS years_since_release
ORDER BY years_since_release DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword {name: 'adventure'})
WHERE m.status = 'Released'
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL
RETURN m.title, m.tagline, size(split(m.tagline, ' ')) AS word_count
ORDER BY word_count DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE m.runtime < 90
RETURN m.title, m.runtime, c.name
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (a:Adult)
WHERE a.tagline IS NOT NULL
RETURN a.title, a.tagline
ORDER BY a.popularity DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)-[:HAS_KEYWORD]->(k:Keyword {name: 'action'})
WHERE v.status = 'Released'
RETURN v
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.status = 'Released' AND a.vote_count IS NOT NULL
RETURN a
ORDER BY a.vote_count ASC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language {id: 'es'})
WHERE m.status = 'Released'
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (v:Video)
WHERE v.overview IS NOT NULL
RETURN v.title, v.overview
ORDER BY size(v.overview) DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE count{(u:User)-[:RATED]->(a)} = 3
RETURN a
ORDER BY a.average_vote DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre {name: 'Drama'})
RETURN p
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (s:Subscription)
WHERE s.expiresAt.year = 2020
RETURN s
LIMIT 3",Pathfinding Queries,neoflix,True,False,False
"MATCH (p:Person {name: 'Tom Hanks'})-[:CAST_FOR]->(m:Movie)
RETURN m.title, count(p) AS num_cast_members
ORDER BY num_cast_members DESC
LIMIT 3",Pathfinding Queries,neoflix,True,False,False
"MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
WHERE v.runtime < 50
RETURN v.title, v.runtime
ORDER BY v.runtime ASC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.title <> m.original_title
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)-[:ORIGINAL_LANGUAGE]->(lang:Language)
WHERE v.runtime > 100
RETURN lang.name, count(v) AS num_videos
ORDER BY num_videos DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (l:Language)<-[:SPOKEN_IN_LANGUAGE]-(a:Adult)
WITH l, count(a) AS adultFilmCount
ORDER BY adultFilmCount DESC
RETURN l.id, l.name, adultFilmCount
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person)-[c:CAST_FOR]->(m:Movie)
WITH p, collect(DISTINCT (m)-[:IN_GENRE]->(:Genre)) AS genres
WHERE size(genres) >= 2
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL
RETURN m.title, m.tagline
ORDER BY length(m.tagline) DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.vote_count > 1000
RETURN pc.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.average_vote IS NOT NULL
RETURN a.title, a.average_vote
ORDER BY a.average_vote DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE v.revenue > 0
RETURN l.name, count(v) AS num_videos
ORDER BY num_videos DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[c:CAST_FOR]->(v:Video)
WHERE v.status = 'Released'
WITH p, count(c) AS roles
ORDER BY roles DESC
RETURN p.name, roles
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(a:Adult)
WITH g, count(a) AS adultCount
ORDER BY adultCount DESC
LIMIT 3
RETURN g.name AS Genre, adultCount",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH m, count(l) AS num_languages
ORDER BY num_languages DESC
LIMIT 5
RETURN m.title, num_languages",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director'
WITH p, sum(m.runtime) AS total_runtime
ORDER BY total_runtime DESC
LIMIT 3
RETURN p.name AS Director, total_runtime",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE EXISTS { (m)-[:ORIGINAL_LANGUAGE]->(l:Language) WHERE l.id <> 'en' }
RETURN c.name, count(m) AS num_movies
ORDER BY num_movies DESC
LIMIT 3",Complex Aggregation Queries,neoflix,True,False,False
"MATCH (v:Video)
RETURN v.title, v.popularity
ORDER BY v.popularity DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'})
WITH p, count(m) AS movies_count
WHERE movies_count >= 3
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.runtime > 120
RETURN l.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person {name: ""Tom Hanks""})-[:CAST_FOR]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, count(m) AS movieCount
ORDER BY movieCount DESC
RETURN g.name, movieCount
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:IN_GENRE]->(g:Genre {name: ""Comedy""})
RETURN pc.name, count(m) AS NumberOfComedyFilms
ORDER BY NumberOfComedyFilms DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage IS NOT NULL
RETURN m
ORDER BY length(m.homepage) DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.revenue IS NOT NULL
RETURN a.title, a.revenue
ORDER BY a.revenue DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r1:CREW_FOR]->(m:Movie)
WHERE r1.job = 'Director'
WITH p
MATCH (p)-[r2:CREW_FOR]->(a:Adult)
WHERE r2.job = 'Director'
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language {id: 'en'})
MATCH (m)-[:PRODUCED_BY]->(pc:ProductionCompany)
WITH pc, count(m) AS numMovies
ORDER BY numMovies DESC
LIMIT 3
RETURN pc.name, numMovies",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
WHERE m.revenue IS NOT NULL
RETURN k.name, SUM(m.revenue) AS totalRevenue
ORDER BY totalRevenue DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: ""Comedy""})
MATCH (m)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name, count(m) AS comedy_count
ORDER BY comedy_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name = 'Comedy'
WITH p, count(DISTINCT m) AS comedies
WHERE comedies > 0
MATCH (p)-[:CAST_FOR]->(m2:Movie)-[:IN_GENRE]->(g2:Genre)
WHERE g2.name = 'Drama'
WITH p, count(DISTINCT m2) AS dramas
WHERE dramas > 0
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.poster_path CONTAINS '/rh'
WITH l, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN l.id, l.name, movies_count",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.revenue IS NOT NULL
WITH g, avg(m.revenue) AS avgRevenue
ORDER BY avgRevenue ASC
RETURN g.name AS Genre, avgRevenue
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'adventure'
RETURN m
ORDER BY m.average_vote DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director' AND m.runtime > 180
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE|:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.poster_path CONTAINS '/9'
RETURN l.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('1990-01-01') AND m.release_date <= date('1999-12-31')
RETURN m
ORDER BY m.budget DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WHERE m.budget > 30000000
RETURN l.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path ENDS WITH 'jpg'
RETURN m
ORDER BY m.budget DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WHERE r.job = 'Director' AND m.average_vote > 7
WITH p, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN p.name, movies_count",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE exists{(m)-[:ORIGINAL_LANGUAGE]->(:Language {id: ""en""})}
RETURN c.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WHERE m.runtime > 100
WITH pc, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5
RETURN pc.name, movies_count",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
WITH p, count(DISTINCT m.tagline) AS distinctTaglines
WHERE distinctTaglines >= 3
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(v) AS VideoCount
ORDER BY VideoCount DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(v) AS NumberOfVideos
ORDER BY NumberOfVideos DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date > date('2010-01-01') AND m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(a:Adult)
WITH p, count(r) AS roles
ORDER BY roles DESC
LIMIT 3
RETURN p.name, roles",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: ""Pixar Animation Studios""})
MATCH (m)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(m) AS MoviesCount
ORDER BY MoviesCount DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date >= date('2001-01-01') AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CREW_FOR {job: ""Director""}]->(m:Movie)-[:IN_COLLECTION]->(c:Collection)
WITH p, count(DISTINCT c) AS num_collections
WHERE num_collections > 1
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN l.name AS Language, count(a) AS NumberOfAdultFilms
ORDER BY NumberOfAdultFilms DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(a:Adult)
RETURN pc.name, count(a) AS adultFilmCount
ORDER BY adultFilmCount DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
WHERE m.runtime > 150
RETURN k.name, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WHERE a.runtime > 60
RETURN c.name, count(a) AS AdultFilmCount
ORDER BY AdultFilmCount DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie), (p)-[:CAST_FOR]->(a:Adult)
WITH p, count(DISTINCT m) AS moviesCount, count(DISTINCT a) AS adultCount
WHERE moviesCount > 0 AND adultCount > 0
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
WHERE m.budget > 200000000
RETURN k.name, count(k) AS frequency
ORDER BY frequency DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL
RETURN m.title, m.tagline
ORDER BY size(split(m.tagline, ' ')) DESC
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WITH pc, avg(m.popularity) AS avgPopularity
ORDER BY avgPopularity DESC
LIMIT 3
RETURN pc.name AS ProductionCompanyName, avgPopularity",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL AND m.release_date < date('1990-01-01')
RETURN m
ORDER BY m.revenue ASC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, avg(m.popularity) AS avgPopularity
ORDER BY avgPopularity DESC
RETURN g.name AS Genre, avgPopularity
LIMIT 5",Complex Aggregation Queries,neoflix,False,False,False
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
WHERE exists {
    (m)-[:IN_GENRE]->(:Genre {name: 'Horror'})
} AND exists {
    (m)-[:IN_GENRE]->(:Genre {name: 'Comedy'})
}
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, AVG(m.average_vote) AS AverageVote
ORDER BY AverageVote DESC
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (s:Subscription)
RETURN s
ORDER BY s.expiresAt ASC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie), (p)-[:CAST_FOR]->(v:Video)
WITH p, count(DISTINCT m) AS movies, count(DISTINCT v) AS videos
WHERE movies > 0 AND videos > 0
RETURN p.name
LIMIT 3",Complex Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package)
RETURN p.name, p.price
ORDER BY p.price DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WITH m, count(c) AS num_collections
WHERE num_collections > 1
RETURN m
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(m:Movie)
WITH m, count(p) AS num_cast
ORDER BY num_cast DESC
LIMIT 3
RETURN m.title, num_cast",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)
RETURN v
ORDER BY v.vote_count DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 100000000 AND m.average_vote > 8.0
RETURN m
ORDER BY m.revenue DESC, m.average_vote DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CREW_FOR]->(m:Movie)
WITH p, count(r) AS crewCredits
ORDER BY crewCredits DESC
LIMIT 3
RETURN p.name, crewCredits",Simple Aggregation Queries,neoflix,True,False,False
"MATCH (a:Adult)
RETURN a.title, a.vote_count
ORDER BY a.vote_count DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United States of America'})
RETURN a
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, sum(m.popularity) AS TotalPopularity
ORDER BY TotalPopularity DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN l.name AS Language, count(a) AS NumberOfAdultFilms
ORDER BY NumberOfAdultFilms DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
WHERE m.budget > 100000000
RETURN m
ORDER BY m.release_date
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.title IS NOT NULL AND m.original_title IS NOT NULL
RETURN m.title, m.original_title, abs(length(m.title) - length(m.original_title)) AS title_difference
ORDER BY title_difference ASC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, avg(m.popularity) AS AveragePopularity
ORDER BY AveragePopularity DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.runtime > 60
RETURN a
ORDER BY a.id
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH m, count(l) AS num_languages
ORDER BY num_languages DESC
RETURN m.title, num_languages
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.runtime
ORDER BY m.runtime DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.budget IS NULL
RETURN v
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany)
WITH m, count(pc) AS num_production_companies
ORDER BY num_production_companies DESC
LIMIT 3
RETURN m.title, num_production_companies",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:IN_GENRE]->(g:Genre)
WHERE v.average_vote IS NOT NULL
RETURN g.name AS Genre, AVG(v.average_vote) AS AverageVote
ORDER BY AverageVote DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre {name: 'Drama'})
RETURN p
LIMIT 3",Simple Aggregation Queries,neoflix,True,False,False
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(v) AS NumberOfVideos
ORDER BY NumberOfVideos DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package)
RETURN p.name, p.duration
ORDER BY p.duration DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage IS NOT NULL
RETURN m
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)<-[:RATED]-(u:User)
RETURN a.title, count(u) AS user_count
ORDER BY user_count DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (v:Video)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
RETURN l.name AS Language, count(v) AS VideoCount
ORDER BY VideoCount DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path IS NOT NULL
RETURN m
ORDER BY length(m.poster_path) DESC
LIMIT 3",Simple Aggregation Queries,neoflix,True,False,False
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country)
WITH v, count(c) AS num_countries
WHERE num_countries > 1
RETURN v
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
WITH m, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 5
RETURN m.title, keyword_count",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Package)
RETURN p.name, p.duration
ORDER BY p.duration DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person {name: 'John Doe'})-[:CREW_FOR {job: 'Director'}]->(m:Movie)
RETURN m
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL
RETURN m.title, m.budget, m.revenue, abs(m.revenue - m.budget) AS difference
ORDER BY difference DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline IS NOT NULL
RETURN m.title, m.tagline
ORDER BY length(m.tagline) DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE r.rating = 5.0
RETURN m
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person)-[:CAST_FOR]->(v:Video)
WITH p, count(v) AS num_videos
ORDER BY num_videos DESC
LIMIT 3
RETURN p.name, num_videos",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
WHERE NOT exists{ (m)-[:HAS_KEYWORD]->(:Keyword) }
RETURN g
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language)
WITH pc, count(DISTINCT l) AS languages_count
WHERE languages_count > 3
RETURN pc.name, languages_count
ORDER BY languages_count DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:HAS_KEYWORD]->(k:Keyword)
RETURN k.name AS Keyword, count(k) AS Frequency
ORDER BY Frequency DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.revenue = 0
RETURN a
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Pathfinding Queries,neoflix,False,True,False
"MATCH (v:Video)-[:HAS_KEYWORD]->(k:Keyword)
RETURN v.title, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (p:Person {name: 'Tom Hanks'})-[:CAST_FOR]->(m:Movie)
RETURN m.title AS MovieTitle, m.release_date AS ReleaseDate
ORDER BY m.release_date
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.release_date < date('2000-01-01')
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
RETURN a.title, a.popularity
ORDER BY a.popularity DESC
LIMIT 5",Simple Aggregation Queries,neoflix,True,False,False
"MATCH (v:Video {title: 'Jonah: A VeggieTales Movie'})-[:HAS_KEYWORD]->(k:Keyword)
RETURN k.name
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m.title, avg(r.rating) AS average_rating
ORDER BY average_rating DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.release_date IS NOT NULL
RETURN m
ORDER BY m.release_date ASC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline CONTAINS 'adventure'
RETURN m
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.average_vote IS NOT NULL
RETURN a.title, a.average_vote
ORDER BY a.average_vote ASC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,False
"MATCH (a:Adult)
WHERE a.tagline IS NOT NULL
RETURN a.title, a.tagline
ORDER BY length(a.tagline) DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name, count(a) AS adultFilmCount
ORDER BY adultFilmCount DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.average_vote IS NOT NULL
RETURN g.name AS Genre, AVG(m.average_vote) AS AverageVote
ORDER BY AverageVote DESC
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(v) AS NumberOfVideos
ORDER BY NumberOfVideos DESC
LIMIT 5",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 50000000
RETURN m
ORDER BY m.id
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:CAST_FOR]->(p:Person)
RETURN p.name AS ActorName, p.id AS ActorID
ORDER BY p.profile_path IS NOT NULL DESC, p.name
LIMIT 3",Simple Aggregation Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 120
RETURN m
ORDER BY m.runtime DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.status = 'In Production'
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Comedy'})
WHERE m.average_vote > 6
RETURN m
ORDER BY m.average_vote DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.poster_path ENDS WITH '.jpg'
RETURN v
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (v:Video)
WHERE v.status = 'Released'
RETURN v
ORDER BY v.average_vote DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,False
"MATCH (v:Video)
WHERE v.budget > 100000
RETURN v
ORDER BY v.id
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United States of America'})
RETURN v.title AS Title, v.release_date AS ReleaseDate
ORDER BY v.popularity DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)
RETURN v.title, v.vote_count
ORDER BY v.vote_count DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.status = 'Released'
RETURN v.title, v.runtime
ORDER BY v.runtime DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Azərbaycan'})
RETURN v
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)
WHERE v.status = 'In Production'
RETURN v
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (v:Video)-[:IN_GENRE]->(g:Genre {name: 'Horror'})
WHERE v.average_vote > 5
RETURN v.title, v.average_vote
ORDER BY v.average_vote DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.average_vote IS NOT NULL
RETURN a.title, a.average_vote
ORDER BY a.average_vote DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.budget < 50000
RETURN a
ORDER BY a.release_date
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'Italy'})
RETURN a.title AS Title, a.imdb_id AS IMDb_ID, a.release_date AS Release_Date
ORDER BY a.popularity DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.status = 'Released'
RETURN a.title, a.runtime
ORDER BY a.runtime DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)
WHERE a.homepage IS NOT NULL
RETURN a
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
RETURN g.name AS Genre, count(m) AS MovieCount
ORDER BY MovieCount DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)
RETURN p.name, count(m) AS movies_produced
ORDER BY movies_produced DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country)
RETURN c.name AS Country, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language)
RETURN l.name AS Language, count(m) AS MovieCount
ORDER BY MovieCount DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WITH c, count(m) AS num_movies
ORDER BY num_movies DESC
LIMIT 3
RETURN c.name, num_movies",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre)
WITH g, count(p) AS packagesCount
ORDER BY packagesCount DESC
RETURN g.name AS Genre, packagesCount
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.status = 'Released' AND m.average_vote IS NOT NULL
RETURN m
ORDER BY m.average_vote DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:RATED {rating: 5.0}]->(u:User)
WHERE m.status = 'Released'
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
WHERE m.runtime > 90
RETURN m
ORDER BY m.runtime DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (a:Adult)-[:HAS_KEYWORD]->(k:Keyword {name: 'jealousy'})
RETURN a.title AS Title, a.imdb_id AS IMDb_ID, a.release_date AS Release_Date
ORDER BY a.average_vote DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.tagline = 'What price would you put on your health?'
RETURN m
ORDER BY m.average_vote DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language {id: 'en'})
WHERE m.release_date < date('2000-01-01')
RETURN m
ORDER BY m.release_date DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.popularity > 20
RETURN m
ORDER BY m.popularity DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person)-[r:CAST_FOR]->(m:Movie)
WHERE r.character = 'Charlie Wilson'
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword)
RETURN m.title, count(k) AS keyword_count
ORDER BY keyword_count DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.vote_count DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL AND m.status = 'Released'
RETURN m
ORDER BY m.revenue ASC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.status = 'Released' AND m.budget IS NOT NULL
RETURN m.title, m.budget
ORDER BY m.budget DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection)
WHERE m.budget > 10000000
RETURN m.title, m.budget, c.name
ORDER BY m.release_date
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL AND m.popularity IS NOT NULL
RETURN m
ORDER BY m.popularity DESC, m.revenue ASC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'})
WHERE m.status = 'Released'
RETURN m
ORDER BY m.popularity DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person {name: 'John Doe'})-[:CREW_FOR {job: 'Director'}]->(m:Movie)
RETURN m
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie {tagline: 'Roll the dice and unleash the excitement!'})
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.status = 'Released' AND m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (p:Person {name: 'Tom Hanks'})-[:CAST_FOR]->(m:Movie)
RETURN m
ORDER BY m.popularity DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
RETURN m.title, count(u) AS user_count
ORDER BY user_count DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.average_vote > 8
RETURN m
ORDER BY m.average_vote DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.homepage CONTAINS 'disney'
RETURN m
ORDER BY m.popularity DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection {name: 'Toy Story Collection'})
RETURN m
ORDER BY m.release_date
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.status = 'Released' AND m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)
WHERE m.poster_path IS NOT NULL
RETURN m.title, m.poster_path
ORDER BY m.budget DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Gaeilge'})
RETURN m.title AS MovieTitle, m.id AS MovieID
ORDER BY m.popularity DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language {name: 'Kiswahili'})
RETURN m
LIMIT 3",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany {name: 'Pixar Animation Studios'})
RETURN m
ORDER BY m.average_vote DESC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country {name: 'United States of America'})
RETURN m
ORDER BY m.popularity DESC
LIMIT 3",Pathfinding Queries,neoflix,False,False,False
"MATCH (m:Movie)
WHERE m.release_date >= date('2000-01-01')
RETURN m
ORDER BY m.release_date ASC
LIMIT 5",Pathfinding Queries,neoflix,False,False,True
"MATCH (z:Zone {zone: 4})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(m:Machine)-[:RUNS]->(s:Software)
RETURN COUNT(DISTINCT s.name) AS NumberOfSoftwareTypes",Complex Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(machine:Machine {name: 'DC1-RCK-1-1-M-1'})
MATCH (machine)-[:RUNS]->(:Software)-[:VERSION]->(version:Version)
MATCH (version)-[:PREVIOUS*]->(previousVersion:Version)
RETURN previousVersion.name AS PreviousVersions",Complex Retrieval Queries,network,False,False,False
"MATCH (p:Process)-[:DEPENDS_ON]->(s:Service {name: 'java'})
RETURN p.name, p.pid
ORDER BY p.pid DESC
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(s:Service)
WHERE s.startTime > 1606597376483
RETURN m",Complex Retrieval Queries,network,False,False,True
"MATCH (n1:Network {zone: 2})-[:ROUTES]->(i1:Interface),
      (n2:Network {zone: 3})-[:ROUTES]->(i2:Interface)
WHERE exists{(i1)-[:CONNECTS]-(i2)}
RETURN i1, i2",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-10'})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)
RETURN s.name AS ServiceName, s.startTime AS StartTime",Complex Retrieval Queries,network,False,False,True
"MATCH (app:Application)-[:LISTENS]->(p:Port)
WHERE p.port > 1024
RETURN app.name AS ApplicationName, p.port AS Port",Complex Retrieval Queries,network,False,False,True
"MATCH (p:Process {name: '8966'})
OPTIONAL MATCH (p)-[:DEPENDS_ON]->(s:Service)
OPTIONAL MATCH (p)-[:DEPENDS_ON]->(proc:Process)
RETURN p.name AS ProcessName, collect(s.name) AS DependentServices, collect(proc.name) AS DependentProcesses",Complex Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router {name: 'DC1-RE'})
RETURN dc",Simple Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router)
RETURN r
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 1})
RETURN r.name",Simple Aggregation Queries,network,False,False,False
"MATCH (t:Type)
WHERE t.cpu >= 8
RETURN t",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface)
RETURN i
LIMIT 3",Simple Aggregation Queries,network,False,False,False
"MATCH (m:Machine)-[:TYPE]->(t:Type {type: 'm'})
MATCH (m)-[:RUNS]->(:OS)-[:INSTANCE]->(v:Version)
RETURN m.name AS MachineName, v.name AS SoftwareVersion",Complex Retrieval Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:INSTANCE]->(app:Application)
MATCH (m:Machine)-[:RUNS]->(app)
WHERE m.zone = 1
RETURN app.name AS ApplicationName",Complex Retrieval Queries,network,False,False,False
"MATCH (app:Application {name: 'logstash'})-[:DEPENDS_ON*]->(dependency)
RETURN count(DISTINCT dependency) AS TotalDependencies",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:TYPE]->(t:Type)
WHERE t.disk > 256 AND m.zone = 4
RETURN m",Complex Retrieval Queries,network,False,False,True
"MATCH (n:Network {ip: '10.1'})-[:ROUTES]->(i:Interface)
RETURN i.ip AS InterfaceIP",Simple Aggregation Queries,network,False,False,True
"MATCH (s:Service {name: 'java'})-[:LISTENS]->(p:Port {port: 443})
RETURN s",Complex Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 2})-[:HOLDS]->(m:Machine)
RETURN count(m) AS NumberOfMachinesInZone2",Complex Retrieval Queries,network,False,False,True
"MATCH (z:Zone {zone: 3})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(m:Machine)-[:TYPE]->(t:Type)
WHERE t.ram > 16
RETURN DISTINCT t.type AS MachineType",Complex Retrieval Queries,network,False,False,True
"MATCH (n:Network {zone: 1})
RETURN n.ip
ORDER BY n.ip
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack)-[:HOLDS]->(s:Switch)
WHERE s.ip STARTS WITH '10.1'
RETURN r.name AS RackName",Complex Retrieval Queries,network,False,False,False
"MATCH (app:Application)-[:DEPENDS_ON]->(service:Service {name: 'crm'})
RETURN count(app) AS NumberOfApplications",Complex Retrieval Queries,network,False,False,False
"MATCH (z:Zone {zone: 2})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch)
WHERE s.rack = 3
RETURN s.ip AS SwitchIP",Complex Retrieval Queries,network,False,False,False
"MATCH (m:Machine)-[:RUNS]->(os:OS)
WHERE os.startTime >= 1606165629748
RETURN m",Complex Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type {type: 'xl'})
RETURN m.name AS MachineName",Complex Retrieval Queries,network,False,False,False
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(p:Process)-[:LISTENS]->(port:Port)
RETURN port.port AS UsedPorts",Complex Retrieval Queries,network,False,False,False
"MATCH (app:Application)-[:DEPENDS_ON]->(soft:Software {name: 'webapp'})
RETURN app.name AS ApplicationName",Complex Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'cms'})-[:INSTANCE]->(service:Service)
RETURN service",Complex Retrieval Queries,network,False,False,True
"MATCH (os:OS {name: 'RHEL'})-[:INSTANCE]->(process:Process)
RETURN process",Complex Retrieval Queries,network,False,False,True
"MATCH (z:Zone {zone: 3})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(m:Machine)-[:RUNS]->(a:Application {name: 'webserver'})
RETURN a.startTime AS ApplicationStartTime",Complex Retrieval Queries,network,False,False,False
"MATCH (app:Application {name: 'webapp'})-[:DEPENDS_ON]->(soft:Software)
WHERE exists {
    (app)-[:RUNS]->(mach:Machine)-[:ROUTES]->(int:Interface)-[:ROUTES]->(zone:Zone {zone: 2})
}
RETURN soft.name AS SoftwareName, soft.versions AS Versions",Complex Retrieval Queries,network,False,False,False
"MATCH (z:Zone {zone: 1})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(m:Machine)-[:RUNS]->(s:Service)
RETURN s.name AS ServiceName",Complex Retrieval Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)
RETURN m.name
LIMIT 3",Simple Aggregation Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(s:Switch)
RETURN s.ip AS SwitchIP",Simple Aggregation Queries,network,False,False,True
"MATCH (r:Rack {zone: 3})-[:HOLDS]->(s:Switch)
RETURN s",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(m:Machine)-[:RUNS]->(os:OS {name: 'RHEL'})
RETURN m",Simple Aggregation Queries,network,False,False,True
"MATCH (app:Application {name: 'webapp'})-[:INSTANCE]->(service:Service)
RETURN service
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (p:Process {name: '8966'})<-[:DEPENDS_ON]-(a:Application)
RETURN a.name
ORDER BY a.startTime DESC
LIMIT 3",Simple Aggregation Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*]->(prev:Version)
RETURN prev.name AS PreviousVersions",Complex Retrieval Queries,network,False,False,True
"MATCH (e:Egress {name: 'DC1-RE'})-[:ROUTES]->(i:Interface)
RETURN i
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 2})
RETURN r",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType, t.ram AS RAMCapacity
ORDER BY t.ram DESC
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (r:Router {name: 'DC1-R-2'})-[:ROUTES]->(i:Interface)
RETURN i.ip AS InterfaceIP",Simple Aggregation Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(:Software)-[:VERSION]->(v:Version {name: '7.1'})
RETURN m.name
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter)
WHERE dc.location = 'Iceland, Rekjavik'
RETURN dc",Pathfinding Queries,network,False,False,True
"MATCH (r:Router {zone: 1})
RETURN r",Pathfinding Queries,network,False,False,True
"MATCH (r:Rack {zone: 2})
RETURN r
ORDER BY r.name
LIMIT 3",Pathfinding Queries,network,False,False,False
"MATCH (e:Egress {name: 'DC1-RE'})-[:ROUTES]->(i:Interface)
RETURN i.ip AS InterfaceIP",Pathfinding Queries,network,False,False,False
"MATCH (n:Network)-[:ROUTES]->(i:Interface {ip: '10.4.8.254'})
RETURN n",Pathfinding Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)
RETURN m.name
LIMIT 5",Pathfinding Queries,network,False,False,True
"MATCH (i:Interface {ip: '10.1.1.1'})-[:EXPOSES]->(p:Port)
RETURN p
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType",Simple Aggregation Queries,network,False,False,True
"MATCH (i1:Interface)-[:CONNECTS]-(i2:Interface)
WHERE i1.zone = 4 AND i2.zone = 4
RETURN i1.ip AS Interface1_IP, i2.ip AS Interface2_IP",Simple Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(p:Process)
WHERE exists {
    (p)-[:DEPENDS_ON]->(:Process {name: '8966'})
}
RETURN p",Simple Aggregation Queries,network,False,False,True
"MATCH (p:Port {port: 80})<-[:EXPOSES]-(i:Interface)
RETURN i.ip
ORDER BY i.ip
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(app:Application)
RETURN app
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(os:OS)
RETURN os",Simple Aggregation Queries,network,False,False,False
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(p:Process)
RETURN p.name
LIMIT 3",Simple Aggregation Queries,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(dependency)
RETURN s.name AS Software, dependency.name AS Dependency",Simple Aggregation Queries,network,False,False,False
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(s:Service)
RETURN s
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (p:Port {port: 8080})<-[:LISTENS]-(a:Application)
RETURN a.name AS ApplicationName",Simple Aggregation Queries,network,False,False,False
"MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(a:Application)
RETURN a
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(m:Machine)-[:RUNS]->(os:OS)-[:INSTANCE]->(v:Version)
WHERE os.name = 'RHEL'
RETURN DISTINCT v.name AS Version",Simple Aggregation Queries,network,False,False,False
"MATCH (s:Software)-[:DEPENDS_ON]->(v:Version {name: '7.1'})
RETURN s.name
LIMIT 3",Simple Aggregation Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*1..3]->(prev:Version)
RETURN prev.name
ORDER BY prev.name DESC
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(p:Process)
RETURN p
LIMIT 5",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(m:Machine)-[:RUNS]->(app:Application {name: 'webserver'})
RETURN m",Simple Aggregation Queries,network,False,False,True
"MATCH (s:Service)-[:LISTENS]->(p:Port {port: 443})
RETURN s
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (p:Process)-[:LISTENS]->(port:Port {port: 25})
RETURN p.name, p.startTime
ORDER BY p.startTime
LIMIT 3",Simple Aggregation Queries,network,True,False,False
"MATCH (m:Machine)-[:ROUTES]->(i:Interface)-[:ROUTES]->(n:Network {ip: '10.4'})
RETURN m.name, count{(m)-[:ROUTES]->(i)} AS routedInterfaces
ORDER BY routedInterfaces DESC
LIMIT 3",Simple Aggregation Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})<-[:VERSION]-(s:Software)
RETURN s.name AS SoftwareName",Complex Retrieval Queries,network,False,False,False
"MATCH (n:Network {ip: '10.4'})-[:ROUTES]->(i:Interface)
RETURN i
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (m:Machine)-[:RUNS]->(:Application {name: 'webserver'}),
      (m)-[:RUNS]->(p:Process)
RETURN p",Complex Retrieval Queries,network,False,False,True
"MATCH (p:Process {pid: 8966})-[:LISTENS]->(port:Port)
RETURN port.port
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (i1:Interface)-[:CONNECTS]-(i2:Interface)-[:CONNECTS]-(i3:Interface)-[:CONNECTS]-(i1)
WHERE exists {
  (i1)-[:ROUTES]-(:Zone {zone: 1}) AND
  (i2)-[:ROUTES]-(:Zone {zone: 1}) AND
  (i3)-[:ROUTES]-(:Zone {zone: 1})
}
RETURN i1, i2, i3
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (m:Machine)-[:ROUTES]->(i:Interface {ip: '10.1.1'})
RETURN m
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (s:Software {name: 'webapp'})-[:INSTANCE]->(a:Application)
RETURN a.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (p:Process {name: '8966'})-[:DEPENDS_ON]->(s:Service)
RETURN s
ORDER BY s.startTime DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.name
ORDER BY t.id
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type {name: 'm-4/16/25'})
RETURN m.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (p:Process {name: '8966'})-[:DEPENDS_ON]->(app:Application)
RETURN app
ORDER BY app.startTime DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(m:Machine)-[:RUNS]->(os:OS {name: 'RHEL'})
RETURN m.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(s:Service)
RETURN s
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack)-[:HOLDS]->(sw:Switch)
WHERE exists {
    (sw)-[:TYPE]->(t:Type {name: 's-2/4/5'})
}
RETURN rack.name
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (n:Network {ip: '10.2'})-[:ROUTES]->(i:Interface)
RETURN i
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (p:Process {pid: 8966})-[:LISTENS]->(port:Port)
RETURN port.port AS PortNumber
ORDER BY PortNumber DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*1..3]->(prev:Version)
RETURN prev.name
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (app:Application {name: 'webserver'})-[:DEPENDS_ON]->(dependency)
RETURN dependency
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(p:Process)
RETURN p
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (z:Zone {zone: 4})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(mi:Interface)<-[:ROUTES]-(m:Machine)-[:RUNS]->(a:Application)
RETURN a.name, count(a) AS frequency
ORDER BY frequency DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (p:Port {port: 80})-[:EXPOSES]->(i:Interface)
RETURN i
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router)
RETURN r.name
ORDER BY r.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(dep:Software)
RETURN dep.name
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application {name: 'webserver'})
RETURN m.name
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface)
RETURN i.ip AS IPAddress
ORDER BY i.ip
LIMIT 5",Simple Retrieval Queries,network,False,False,False
"MATCH (i:Interface {ip: '10.0.0.254'})-[:ROUTES]->(n:Network)
RETURN n
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(p:Process)
RETURN p
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*1..3]->(prev:Version)
RETURN prev.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (os:OS {name: 'RHEL'})-[:INSTANCE]->(version:Version)
RETURN version.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'webserver'})-[:LISTENS]->(port:Port)
RETURN port.port AS PortNumber, count(port) AS Frequency
ORDER BY Frequency DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Service)-[:INSTANCE]->(soft:Software {name: 'RHEL'})
RETURN s.name
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (app:Application)-[:DEPENDS_ON]->(serv:Service {name: 'java'})
RETURN app.name
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(z:Zone)
RETURN z.ip AS ZoneIP
ORDER BY z.ip DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack)
RETURN rack
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(s:Switch)
RETURN s
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'crm'})-[:INSTANCE]->(instance:Application)
RETURN instance.name
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})<-[:INSTANCE]-(s:Service)
RETURN s
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:INSTANCE]->(p:Process)
RETURN p.name
ORDER BY p.startTime DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (z:Zone {zone: 2})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(m:Machine)-[:RUNS]->(s:Service)
RETURN m.name, s.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(z:Zone)
RETURN count(z) AS NumberOfZones",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface)
RETURN i.ip AS InterfaceIP",Complex Retrieval Queries,network,False,False,True
"MATCH (i:Interface {ip: '10.0.0.254'})-[:EXPOSES]->(p:Port)
RETURN p.port",Complex Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router {zone: 1})
RETURN r.name",Complex Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(e:Egress)
RETURN e.name AS EgressRouterName",Complex Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack)
RETURN rack",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.name AS MachineType",Complex Retrieval Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
RETURN v.name AS Version",Complex Retrieval Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(dependency)
RETURN s.name AS Software, dependency.name AS Dependency",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(app:Application)
RETURN app.name AS ApplicationName",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-10'})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)
RETURN s.name AS ServiceName, s.startTime AS StartTime, s.pid AS PID",Complex Retrieval Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-2-3'})-[:HOLDS]->(s:Switch)
RETURN s",Complex Retrieval Queries,network,False,False,True
"MATCH (n:Network {ip: '10.3'})-[:ROUTES]->(i:Interface)
RETURN count(i) AS NumberOfInterfacesConnectedToNetwork",Complex Retrieval Queries,network,False,False,False
"MATCH (z:Zone {zone: 4})
RETURN z.ip AS IPAddress",Complex Retrieval Queries,network,False,False,False
"MATCH (app:Application)-[:LISTENS]->(p:Port {port: 80})
RETURN app",Complex Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router)
RETURN r.name",Complex Retrieval Queries,network,False,False,True
"MATCH (z:Zone {zone: 3})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(m:Machine)-[:RUNS]->(os:OS)
RETURN DISTINCT os.name AS OperatingSystem",Complex Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {location: 'Iceland, Rekjavik'})
RETURN dc.name",Complex Retrieval Queries,network,False,False,False
"MATCH (s:Software {name: 'webapp'})-[:INSTANCE]->(a:Application)
RETURN a.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (z:Zone {zone: 3})-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port)
RETURN p.port
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type {name: 'xl-16/256/625'})
RETURN r.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(:Machine)-[:RUNS]->(s:Service)-[:LISTENS]->(p:Port {port: 80})
RETURN s.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (i:Interface {ip: '10.1.0.254'})-[:EXPOSES]->(p:Port)
RETURN p.port
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (app:Application {name: 'logstash'})-[:DEPENDS_ON]->(soft:Software)
RETURN soft.name AS SoftwareName, count(soft) AS DependencyCount
ORDER BY DependencyCount DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (s:Service {name: 'java'})-[:INSTANCE]->(dep:Service)
RETURN dep.name
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(m:Machine)-[:ROUTES]->(i:Interface {ip: '10.3'})
RETURN m
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (app:Application)-[:DEPENDS_ON]->(serv:Service {name: 'java'})
RETURN app
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})<-[:INSTANCE]-(p:Process)
RETURN p.name, count(p) AS dependency_count
ORDER BY dependency_count DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*1..3]->(previous:Version)
RETURN previous
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (z:Zone {zone: 2})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN DISTINCT t.type
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack)-[:HOLDS]->(sw:Switch)
WHERE exists {
    (sw)-[:TYPE]->(t:Type {name: 'm-4/16/25'})
}
RETURN rack.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'cms'})-[:INSTANCE]->(proc:Process)
RETURN proc.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'webapp'})<-[:DEPENDS_ON]-(service:Service)
RETURN service
ORDER BY service.startTime DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Service {name: 'java'})-[:LISTENS]->(p:Port)
RETURN p.port
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (p:Process {name: '8966'})-[:INSTANCE*1..3]->(related:Process)
RETURN related
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(e:Egress)-[:ROUTES]->(i:Interface)
RETURN e.name, i.ip
ORDER BY i.ip
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(app:Application)
RETURN app",Pathfinding Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
RETURN v.name AS Version",Pathfinding Queries,network,False,False,True
"MATCH (p:Process)
WHERE p.pid > 5000
RETURN p",Simple Aggregation Queries,network,False,False,False
"MATCH (app:Application)-[:DEPENDS_ON]->(svc:Service {name: 'java'})
RETURN app.name AS ApplicationName",Simple Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: ""DC1""})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.name AS TypeName, t.disk AS DiskCapacity
ORDER BY t.disk DESC
LIMIT 3",Simple Aggregation Queries,network,False,False,False
"MATCH (n:Network {zone: 2})
RETURN n.ip AS NetworkIP",Simple Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN MAX(t.ram) AS maxRAM",Simple Aggregation Queries,network,False,False,True
"MATCH (s:Service)-[:LISTENS]->(p:Port {port: 80})
RETURN s",Simple Aggregation Queries,network,False,False,False
"MATCH (os:OS {name: 'RHEL'})-[:RUNS]->(machine:Machine)-[:RUNS]->(software:Software)
MATCH (software)-[:VERSION]->(version:Version)
RETURN software.name AS SoftwareName, version.name AS VersionName",Simple Aggregation Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(dependency)
RETURN s.name AS Software, dependency.name AS Dependency",Simple Aggregation Queries,network,False,False,True
"MATCH (app:Application {name: 'webserver'})-[:RUNS]->(proc:Process)
RETURN proc",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(m:Machine)-[:RUNS]->(s:Service)
RETURN s.name AS ServiceName, s.startTime AS StartTime, s.pid AS ProcessID",Simple Aggregation Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(app:Application)
RETURN app.name AS ApplicationName",Simple Aggregation Queries,network,False,False,True
"MATCH (i:Interface {ip: ""10.0.0.254""})-[:EXPOSES]->(p:Port)
RETURN p.port",Simple Aggregation Queries,network,False,False,True
"MATCH (r:Rack {rack: 5})-[:HOLDS]->(s:Switch)
RETURN s.ip AS SwitchIP",Simple Aggregation Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
RETURN count(DISTINCT v) AS NumberOfVersions",Simple Aggregation Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(s:Switch)
RETURN s",Simple Aggregation Queries,network,False,False,True
"MATCH (r:Rack)-[:HOLDS]->(m:Machine)
WHERE r.zone = 2
RETURN r.name, collect(m.name) AS machines",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(e:Egress)
RETURN e.name
LIMIT 3",Simple Aggregation Queries,network,False,False,True
"MATCH (n:Network {zone: 3})
RETURN n.ip, n.size
ORDER BY n.size DESC
LIMIT 5",Simple Aggregation Queries,network,False,False,False
"MATCH (r:Router {name: 'DC1-R-2'})-[:ROUTES]->(i:Interface)
RETURN i",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 4})
RETURN count(r) AS NumberOfRacksInZone4",Simple Aggregation Queries,network,False,False,True
"MATCH (r:Router {zone: 1})
RETURN r",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter)
WHERE dc.location = 'Iceland, Rekjavik'
RETURN dc.name",Simple Aggregation Queries,network,False,False,False
"MATCH (s:Software {name: 'logstash'})-[:DEPENDS_ON]->(dependency)
RETURN dependency
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(app:Application)-[:DEPENDS_ON]->(proc:Process {name: '8966'})
RETURN m",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type {type: 'xxl'})
RETURN r AS Rack",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Router {zone: 2})
RETURN r
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack {zone: 4})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN DISTINCT t.type AS MachineType",Simple Aggregation Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(p:Process)
WHERE p.pid < 5000
RETURN p
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type {type: 'm'})
RETURN m.name AS MachineName",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router)
RETURN count(r) AS NumberOfRouters",Simple Aggregation Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
RETURN v.name AS Version",Pathfinding Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-4-9'})-[:HOLDS]->(m:Machine)
RETURN m",Pathfinding Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 4})
RETURN r",Pathfinding Queries,network,False,False,True
"MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router {name: 'DC1-R-2'})
RETURN dc.name",Pathfinding Queries,network,False,False,False
"MATCH (r:Router {zone: 2})
RETURN r.name",Pathfinding Queries,network,False,False,True
"MATCH (app:Application {name: 'webapp'})-[:LISTENS]->(port:Port)
RETURN app.name AS Application, port.port AS Port",Simple Aggregation Queries,network,False,False,True
"MATCH (p:Process {name: '7.1'})-[:DEPENDS_ON]->(app:Application)
RETURN app
LIMIT 5",Simple Aggregation Queries,network,False,False,True
"MATCH (s:Service)
WHERE s.startTime > 1606165629748
RETURN s",Simple Aggregation Queries,network,False,False,True
"MATCH (v:Version {name: '7.1'})<-[:INSTANCE]-(p:Process)
RETURN p",Simple Aggregation Queries,network,False,False,True
"MATCH (v:Version {name: '7.1'})-[:DEPENDS_ON]->(dependency)
RETURN v.name AS Version, dependency.name AS Dependency",Simple Aggregation Queries,network,False,False,False
"MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(a:Application)
RETURN count(a) AS NumberOfDependentApplications",Simple Aggregation Queries,network,False,False,False
"MATCH (r:Router)-[:ROUTES]->(i:Interface)
WHERE i.ip STARTS WITH '10.2'
RETURN r.name AS RouterName, i.ip AS InterfaceIP",Simple Aggregation Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:RUNS]->(a:Application)
RETURN a.name",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 3})-[:HOLDS]->(m:Machine)-[:RUNS]->(app:Application)
RETURN DISTINCT app.name AS ApplicationType",Simple Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {rack: 10})
RETURN count{(r)-[:HOLDS]->(:Machine)} AS MachineCount",Simple Aggregation Queries,network,False,False,True
"MATCH (p:Process {name: '7.1'})-[:DEPENDS_ON*]->(dependency)
RETURN p.name AS ProcessName, collect(dependency.name) AS Dependencies",Simple Aggregation Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(os:OS)
WHERE os.name STARTS WITH 'RHE'
RETURN m",Simple Aggregation Queries,network,False,False,False
"MATCH (r:Rack)-[:HOLDS]->(s:Switch)
WHERE s.ip STARTS WITH '10.1'
RETURN r",Simple Aggregation Queries,network,False,False,True
"MATCH (a:Application {name: 'cms'})
RETURN a.startTime",Simple Aggregation Queries,network,False,False,False
"MATCH (app:Application {name: 'crm'})-[:INSTANCE]->(soft:Software)-[:VERSION]->(ver:Version)
RETURN COUNT(DISTINCT ver) AS NumberOfVersions",Simple Aggregation Queries,network,False,False,True
"MATCH (app:Application)-[:LISTENS]->(p:Port {port: 443})
RETURN app.name",Simple Aggregation Queries,network,False,False,True
"MATCH path=(v:Version {name: '7.1'})<-[:PREVIOUS*]-(previous:Version)
RETURN previous.name AS PreviousVersions",Simple Aggregation Queries,network,False,False,False
"MATCH (p:Process {name: '7.1'})-[:DEPENDS_ON]->(s:Service)
RETURN s",Simple Aggregation Queries,network,False,False,False
"MATCH (t:Type)
WHERE t.cpu > 16
RETURN count(t) AS NumberOfTypes",Simple Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service {name: 'java'})
MATCH (s)-[:LISTENS]->(p:Port)
RETURN p.port",Simple Aggregation Queries,network,False,False,True
"MATCH (n:Network {ip: '10.2'})-[:ROUTES]->(i:Interface)
RETURN i.ip AS InterfaceIP",Simple Aggregation Queries,network,False,False,True
"MATCH (m:Machine {name: ""DC1-RCK-4-9-M-103""})-[:RUNS]->(s:Service)
RETURN s.startTime AS ServiceStartTime",Simple Aggregation Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(s:Service)
WHERE s.startTime < 1606597376483
AND exists {
  MATCH (m)-[:HOLDS]->(r:Rack {zone: 4})
}
RETURN s
ORDER BY s.startTime
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Router)-[:ROUTES]->(i:Interface)-[:CONNECTS]->(i2:Interface)<-[:ROUTES]-(n:Network {ip: '10.4'})
RETURN r.name AS RouterName",Complex Retrieval Queries,network,False,False,False
"MATCH (s:Service)-[:INSTANCE]->(:Software {name: 'RHEL'})
RETURN s
LIMIT 5",Complex Retrieval Queries,network,False,False,False
"MATCH (a:Application)
WHERE a.startTime > 1606165629748
RETURN a
ORDER BY a.startTime ASC
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (n:Network {zone: 4})-[:ROUTES]->(i:Interface)
RETURN n, i
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(s:Switch)
RETURN COUNT(DISTINCT s.ip) AS distinctSwitchTypes",Complex Retrieval Queries,network,False,False,True
"MATCH (app:Application)-[:DEPENDS_ON]->(serv:Service {name: 'java'})
RETURN app.name AS ApplicationName",Complex Retrieval Queries,network,False,False,True
"MATCH (n:Network {ip: '10.2'})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(m:Machine)
RETURN m
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (os:OS {name: 'RHEL'})-[:RUNS]->(service:Service)
RETURN service
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type {type: 'm'})
RETURN r
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(p:Process)
WHERE p.pid > 5000 AND m.zone = 1
RETURN p
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (app:Application)-[:LISTENS]->(p:Port)
WHERE p.port > 1024
RETURN app.name AS ApplicationName, p.port AS Port",Complex Retrieval Queries,network,False,False,False
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(os:OS)-[:INSTANCE]->(v:Version)
RETURN v.name
ORDER BY v.startTime
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service {name: 'java'})
RETURN count(m) AS NumberOfMachinesRunningJava",Complex Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'crm'})-[:DEPENDS_ON*]->(dependency)
RETURN dependency.name AS SoftwareDependency",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Router)-[:ROUTES]->(i:Interface {ip: '10.1.0.254'})
RETURN r.name AS RouterName",Complex Retrieval Queries,network,False,False,False
"MATCH (z:Zone {zone: 3})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(s:Service)
WHERE s.startTime < 1606597376483 AND exists {
  MATCH (m)-[:HOLDS]->(r:Rack {zone: 3})
}
RETURN s
LIMIT 5",Complex Retrieval Queries,network,False,False,False
"MATCH (p:Process {name: '8966'})-[:DEPENDS_ON]->(a:Application)
RETURN a
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Router {name: 'DC1-R-3'})-[:ROUTES]->(i:Interface)
RETURN count(i) AS NumberOfInterfaces",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:TYPE]->(t:Type {type: 'xl'})
RETURN m
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*1..5]->(prev:Version)
RETURN prev.name
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (s:Service)-[:LISTENS]->(p:Port {port: 80})
RETURN s
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (os:OS {name: 'RHEL'})-[:RUNS]->(m:Machine)-[:RUNS]->(app:Application)
RETURN app
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (z:Zone {zone: 2})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch)
RETURN count(DISTINCT s) AS NumberOfSwitchesConnectedToZone2",Complex Retrieval Queries,network,False,False,True
"MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(p:Process)
RETURN p
LIMIT 5",Complex Retrieval Queries,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(v:Version)
RETURN v.name AS VersionName, count(v) AS DependencyCount
ORDER BY DependencyCount DESC
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter)-[:CONTAINS]->(rack:Rack {zone: 4})
RETURN rack
ORDER BY rack.name
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (app:Application {name: 'webapp'})-[:DEPENDS_ON]->(dependency)
RETURN dependency
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (a:Application)
WHERE a.pid < 2000
RETURN a
ORDER BY a.pid
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(app:Application)-[:DEPENDS_ON]->(depApp:Application {name: 'crm'})
RETURN m",Complex Retrieval Queries,network,False,False,False
"MATCH (z:Zone {zone: 2})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(m:Machine)-[:RUNS]->(a:Application)
RETURN count(DISTINCT a) AS NumberOfApplications",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack)-[:HOLDS]->(s:Switch)
WITH r, count(DISTINCT s.ip) AS switchCount
WHERE switchCount >= 2
RETURN r.name
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (app:Application {name: 'webapp'})-[:INSTANCE]->(instance:Application)
RETURN instance
LIMIT 5",Complex Retrieval Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})<-[:INSTANCE]-(p:Process)
RETURN p
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router)
WITH dc, count(DISTINCT r.name) AS routerTypes
RETURN dc.name AS DataCenter, routerTypes
ORDER BY routerTypes DESC
LIMIT 1",Complex Retrieval Queries,network,False,False,False
"MATCH (m:Machine)-[:RUNS]->(os:OS {name: 'RHEL'}),
      (m)-[:TYPE]->(t:Type)
WHERE t.ram > 256
RETURN m
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (s:Switch)-[:ROUTES]->(i:Interface)
WHERE i.ip STARTS WITH '10.3'
RETURN s
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (app:Application)-[:DEPENDS_ON]->(service:Service {name: 'logstash'})
RETURN app
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Router)-[:ROUTES]->(i:Interface)<-[:ROUTES]-(z:Zone {zone: 3})
WITH r, count(i) AS interfacesCount
ORDER BY interfacesCount DESC
LIMIT 3
RETURN r.name, interfacesCount",Complex Retrieval Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})-[:DEPENDS_ON]->(dependency)
RETURN dependency
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (p:Process {name: '8966'})-[:DEPENDS_ON]->(s:Service)
RETURN s
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(p:Process)
WHERE p.pid < 500
RETURN m",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack {zone: 1})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type {type: 'l'})
RETURN r.name AS RackName",Complex Retrieval Queries,network,False,False,True
"MATCH (v:Version {name: '7.1'})<-[:INSTANCE]-(p:Process)
RETURN p
LIMIT 5",Complex Retrieval Queries,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:INSTANCE]->(a:Application)
RETURN a
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(s:Service)
WHERE s.startTime > 1606165629748
RETURN s
ORDER BY s.startTime DESC
LIMIT 5",Complex Retrieval Queries,network,False,False,False
"MATCH (r:Rack)-[:HOLDS]->(s:Switch)
WHERE s.ip STARTS WITH '10.1'
RETURN r.name
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port)
RETURN p.port
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application {name: 'webserver'})
RETURN count(m) AS NumberOfMachinesRunningWebserver",Complex Retrieval Queries,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:INSTANCE]->(a:Application)
RETURN a.name AS ApplicationName",Complex Retrieval Queries,network,False,False,True
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*1..5]->(prev:Version)
RETURN prev
LIMIT 5",Complex Retrieval Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})<-[:INSTANCE]-(s:Service)
RETURN s
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)
RETURN s
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'webapp'})<-[:DEPENDS_ON]-(proc:Process)
RETURN proc
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (m:Machine)-[:RUNS]->(:Software)-[:VERSION]->(v:Version {name: '7.1'})
RETURN m.name AS MachineName",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:TYPE]->(t:Type)
WHERE t.cpu > 16
RETURN m
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (p:Process {pid: 8966})-[:RUNS]->(app:Application)
RETURN app
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (r:Router {zone: 4})-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port)
RETURN r.name AS RouterName, i.ip AS InterfaceIP, p.port AS PortNumber
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:RUNS]->(app:Application)
RETURN app.name AS ApplicationName",Pathfinding Queries,network,False,False,False
"MATCH (i:Interface {ip: '10.0.0.254'})-[:EXPOSES]->(p:Port)
RETURN p.port",Pathfinding Queries,network,False,False,False
"MATCH (n:Network)-[:ROUTES]->(i:Interface {ip: '10.4.8.254'})
RETURN n",Pathfinding Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-4-9'})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)
RETURN s.name AS ServiceName",Pathfinding Queries,network,False,False,True
"MATCH (i:Interface {ip: '10.0.0.254'})-[:EXPOSES]->(p:Port)
RETURN p.port",Verbose query,network,False,False,True
"MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface)
RETURN i",Verbose query,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(os:OS {name: 'RHEL'})
RETURN m",Verbose query,network,False,False,True
"MATCH (app:Application {name: 'webserver'})-[:RUNS]->(proc:Process)
RETURN proc
ORDER BY proc.startTime DESC
LIMIT 3",Verbose query,network,False,False,True
"MATCH (v:Version {name: '7.1'})<-[:PREVIOUS]-(prev:Version)
RETURN prev",Verbose query,network,False,False,False
"MATCH (s:Software)-[:DEPENDS_ON]->(a:Application {name: 'webserver'})
RETURN s.name
ORDER BY s.name
LIMIT 3",Verbose query,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
RETURN v.name AS Version",Verbose query,network,False,False,True
"MATCH (t:Type)
RETURN t
ORDER BY t.ram DESC
LIMIT 3",Verbose query,network,False,False,True
"MATCH (r:Rack {rack: 10})-[:HOLDS]->(s:Switch)
RETURN s.name
LIMIT 3",Verbose query,network,False,False,True
"MATCH (s:Service)-[:LISTENS]->(p:Port {port: 80})
RETURN s",Verbose query,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(m:Machine)-[:RUNS]->(os:OS)
RETURN os
ORDER BY os.startTime DESC
LIMIT 5",Verbose query,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON*]->(dependency)
RETURN s.name AS Software, collect(dependency.name) AS Dependencies",Verbose query,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(app:Application)
RETURN app.name AS ApplicationName, app.pid AS PID
ORDER BY app.pid DESC
LIMIT 3",Verbose query,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:RUNS]->(app:Application)
RETURN app.name AS ApplicationName",Verbose query,network,False,False,False
"MATCH (n:Network {zone: 2})
RETURN n.name",Verbose query,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router)
RETURN r.name, r.zone
ORDER BY r.zone DESC
LIMIT 5",Verbose query,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(os:OS)
RETURN os.startTime AS StartTime",Complex Aggregation Queries,network,False,False,True
"MATCH (m:Machine)-[:TYPE]->(t:Type)
WHERE t.disk < 100
RETURN count(m) AS NumberOfMachines",Complex Aggregation Queries,network,False,False,False
"MATCH (app:Application)-[:DEPENDS_ON]->(depApp:Application)
RETURN app.name AS Application, depApp.name AS DependentApplication",Complex Aggregation Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})<-[:DEPENDS_ON]-(s:Software)
RETURN s.name AS SoftwareName, s.versions AS Versions",Complex Aggregation Queries,network,False,False,False
"MATCH (m:Machine)-[:RUNS]->(app:Application)-[:LISTENS]->(p:Port {port: 443})
RETURN m, app",Complex Aggregation Queries,network,False,False,True
"MATCH (t:Type)
RETURN count(DISTINCT t.disk) AS distinctDiskTypes",Complex Aggregation Queries,network,False,False,True
"MATCH (n:Network {zone: 3})
RETURN n.ip AS NetworkIP",Complex Aggregation Queries,network,False,False,True
"MATCH (app:Application {name: 'webapp'})-[:INSTANCE]->(service:Service)
RETURN service",Complex Aggregation Queries,network,False,False,False
"MATCH (p:Process {name: '8966'})-[:DEPENDS_ON]->(a:Application)
RETURN a.name",Complex Aggregation Queries,network,False,False,False
"MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port)
RETURN p",Complex Aggregation Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)
RETURN m
LIMIT 3",Verbose query,network,False,False,True
"MATCH (s:Service)
WHERE s.startTime > 1607000000000
RETURN s",Verbose query,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(e:Egress)
RETURN e
LIMIT 3",Verbose query,network,False,False,True
"MATCH (n:Network)-[:ROUTES]->(i:Interface {ip: '10.2.1.1'})
RETURN n",Verbose query,network,False,False,True
"MATCH (m:Machine)-[:HOLDS]->(r:Rack {zone: 3})
MATCH (m)-[:RUNS]->(p:Process)
RETURN p",Pathfinding Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
WHERE t.ram > 16
RETURN m.name, t.type, t.ram",Pathfinding Queries,network,False,False,False
"MATCH (m:Machine)-[:RUNS]->(a:Application {name: 'webapp'})
RETURN m",Verbose query,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(app:Application)-[:LISTENS]->(p:Port {port: 80})
RETURN app.name AS ApplicationName",Verbose query,network,False,False,False
"MATCH (s:Service)
WHERE s.startTime IS NOT NULL
RETURN s.name, s.startTime
ORDER BY s.startTime ASC
LIMIT 3",Verbose query,network,False,False,True
"MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(a:Application)
RETURN a.name AS ApplicationName",Verbose query,network,False,False,True
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*1..3]->(prev:Version)
RETURN prev.name",Verbose query,network,False,False,True
"MATCH (s:Service)-[:INSTANCE]->(soft:Software {name: 'RHEL'})
RETURN s",Verbose query,network,False,False,False
"MATCH (z:Zone {zone: 4})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(m:Machine)-[:RUNS]->(a:Application)
RETURN a.name, a.pid
ORDER BY a.pid DESC
LIMIT 3",Verbose query,network,False,False,True
"MATCH (p:Process {name: '9.4'})-[:LISTENS]->(port:Port)
RETURN port",Verbose query,network,False,False,True
"MATCH (s:Service {name: 'java'})-[:INSTANCE]->(soft:Software)-[:VERSION]->(v:Version)
RETURN v.name AS VersionName",Verbose query,network,False,False,False
"MATCH (app:Application {name: 'webapp'})-[:DEPENDS_ON]->(dependency)
RETURN app.name AS Application, dependency.name AS Dependency",Verbose query,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-4-9'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type {type: 'xl'})
RETURN m
LIMIT 3",Verbose query,network,False,False,False
"MATCH (p:Process {name: '9.4'})-[:DEPENDS_ON]->(a:Application)
RETURN a.name",Verbose query,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)
RETURN DISTINCT s.name AS ServiceType",Verbose query,network,False,False,True
"MATCH (r:Rack {zone: 1})-[:HOLDS]->(m:Machine)
WITH r, count(m) AS machineCount
WHERE machineCount > 5
RETURN r
ORDER BY r.name
LIMIT 3",Verbose query,network,False,False,True
"MATCH (s:Switch)-[:ROUTES]->(i:Interface {ip: '10.1.1.1'})
RETURN s",Verbose query,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(app:Application)
RETURN app.name, app.startTime
ORDER BY app.startTime DESC
LIMIT 3",Verbose query,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(v:Version)
RETURN v.name AS VersionName",Verbose query,network,False,False,True
"MATCH (os:OS)
WHERE os.startTime < 1606000000000
RETURN os",Verbose query,network,True,False,False
"MATCH (a:Application)
RETURN a.name AS ApplicationType, a.pid AS PID
ORDER BY a.pid DESC
LIMIT 3",Verbose query,network,False,False,True
"MATCH (e:Egress {name: 'DC1-RE'})-[:ROUTES]->(i:Interface)
RETURN i",Verbose query,network,False,False,True
"MATCH (m:Machine)-[:TYPE]->(t:Type {type: 'm'})
RETURN m
LIMIT 3",Verbose query,network,False,False,True
"MATCH (p:Process {name: '9.4'})-[:DEPENDS_ON]->(s:Service)
RETURN s",Verbose query,network,False,False,True
"MATCH (p:Process)-[:DEPENDS_ON]->(s:Service {name: 'java'})
RETURN p
LIMIT 3",Verbose query,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-4-9'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType, count(m) AS Quantity
GROUP BY t.type",Verbose query,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 4})
RETURN r
ORDER BY r.name
LIMIT 3",Verbose query,network,False,False,True
"MATCH (r:Rack {zone: 1})-[:HOLDS]->(m:Machine)
WITH r, count(m) AS machineCount
WHERE machineCount > 5
RETURN r.name, machineCount",Complex Aggregation Queries,network,False,False,True
"MATCH (n:Network {ip: '10.3'})-[:ROUTES]->(i:Interface)
RETURN i.ip
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (p:Process)
RETURN p.name, count(p) AS usage
ORDER BY usage DESC
LIMIT 5",Complex Aggregation Queries,network,False,False,True
"MATCH (t:Type)
WHERE t.ram >= 256
RETURN count(t) AS NumberOfTypes",Complex Aggregation Queries,network,False,False,False
"MATCH (t:Type)
WHERE t.ram > 64
RETURN count(t) AS NumberOfTypes",Pathfinding Queries,network,False,False,False
"MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:TYPE]->(t:Type)
RETURN t.type AS MachineType",Pathfinding Queries,network,False,False,False
"MATCH (s:Service)-[:INSTANCE]->(v:Version {name: '9.4'})
RETURN s",Pathfinding Queries,network,False,False,True
"MATCH (r:Rack {zone: 4})-[:HOLDS]->(m:Machine)-[:ROUTES]->(i:Interface)
RETURN DISTINCT i",Pathfinding Queries,network,False,False,False
"MATCH (n:Network {ip: '10.3'})
RETURN n",Pathfinding Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(m:Machine)-[:RUNS]->(os:OS {name: 'RHEL'})
RETURN m",Pathfinding Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:RUNS]->(os:OS)
MATCH (os)-[:INSTANCE]->(s:Service)-[:LISTENS]->(p:Port)
RETURN p.port AS Port",Pathfinding Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:INSTANCE]->(a:Application)
RETURN a.name AS ApplicationName",Pathfinding Queries,network,False,False,True
"MATCH (t:Type)
WHERE t.cpu > 16
RETURN t.name",Pathfinding Queries,network,False,False,True
"MATCH (z:Zone {zone: 2})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(m:Machine)-[:RUNS]->(p:Process)
RETURN p.startTime AS ProcessStartTime",Pathfinding Queries,network,False,False,True
"MATCH (v:Version {name: '9.4'})<-[:VERSION]-(s:Software)
MATCH (s)-[:DEPENDS_ON]->(dependency)
RETURN s.name AS Software, dependency.name AS Dependency",Pathfinding Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(s:Switch)
RETURN s.ip AS SwitchIP",Pathfinding Queries,network,False,False,False
"MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router)-[:ROUTES]->(i:Interface {ip: '10.0.0.254'})
RETURN dc.name AS DataCenter, r.name AS Router",Pathfinding Queries,network,False,False,True
"MATCH (n:Network {ip: '10.2'})-[:ROUTES]->(i:Interface)
RETURN i",Pathfinding Queries,network,False,False,False
"MATCH (app:Application {name: 'webserver'})-[:DEPENDS_ON]->(service:Service)
RETURN service",Pathfinding Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-4-9'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN COUNT(m) AS NumberOfMachines, COLLECT(DISTINCT t.name) AS MachineTypes",Pathfinding Queries,network,False,False,False
"MATCH (r:Rack)-[:HOLDS]->(s:Switch)
WHERE s.ip STARTS WITH '10.1'
RETURN r.name AS RackName",Pathfinding Queries,network,False,False,True
"MATCH (z:Zone {zone: 3})-[:ROUTES]->(i:Interface)-[:CONNECTS]-(m:Machine)-[:RUNS]->(a:Application)
RETURN DISTINCT a.name",Pathfinding Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 1})
RETURN r.name AS RackName",Pathfinding Queries,network,False,False,False
"MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:RUNS]->(s:Service)-[:LISTENS]->(p:Port)
RETURN p.port AS PortListenedTo",Pathfinding Queries,network,False,False,False
"MATCH (app:Application {name: 'webserver'})
OPTIONAL MATCH (app)-[:DEPENDS_ON]->(dep)
RETURN app.name AS Application, collect(dep.name) AS Dependencies",Pathfinding Queries,network,False,False,True
"MATCH (i:Interface {ip: '10.0.0.254'})-[:CONNECTS]-(connectedInterface:Interface)
RETURN connectedInterface",Pathfinding Queries,network,False,False,False
"MATCH (z:Zone)
WHERE z.size = 16
RETURN z",Pathfinding Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:RUNS]->(p:Process)
RETURN p.startTime",Pathfinding Queries,network,False,False,False
"MATCH (v:Version {name: '9.4'})-[:PREVIOUS*]->(prev:Version)
RETURN prev.name AS PreviousVersions",Pathfinding Queries,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})<-[:DEPENDS_ON]-(dependent:Software)
RETURN DISTINCT dependent.name AS DependentSoftware",Pathfinding Queries,network,False,False,True
"MATCH (t:Type {name: 'm-4/16/25'})
RETURN t.disk AS DiskCapacity",Pathfinding Queries,network,False,False,True
"MATCH (p:Process {name: '8966'})-[:DEPENDS_ON]->(s:Service)
RETURN s.name",Pathfinding Queries,network,False,False,True
"MATCH (z:Zone)
RETURN z.zone AS Zone, z.size AS Size
ORDER BY z.size DESC
LIMIT 3",Pathfinding Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(a:Application)
WITH m, count(DISTINCT a) AS numApplications
WHERE numApplications > 1
RETURN m",Pathfinding Queries,network,False,False,True
"MATCH (m:Machine)-[:ROUTES]->(i:Interface {ip: '10.1.1'})
RETURN m.name AS MachineName",Complex Aggregation Queries,network,False,False,True
"MATCH (s:Service)
WHERE s.startTime < 1606200000000
RETURN s",Complex Aggregation Queries,network,False,False,True
"MATCH (app:Application {name: 'logstash'})-[:DEPENDS_ON]->(dep)
RETURN app.name AS Application, dep.name AS Dependency",Complex Aggregation Queries,network,False,False,True
"MATCH (v:Version {name: '7.1'})<-[:PREVIOUS*]-(previousVersions:Version)
RETURN previousVersions.name AS PreviousVersionNames",Complex Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter)-[:CONTAINS]->(e:Egress {name: 'DC1-RE'})
RETURN dc.name",Complex Aggregation Queries,network,False,False,True
"MATCH (app:Application {name: 'webserver'})-[:LISTENS]->(port:Port)
RETURN COUNT(DISTINCT port) AS distinctPorts",Complex Aggregation Queries,network,False,False,True
"MATCH (n:Network {ip: '10.3'})-[:ROUTES]->(i:Interface)
RETURN i.ip AS InterfaceIP",Complex Aggregation Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(os:OS)
WHERE os.startTime > 1606000000000
RETURN m, os",Complex Aggregation Queries,network,False,False,True
"MATCH (z:Zone)
WHERE z.size = 16
RETURN z",Complex Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack)
RETURN rack.name",Complex Aggregation Queries,network,False,False,True
"MATCH (t:Type {type: 'xl'})
RETURN max(t.disk) AS MaximumDiskSize",Complex Aggregation Queries,network,False,False,False
"MATCH (t:Type)
WHERE t.cpu > 16
RETURN t.name",Complex Aggregation Queries,network,False,False,True
"MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(a:Application)
RETURN count(a) AS NumberOfDependentApplications",Complex Aggregation Queries,network,False,False,True
"MATCH (s:Service)-[:LISTENS]->(p:Port {port: 80})
RETURN s",Complex Aggregation Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(dependency)
RETURN s.name AS Software, dependency.name AS Dependency",Complex Aggregation Queries,network,False,False,True
"MATCH (n:Network)-[:ROUTES]->(i:Interface {ip: '10.2.8.254'})
RETURN n",Complex Aggregation Queries,network,False,False,True
"MATCH (i:Interface {ip: '10.0.0.254'})-[:EXPOSES]->(p:Port)
RETURN p.port",Complex Aggregation Queries,network,False,False,True
"MATCH (r:Router {name: 'DC1-R-2'})-[:ROUTES]->(i:Interface)
RETURN i",Complex Aggregation Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(a:Application)
WITH a, count(m) AS instances
ORDER BY instances DESC
LIMIT 3
RETURN a.name, instances",Complex Aggregation Queries,network,False,False,True
"MATCH (s:Software)-[:VERSION]->(v:Version {name: '7.1'})
MATCH (p:Process)-[:INSTANCE]->(v)
RETURN p",Complex Aggregation Queries,network,False,False,True
"MATCH (r:Rack {rack: 3})-[:HOLDS]->(m:Machine)
RETURN count(m) AS NumberOfMachines, collect(m.name) AS MachineNames",Complex Aggregation Queries,network,False,False,False
"MATCH (m:Machine)-[:RUNS]->(a:Application {name: 'crm'})
RETURN m",Complex Aggregation Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
RETURN v.name",Complex Aggregation Queries,network,False,False,True
"MATCH (r:Rack {rack: 5})-[:HOLDS]->(s:Switch)
RETURN s.ip AS SwitchIP",Complex Aggregation Queries,network,False,False,True
"MATCH (r:Router {zone: 2})
RETURN r",Complex Aggregation Queries,network,False,False,False
"MATCH (p:Port {port: 80})<-[:LISTENS]-(app:Application)
RETURN app.name AS ApplicationName",Pathfinding Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(v:Version)
RETURN v.name AS Version",Pathfinding Queries,network,False,False,False
"MATCH (z:Zone {zone: 4})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(r:Rack)-[:HOLDS]->(m:Machine)
RETURN count(m) AS TotalMachinesInZone4",Complex Aggregation Queries,network,False,False,True
"MATCH (s:Service)
WHERE s.startTime > 1606165629748
RETURN s
ORDER BY s.startTime ASC
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(p:Process)
RETURN min(p.startTime) AS EarliestStartTime",Complex Aggregation Queries,network,False,False,True
"MATCH (i:Interface {ip: '10.0.0.254'})-[:EXPOSES]->(p:Port)
RETURN p.port",Complex Retrieval Queries,network,False,False,False
"MATCH (n:Network)-[:ROUTES]->(i:Interface)
WHERE n.zone = 2
RETURN n
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (app:Application {name: 'webserver'})-[:INSTANCE]->(service:Service)-[:LISTENS]->(port:Port)
RETURN DISTINCT port.port",Complex Aggregation Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-4-9-M-103'})-[:RUNS]->(s:Service)
RETURN s
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack)
WITH rack, count{(rack)-[:HOLDS]->(:Switch)} AS switchCount
RETURN rack.name AS RackName, switchCount
ORDER BY switchCount DESC
LIMIT 1",Complex Aggregation Queries,network,False,False,True
"MATCH (app:Application {name: 'crm'})
CALL {
    WITH app
    MATCH (app)-[:DEPENDS_ON*]->(dependency)
    RETURN DISTINCT dependency
}
RETURN count(dependency) AS TotalDependencies",Complex Aggregation Queries,network,False,False,True
"MATCH (z:Zone {zone: 4})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(m:Machine)-[:RUNS]->(a:Application {name: 'logstash'})
RETURN m
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType, AVG(t.cpu) AS AverageCPU
ORDER BY AverageCPU DESC
LIMIT 1",Complex Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(p:Process)
RETURN p.name, p.startTime
ORDER BY p.startTime ASC
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (s:Service)
WHERE s.startTime > 1606165629748
RETURN s
ORDER BY s.startTime ASC
LIMIT 3",Complex Aggregation Queries,network,False,False,False
"MATCH (i:Interface)-[:EXPOSES]->(p:Port {port: 80})
RETURN count(i) AS TotalInterfacesExposingPort80",Complex Aggregation Queries,network,False,False,False
"MATCH (p:Process)-[:LISTENS]->(port:Port)
RETURN p.name AS ProcessName, port.port AS PortNumber
ORDER BY port.port DESC
LIMIT 1",Complex Aggregation Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(s:Service {name: 'java'})
RETURN m
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (z:Zone {zone: 3})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(i2:Interface)<-[:ROUTES]-(m:Machine)-[:RUNS]->(p:Process),
      (app:Application)-[:DEPENDS_ON]->(p)
RETURN app
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(app:Application)
RETURN app.name AS ApplicationName",Complex Aggregation Queries,network,True,False,False
"MATCH path=(v:Version {name: '7.1'})-[:PREVIOUS*1..3]->(prev:Version)
RETURN prev.name AS PreviousVersion
ORDER BY length(path) ASC
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(dep:Software)
OPTIONAL MATCH (dep)-[:VERSION]->(v:Version)
RETURN dep.name AS Dependency, collect(v.name) AS Versions",Complex Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 4})
WHERE exists{(r)-[:HOLDS]->(:Switch)}
RETURN count(r) AS NumberOfRacks",Complex Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)
RETURN s.name, s.startTime
ORDER BY s.startTime DESC
LIMIT 5",Complex Aggregation Queries,network,False,False,True
"MATCH (z:Zone)-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch)
WHERE s.ip STARTS WITH '10.1'
RETURN DISTINCT z.zone AS Zone",Complex Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType, SUM(t.ram) AS TotalRAM
GROUP BY t.type",Complex Aggregation Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})<-[:INSTANCE]-(p:Process)
RETURN p
LIMIT 3",Complex Aggregation Queries,network,True,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(s:Switch)
RETURN s.ip AS SwitchIP, r.rack AS RackNumber
ORDER BY r.rack DESC
LIMIT 1",Complex Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)
WITH m, count{(m)-[:RUNS]->(:Application)} AS appCount
ORDER BY appCount DESC
LIMIT 1
MATCH (m)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType",Complex Aggregation Queries,network,False,False,False
"MATCH (r:Router {name: 'DC1-R-2'})-[:ROUTES]->(i:Interface)
RETURN count(i) AS NumberOfInterfacesConnected",Complex Aggregation Queries,network,False,False,True
"MATCH (n:Network)
RETURN n.ip AS NetworkIP, n.size AS NetworkSize
ORDER BY n.size ASC
LIMIT 1",Complex Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(m:Machine)-[:RUNS]->(p:Process)
WHERE exists {
    (p)-[:INSTANCE]->(:Version {name: '7.1'})
}
RETURN p
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (r:Rack {zone: 1})-[:HOLDS]->(m:Machine)
WITH r, collect(DISTINCT (m)-[:TYPE]->(t:Type)) AS types
WHERE size(types) > 1
RETURN r.name AS RackName, size(types) AS NumberOfMachineTypes",Complex Aggregation Queries,network,False,False,True
"MATCH (s:Switch)-[:HOLDS]->(r:Rack {zone: 4})
RETURN s.ip AS SwitchIP
ORDER BY s.ip
LIMIT 5",Complex Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router)-[:ROUTES]->(i:Interface)-[:ROUTES]->(n:Network)
WITH r, count(n) AS networkCount
ORDER BY networkCount DESC
LIMIT 1
RETURN r.name AS RouterName",Complex Aggregation Queries,network,False,False,False
"MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(p:Process)
RETURN p.name
LIMIT 3",Verbose query,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:INSTANCE]->(a:Application)
RETURN a.name AS ApplicationName, a.startTime AS StartTime
LIMIT 3",Verbose query,network,False,False,True
"MATCH (s:Service)-[:LISTENS]->(p:Port {port: 80})
RETURN s.name
LIMIT 3",Verbose query,network,False,False,True
"MATCH (z:Zone {size: 16})-[:ROUTES]->(i:Interface {ip: '10.3.10.254'})
RETURN z.zone AS ZoneNumber
LIMIT 3",Verbose query,network,False,False,True
"MATCH (dc:DataCenter)-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS Type, t.ram AS RAM, t.cpu AS CPU
ORDER BY t.ram DESC, t.cpu DESC
LIMIT 5",Verbose query,network,False,False,False
"MATCH (app:Application {name: 'webserver'})-[:RUNS]->(machine:Machine)-[:RUNS]->(software:Software)
MATCH (software)-[:VERSION]->(version:Version)
RETURN software.name, collect(version.name)[..3] AS first_three_versions",Verbose query,network,False,False,True
"MATCH (app:Application)-[:DEPENDS_ON]->(serv:Service {name: 'java'})
RETURN app
LIMIT 3",Verbose query,network,False,False,False
"MATCH (n:Network {ip: '10.2'})-[:ROUTES]->(i:Interface)
RETURN i.name, i.ip
LIMIT 3",Verbose query,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(p:Process)
RETURN p.name
ORDER BY p.startTime DESC
LIMIT 5",Verbose query,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(s:Service)
RETURN s.name
LIMIT 3",Verbose query,network,False,False,False
"MATCH (i:Interface {ip: '10.1.1'})-[:EXPOSES]->(p:Port)
RETURN p.port
LIMIT 3",Verbose query,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
RETURN v.name
ORDER BY v.name
LIMIT 3",Verbose query,network,False,False,True
"MATCH (app:Application {name: 'webserver'})-[:RUNS]->(service:Service)
RETURN service
ORDER BY service.startTime
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-10'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN m.name AS MachineName, t.name AS TypeName
LIMIT 5",Verbose query,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application)
RETURN a.name
LIMIT 3",Verbose query,network,False,False,False
"MATCH (n:Network)-[:ROUTES]->(i:Interface {ip: '10.0.0.254'})
RETURN n.name AS NetworkName, n.ip AS NetworkIP, n.size AS NetworkSize, n.zone AS NetworkZone
LIMIT 3",Verbose query,network,False,False,False
"MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface)
RETURN i.ip AS IPAddress
LIMIT 5",Verbose query,network,False,False,True
"MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router)
WHERE r.zone = 1
RETURN r.name
LIMIT 3",Verbose query,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
WITH v
ORDER BY v.name DESC
LIMIT 1
MATCH (m:Machine)-[:RUNS]->(:OS)-[:INSTANCE]->(v)
RETURN m
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (m:Machine)-[:TYPE]->(t:Type {type: 'l'})
MATCH (m)-[:RUNS]->(a:Application)
RETURN a.name AS ApplicationName",Complex Aggregation Queries,network,False,False,False
"MATCH (p:Process {name: '8966'})
CALL {
    WITH p
    MATCH (p)-[:DEPENDS_ON*]->(dependency)
    RETURN dependency
}
RETURN p, COLLECT(dependency) AS dependencies",Complex Aggregation Queries,network,False,False,True
"MATCH (app:Application)-[:DEPENDS_ON]->(service:Service {name: 'logstash'})
RETURN app
LIMIT 3",Complex Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router)-[:ROUTES]->(i:Interface)
WITH i, count{(i)-[:ROUTES]->(:Network)} AS networkCount
RETURN i, networkCount
ORDER BY networkCount DESC
LIMIT 1",Complex Aggregation Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN sum(t.cpu) AS TotalCPU",Complex Aggregation Queries,network,False,False,True
"MATCH (p:Process)-[:LISTENS]->(port:Port {port: 80})
RETURN p
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (app:Application {name: 'webapp'})-[:RUNS]->(service:Service)
RETURN service
ORDER BY service.startTime ASC
LIMIT 1",Complex Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)
RETURN r.name
LIMIT 3",Verbose query,network,False,False,False
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*1..3]->(prev:Version)
RETURN prev.name",Verbose query,network,False,False,True
"MATCH (s:Software)
RETURN s.name, count{(s)-[:DEPENDS_ON]->()} AS dependency_count
ORDER BY dependency_count DESC
LIMIT 1",Complex Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(e:Egress)-[:ROUTES]->(i:Interface)
RETURN e.name AS EgressName, i.ip AS InterfaceIP
ORDER BY i.ip
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (z:Zone)-[:ROUTES]->(i:Interface {ip: '10.2.8.254'})
RETURN z",Pathfinding Queries,network,False,False,True
"MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router)
WITH dc, count(r) AS routerCount
WHERE routerCount > 5
RETURN dc
ORDER BY routerCount DESC
LIMIT 3",Pathfinding Queries,network,False,False,True
"MATCH (s:Software)-[:DEPENDS_ON]->(v:Version {name: '7.1'})
RETURN s.name AS SoftwareName",Pathfinding Queries,network,False,False,True
"MATCH (t:Type)
WHERE t.ram < 64
RETURN t.name
ORDER BY t.ram ASC
LIMIT 3",Pathfinding Queries,network,False,False,True
"MATCH (p:Process)-[:DEPENDS_ON]->(p)
RETURN p
ORDER BY p.startTime DESC
LIMIT 3",Pathfinding Queries,network,False,False,True
"MATCH (app:Application {name: 'crm'})-[:LISTENS]->(port:Port)
RETURN port",Pathfinding Queries,network,False,False,True
"MATCH (app:Application {name: 'webserver'})<-[:DEPENDS_ON]-(dependentApp:Application)
RETURN dependentApp.name",Pathfinding Queries,network,False,False,True
"MATCH (s:Service {name: 'java'})
RETURN s
LIMIT 3",Pathfinding Queries,network,False,False,True
"MATCH (n:Network {zone: 2})
RETURN n.ip AS NetworkIP",Pathfinding Queries,network,False,False,True
"MATCH (r:Router)-[:ROUTES]->(i:Interface)
WHERE r.zone = 4
RETURN r.name, i.ip",Pathfinding Queries,network,False,False,True
"MATCH (m:Machine)-[:TYPE]->(t:Type {type: 'xl'})
WHERE t.disk > 256
RETURN m",Pathfinding Queries,network,False,False,False
"MATCH (t:Type)
RETURN t.name AS TypeName, t.cpu AS CPUAllocation
ORDER BY t.cpu DESC
LIMIT 1",Pathfinding Queries,network,False,False,False
"MATCH (s:Service)
WHERE s.startTime > 1606165629748
RETURN s
ORDER BY s.startTime ASC
LIMIT 5",Pathfinding Queries,network,False,False,True
"MATCH (app:Application)-[:LISTENS]->(p:Port {port: 443})
RETURN app.name",Pathfinding Queries,network,False,False,False
"MATCH (p:Process)-[:INSTANCE]->(v:Version {name: '7.1'})
RETURN p",Pathfinding Queries,network,False,False,True
"MATCH (s:Service {pid: 8966})<-[:DEPENDS_ON]-(p:Process)
RETURN p
ORDER BY p.startTime DESC
LIMIT 5",Pathfinding Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(os:OS {name: 'RHEL'})
RETURN m.name",Pathfinding Queries,network,False,False,False
"MATCH (s:Switch)-[:ROUTES]->(i:Interface {ip: '10.1.1'})
RETURN s",Pathfinding Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(s:Switch)
RETURN s
LIMIT 5",Pathfinding Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(dependency)
RETURN s.name AS Software, dependency.name AS Dependency",Pathfinding Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})<-[:PREVIOUS]-(prev:Version)
RETURN prev",Pathfinding Queries,network,False,False,False
"MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(a:Application)
RETURN a.name
LIMIT 3",Pathfinding Queries,network,False,False,False
"MATCH (i:Interface {ip: '10.0.0.254'})-[:EXPOSES]->(p:Port)
RETURN p",Pathfinding Queries,network,False,False,True
"MATCH (z:Zone)
WHERE z.size = 16 AND z.ip STARTS WITH '10.2'
RETURN z
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (s:Service)-[:LISTENS]->(p:Port {port: 80})
RETURN s.name
ORDER BY s.startTime DESC
LIMIT 3",Pathfinding Queries,network,False,False,True
"MATCH (m:Machine)-[:TYPE]->(t:Type {type: 'm'})
WHERE exists {
    (m)-[:ROUTES]->(i:Interface)-[:ROUTES]->(z:Zone {zone: 3})
}
RETURN m.name
LIMIT 3",Pathfinding Queries,network,False,False,False
"MATCH (p:Process {pid: 8966})-[:DEPENDS_ON]->(app:Application)
RETURN app
LIMIT 5",Pathfinding Queries,network,False,False,True
"MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port)
RETURN i.ip AS InterfaceIP, p.port AS PortIP",Pathfinding Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN DISTINCT t.name AS MachineType",Pathfinding Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(os:OS {name: 'RHEL'})
RETURN count(m) AS NumberOfMachines",Complex Aggregation Queries,network,False,False,False
"MATCH (app:Application)-[:LISTENS]->(p:Port {port: 80})
RETURN app.name",Complex Aggregation Queries,network,False,False,True
"MATCH (i:Interface {ip: '10.0.0.254'})-[:EXPOSES]->(p:Port)
RETURN p.port
ORDER BY p.port
LIMIT 5",Complex Aggregation Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(rack:Rack {name: 'DC1-RCK-4-9'})-[:HOLDS]->(machine:Machine)
MATCH (machine)-[:RUNS]->(process:Process)
RETURN process
LIMIT 3",Complex Aggregation Queries,network,False,False,True
"MATCH (z:Zone)-[:ROUTES]->(i:Interface)
WITH z, count(i) AS interfacesCount
RETURN z.zone AS Zone, interfacesCount
ORDER BY interfacesCount DESC
LIMIT 1",Complex Aggregation Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(a:Application)
RETURN a.name
ORDER BY a.startTime DESC
LIMIT 3",Complex Aggregation Queries,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(v:Version)
RETURN v.name AS VersionName",Complex Aggregation Queries,network,False,False,False
"MATCH (r:Router {zone: 2})
RETURN r
ORDER BY r.name
LIMIT 5",Complex Aggregation Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType, count(m) AS Count
ORDER BY Count DESC
LIMIT 3",Complex Aggregation Queries,network,False,False,False
"MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router {name: 'DC1-R-1'})
RETURN dc.name",Complex Aggregation Queries,network,False,False,False
"MATCH (z:Zone {zone: 4})-[:ROUTES]->(i:Interface)
RETURN i.ip
LIMIT 5",Pathfinding Queries,network,False,False,False
"MATCH (n:Network {ip: '10.1'})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(m:Machine)
RETURN m.name AS MachineName, i.ip AS InterfaceIP",Pathfinding Queries,network,False,False,False
"MATCH (r:Router)-[:ROUTES]->(i:Interface)<-[:ROUTES]-(z:Zone {zone: 3})
RETURN r.name AS RouterName, i.ip AS InterfaceIP",Complex Aggregation Queries,network,False,False,True
"MATCH (z:Zone {zone: 1})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(i2:Interface)<-[:ROUTES]-(r:Rack)
WHERE count{(r)-[:HOLDS]->(:Machine)} > 3
RETURN r.name",Pathfinding Queries,network,False,False,True
"MATCH (z:Zone)-[:ROUTES]->(i:Interface)<-[:ROUTES]-(n:Network {ip: '10.3'})
RETURN z",Pathfinding Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(v:Version)
RETURN v.name AS VersionName",Pathfinding Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:INSTANCE]->(p:Process)
RETURN p",Pathfinding Queries,network,False,False,True
"MATCH (z:Zone {zone: 4})-[:ROUTES]->(i:Interface)-[:CONNECTS]-(mi:Interface)
MATCH (mi)-[:ROUTES]->(m:Machine)-[:RUNS]->(a:Application)
RETURN a.name AS ApplicationName",Pathfinding Queries,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
RETURN v.name, count(v) AS usage
ORDER BY usage DESC
LIMIT 3",Pathfinding Queries,network,False,False,True
"MATCH (r:Router {name: 'DC1-RE'})-[:ROUTES]->(i:Interface)
RETURN i",Pathfinding Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:ROUTES]->(i:Interface)
RETURN i.ip AS InterfaceIP",Pathfinding Queries,network,False,False,False
"MATCH (n:Network {ip: '10.2'})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch)
RETURN s",Pathfinding Queries,network,False,False,False
"MATCH (z:Zone {size: 16})
RETURN z
LIMIT 3",Pathfinding Queries,network,False,False,True
"MATCH (r:Router)-[:ROUTES]->(i:Interface {ip: '10.3.8.253'})
RETURN r.name AS RouterName",Pathfinding Queries,network,False,False,True
"MATCH (app:Application {name: 'webapp'})-[:DEPENDS_ON]->(dependency)
RETURN dependency",Pathfinding Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(e:Egress)
RETURN e.name AS EgressName",Pathfinding Queries,network,False,False,False
"MATCH (s:Service {name: 'java'})-[:LISTENS]->(p:Port)
RETURN p.port
LIMIT 5",Pathfinding Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-10'})-[:HOLDS]->(m:Machine)-[:RUNS]->(os:OS {name: 'RHEL'})
RETURN m LIMIT 3",Verbose query,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(os:OS)
WHERE os.startTime > 1605733619064
RETURN m
ORDER BY os.startTime
LIMIT 3",Pathfinding Queries,network,False,False,False
"MATCH (m:Machine)-[:RUNS]->(p:Process)-[:DEPENDS_ON]->(s:Service {name: 'java'})
RETURN m.name AS MachineName",Simple Retrieval Queries,network,False,False,True
"MATCH (z:Zone {zone: 1})-[:ROUTES]->(i:Interface)
RETURN i.name, i.ip",Simple Retrieval Queries,network,False,False,True
"MATCH (p:Process {name: '8966'})-[:DEPENDS_ON]->(s:Service)
RETURN s
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (p:Process)-[:INSTANCE]->(v:Version {name: '7.1'})
WHERE exists {
  (p)-[:LISTENS]->(:Port {port: 80})
}
RETURN p",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {zone: 1})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType, t.ram AS RAM
ORDER BY t.ram DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
MATCH (v)-[:PREVIOUS*]->(prev:Version)
WHERE exists {
    (prev)<-[:VERSION]-(dep:Software)-[:DEPENDS_ON]->(s)
}
RETURN prev",Simple Retrieval Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application)
RETURN m.name AS MachineName, a.name AS ApplicationName",Simple Retrieval Queries,network,False,False,True
"MATCH (n:Network)-[:ROUTES]->(i:Interface)
WHERE n.zone = 4
RETURN n.name, n.size
ORDER BY n.size DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Service {name: 'java'})-[:INSTANCE]->(a:Application)
RETURN a.name AS ApplicationName",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Service {name: 'java'})
WHERE s.startTime > 1605733619064
MATCH (s)-[:INSTANCE|DEPENDS_ON*]->(dependency)
RETURN s.name AS ServiceName, s.startTime AS StartTime, COLLECT(dependency.name) AS Dependencies",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {zone: 2})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType, t.cpu AS CPU
ORDER BY t.cpu DESC
LIMIT 5",Simple Retrieval Queries,network,False,False,False
"MATCH (os:OS {name: 'RHEL'})-[:RUNS]->(service:Service)-[:LISTENS]->(port:Port)
RETURN DISTINCT port.port AS ListeningPorts",Simple Retrieval Queries,network,False,False,False
"MATCH (p:Process)-[:INSTANCE]->(s:Software {name: 'webapp'})
RETURN p
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Service)-[:LISTENS]->(p:Port {port: 80})
WHERE s.startTime >= 1605733619064 AND s.startTime <= 1606597376483
RETURN s",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {zone: 1})-[:HOLDS]->(s:Switch)
RETURN s.name AS SwitchName",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack)-[:HOLDS]->(m:Machine)
RETURN r.zone, count(m) AS machine_count
ORDER BY machine_count DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'crm'})-[:INSTANCE]->(proc:Process)
RETURN proc",Simple Retrieval Queries,network,False,False,True
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*]->(prev:Version)
OPTIONAL MATCH (prev)-[:DEPENDS_ON]->(dep)
RETURN prev, dep",Simple Retrieval Queries,network,False,False,False
"MATCH (n:Network {ip: '10.3'})-[:ROUTES]->(i:Interface)
RETURN i.name, i.ip",Simple Retrieval Queries,network,False,False,False
"MATCH (m:Machine)-[:RUNS]->(s:Service)-[:LISTENS]->(p:Port {port: 80})
RETURN m.name AS MachineName, s.name AS ServiceName",Simple Retrieval Queries,network,False,False,True
"MATCH (z:Zone {zone: 4})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch)
RETURN s.ip, s.rack
ORDER BY s.rack DESC
LIMIT 5",Simple Retrieval Queries,network,False,False,False
"MATCH (r:Router)-[:ROUTES]->(i:Interface {ip: '10.1.0.254'})
RETURN r.name",Simple Retrieval Queries,network,True,False,False
"MATCH (r:Rack {zone: 3})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.name AS TypeName, t.disk AS DiskSize
ORDER BY t.disk DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (z:Zone {zone: 2})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(m:Machine)-[:RUNS]->(a:Application)
RETURN a.name AS ApplicationName, a.startTime AS StartTime",Simple Retrieval Queries,network,False,False,True
"MATCH (p:Process {name: '8966'})-[:LISTENS]->(port:Port)
RETURN port.port
LIMIT 5",Simple Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'logstash'})-[:DEPENDS_ON]->(dependency)
RETURN app.name AS Application, dependency.name AS Dependency",Simple Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'webserver'})-[:INSTANCE]->(service:Service)
RETURN service
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
WHERE exists {
    (s)<-[:INSTANCE]-(:Process {startTime: date}) WHERE date > 1605733619064
}
RETURN v.name",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version),
      (s)-[:DEPENDS_ON]->(app:Application),
      (app)-[:LISTENS]->(p:Port)
RETURN app.name AS Application, collect(p.port) AS Ports",Simple Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(a:Application {name: 'cms'})
MATCH (m)-[:TYPE]->(t:Type)
RETURN DISTINCT t.type AS MachineType",Simple Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(a:Application {name: 'webserver'})
RETURN m.name
LIMIT 5",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType, t.disk AS DiskSize",Simple Retrieval Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(p:Process)
WHERE p.pid > 5000
RETURN p
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine)-[:RUNS]->(a:Application {name: 'webserver'})
RETURN m
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(s:Switch)
RETURN s",Complex Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter)-[:CONTAINS]->(e:Egress {name: 'DC1-RE'})
RETURN dc.name",Complex Retrieval Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
RETURN count(v) AS NumberOfVersions",Complex Retrieval Queries,network,False,False,True
"MATCH (p:Port {port: 80})<-[:LISTENS]-(app:Application)
RETURN app.name AS ApplicationName
ORDER BY app.startTime DESC
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
RETURN v.name
ORDER BY v.name
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)
RETURN s.name, count(s) AS service_count
ORDER BY service_count DESC
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(e:Egress)-[:ROUTES]->(i:Interface)
RETURN e.name AS EgressName, i.ip AS InterfaceIP
ORDER BY e.name
LIMIT 5",Complex Retrieval Queries,network,False,False,True
"MATCH (t:Type)
RETURN t.name AS MachineType, t.cpu AS CPUCapacity
ORDER BY t.cpu DESC
LIMIT 1",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN DISTINCT t.name AS MachineType",Complex Retrieval Queries,network,False,False,True
"MATCH (n:Network)-[:ROUTES]->(i:Interface {ip: '10.0.0.254'})
RETURN n
LIMIT 3",Complex Retrieval Queries,network,False,False,True
"MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(a:Application)
RETURN a.name, a.startTime
ORDER BY a.startTime DESC
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(dep:Software)
RETURN dep.name, count(dep) AS dependency_count
ORDER BY dependency_count DESC
LIMIT 5",Complex Retrieval Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)
RETURN count(m) AS NumberOfMachines",Complex Retrieval Queries,network,False,False,True
"MATCH (r:Router {name: 'DC1-R-2'})-[:ROUTES]->(i:Interface)
RETURN i",Complex Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router {name: 'DC1-R-1'})
RETURN dc.name",Complex Retrieval Queries,network,False,False,False
"MATCH (r:Router {zone: 1})
RETURN r
ORDER BY r.name
LIMIT 3",Complex Retrieval Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*1..3]->(prev:Version)
OPTIONAL MATCH (prev)-[:DEPENDS_ON]->(s:Software)
RETURN prev.name AS Version, collect(s.name) AS Dependencies",Simple Retrieval Queries,network,False,False,False
"MATCH (os:OS {name: 'RHEL'})-[:RUNS]->(proc:Process)-[:LISTENS]->(port:Port)
RETURN DISTINCT port.port",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application)
RETURN a.name, a.startTime
ORDER BY a.startTime DESC
LIMIT 5",Simple Retrieval Queries,network,False,False,False
"MATCH (s:Switch)-[:HOLDS]-(:Rack {zone: 4})
RETURN s.name AS SwitchName, s.ip AS SwitchIP",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Router {zone: 3})-[:ROUTES]->(i:Interface)-[:ROUTES]->(n:Network)
RETURN n.ip AS NetworkIP
ORDER BY n.ip
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (p:Process {name: '8966'})-[:INSTANCE]->(a:Application)
RETURN a",Simple Retrieval Queries,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(v:Version)
RETURN s.name AS Software, v.name AS Version",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
WITH r.zone AS zone, r.name AS rackName, COUNT(DISTINCT t) AS typeCount
ORDER BY typeCount DESC
RETURN zone, rackName, typeCount
LIMIT 5",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Software)-[:INSTANCE]->(a:Application)
RETURN s.name AS SoftwareName, a.name AS ApplicationName",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Router {zone: 2})-[:ROUTES]->(i:Interface)
RETURN i.ip AS InterfaceIP",Simple Retrieval Queries,network,False,False,False
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(os:OS {name: 'RHEL'})
RETURN m.name
ORDER BY m.name
LIMIT 5",Simple Retrieval Queries,network,False,False,False
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
WITH s, v
MATCH (s)-[:DEPENDS_ON]->(app:Application)
RETURN app.name, v.name
ORDER BY v.name
LIMIT 5",Simple Retrieval Queries,network,False,False,False
"MATCH (s:Service {name: 'java'})<-[:DEPENDS_ON]-(p:Process)
RETURN p",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {zone: 4})-[:HOLDS]->(m:Machine)
WITH r, count(m) AS machineCount
WHERE machineCount > 5
RETURN r.name, machineCount",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(s:Switch)
RETURN s.name AS SwitchName",Simple Retrieval Queries,network,False,False,True
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*1..3]->(prev:Version)
RETURN prev.name",Simple Retrieval Queries,network,False,False,False
"MATCH (s:Service)-[:INSTANCE]->(soft:Software {name: 'RHEL'})
RETURN s",Simple Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter)-[:CONTAINS]->(r:Rack {zone: 1})
WHERE r.rack <= 5
MATCH (r)-[:HOLDS]->(m:Machine)-[:RUNS]->(os:OS {name: 'RHEL'})
RETURN m.name AS MachineName, os.name AS OSName",Simple Retrieval Queries,network,False,False,True
"MATCH (p:Process)-[:LISTENS]->(port:Port {port: 80})
RETURN p
ORDER BY p.startTime DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (a:Application)
WHERE a.startTime > 1606165629748
RETURN a
ORDER BY a.startTime ASC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (v:Version {name: '7.1'})<-[:VERSION]-(s:Software)
RETURN s.name AS SoftwareName",Simple Retrieval Queries,network,False,False,True
"MATCH (z:Zone {zone: 3})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType, t.name AS TypeName
ORDER BY t.id
LIMIT 5",Simple Retrieval Queries,network,False,False,True
"MATCH (n:Network)-[:ROUTES]->(i:Interface {ip: '10.1.0.254'})
RETURN n
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 2})
RETURN r",Simple Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(e:Egress)
RETURN e.name",Simple Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'webserver'})-[:DEPENDS_ON]->(dependency)
RETURN dependency
LIMIT 4",Simple Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)
RETURN s.name, s.pid
ORDER BY s.pid DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (p:Port {port: 80})<-[:LISTENS]-(app:Application)
RETURN app.name",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:DEPENDS_ON]->(v:Version)
RETURN v.name AS VersionName",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {zone: 1})-[:HOLDS]->(s:Switch)
WHERE s.ip STARTS WITH '10.1'
RETURN r.name AS RackName, s.ip AS SwitchIP",Simple Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(p:Process)
RETURN p
LIMIT 5",Simple Retrieval Queries,network,False,False,True
"MATCH (i:Interface {ip: '10.0.0.254'})-[:EXPOSES]->(p:Port)
RETURN p.port",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version)
RETURN v.name AS Version",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application)
RETURN a.name",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack)-[:HOLDS]->(m:Machine)
WHERE r.zone = 1
RETURN m
ORDER BY m.name
LIMIT 5",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface)
RETURN i",Simple Retrieval Queries,network,False,False,False
"MATCH (z:Zone)
RETURN z.ip AS IP_Address
ORDER BY z.ip ASC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router)
RETURN r.name
ORDER BY r.name
LIMIT 3",Simple Retrieval Queries,network,True,False,False
"MATCH (app:Application)-[:DEPENDS_ON]->(serv:Service {name: 'java'})
RETURN app.name, app.pid
ORDER BY app.pid DESC
LIMIT 5",Simple Retrieval Queries,network,False,False,True
"MATCH (n:Network {zone: 2})
RETURN n.ip AS NetworkIP",Simple Retrieval Queries,network,False,False,True
"MATCH (t:Type)
RETURN t.name, t.disk
ORDER BY t.disk DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (app:Application)-[:DEPENDS_ON*]->(dep:Application {name: 'cms'})
RETURN DISTINCT app.name",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack)-[:HOLDS]->(s:Switch)
RETURN r.name
LIMIT 3",Simple Retrieval Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})-[:PREVIOUS*]->(prev:Version)
WHERE exists {
    (prev)<-[:VERSION]-(s:Software)
}
RETURN prev, s",Simple Retrieval Queries,network,False,False,True
"MATCH (e:Egress)-[:ROUTES]->(i:Interface {ip: '10.0.0.254'})
RETURN e.name",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Router {zone: 1})-[:ROUTES]->(i:Interface)
RETURN i
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (app:Application)-[:INSTANCE]->(soft:Software {name: 'webapp'})
RETURN app.name",Simple Retrieval Queries,network,False,False,False
"MATCH (v:Version {name: '7.1'})<-[:INSTANCE]-(p:Process)
RETURN p",Simple Retrieval Queries,network,False,False,True
"MATCH (os:OS {name: 'RHEL'})-[:RUNS]->(service:Service)-[:LISTENS]->(port:Port)
RETURN port.port
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (z:Zone {zone: 3})-[:ROUTES]->(i:Interface)
RETURN i.ip AS InterfaceIP",Simple Retrieval Queries,network,False,False,False
"MATCH (m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType, t.cpu AS CPUPower
ORDER BY t.cpu DESC
LIMIT 5",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application {name: 'logstash'})
RETURN r.name AS RackName",Simple Retrieval Queries,network,False,False,True
"MATCH (p:Process {name: '8966'})-[:DEPENDS_ON]->(dependency)
RETURN p.name AS ProcessName, dependency.name AS DependencyName",Simple Retrieval Queries,network,False,False,False
"MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service),
      (m)-[:TYPE]->(t:Type)
RETURN s.name AS ServiceName, t.ram AS RAMUsage
ORDER BY t.ram DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {zone: 4})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN t.type AS MachineType, t.ram AS RAM
ORDER BY t.ram DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (p:Process {name: '7.1'})-[:DEPENDS_ON]->(a:Application)
RETURN a.name
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (app:Application {name: 'crm'})-[:LISTENS]->(port:Port)
RETURN app.name AS Application, port.port AS Port",Simple Retrieval Queries,network,False,False,True
"MATCH (p:Process)-[:INSTANCE]->(a:Application {name: 'webapp'})
RETURN p
ORDER BY p.pid DESC
LIMIT 5",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Service {name: 'java'})-[:LISTENS]->(p:Port)
RETURN p.port",Simple Retrieval Queries,network,False,False,True
"MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type)
RETURN m.name AS MachineName, t.name AS TypeName",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Software)-[:DEPENDS_ON*]->(a:Application {name: 'webserver'})
RETURN s.name AS SoftwareName, count(*) AS DependencyCount
ORDER BY DependencyCount DESC
LIMIT 3",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Software)-[:DEPENDS_ON]->(v:Version)
WITH v, count(DISTINCT s) AS softwareCount
WHERE softwareCount > 1
RETURN v.name AS VersionName, softwareCount",Simple Retrieval Queries,network,False,False,True
"MATCH (s:Service)
WHERE s.startTime > 1605733619064 AND s.startTime < 1606597376483
RETURN s",Simple Retrieval Queries,network,False,False,True
"MATCH (n:Network {ip: '10.2'})-[:ROUTES]->(i:Interface)
RETURN i.name, i.ip",Simple Retrieval Queries,network,False,False,False
"MATCH (m:Machine)-[:TYPE]->(t:Type {type: 'xl'})
MATCH (m)-[:RUNS]->(a:Application)
RETURN m.name AS MachineName, a.name AS ApplicationName",Simple Retrieval Queries,network,False,False,True
"MATCH (c:Category)
WHERE NOT EXISTS {
    MATCH (c)<-[:PART_OF]-(p:Product)
    WHERE p.discontinued = TRUE
}
RETURN c.categoryName",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Pathfinding Queries,northwind,False,False,False
"MATCH (p:Product)<-[:ORDERS]-(:Order)
WITH p, count(*) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN p.productName, ordersCount",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order {orderDate: '1996-07-04 00:00:00.000'})
RETURN c.companyName, c.contactName
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS numCategories
WHERE numCategories > 5
RETURN s",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(p) AS products_supplied
ORDER BY products_supplied DESC
LIMIT 5
RETURN s.companyName, products_supplied",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS productCount
ORDER BY productCount DESC
LIMIT 3
RETURN c.categoryName, productCount",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE c.description CONTAINS 'seafood'
RETURN p",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
RETURN o.orderID, SUM(r.quantity) AS TotalQuantity
ORDER BY TotalQuantity DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.reorderLevel = 25
RETURN DISTINCT c.categoryName",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel > 20 AND p.discontinued = false
RETURN p.productName, p.productID, p.unitsInStock, p.unitPrice",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product {productName: 'Chang'})<-[:SUPPLIES]-(s:Supplier)
RETURN s
LIMIT 3",Pathfinding Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = true
RETURN p.productName, p.productID
ORDER BY p.productID
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.orderDate STARTS WITH '1996'
WITH c, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3
RETURN c.companyName, ordersCount",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.quantityPerUnit = '10 boxes x 20 bags'
RETURN p",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = true AND p.reorderLevel > 15
RETURN p
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName, p.unitsInStock AS UnitsInStock
ORDER BY p.unitsInStock ASC
LIMIT 1",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, sum(p.unitsInStock) AS totalUnitsInStock
ORDER BY totalUnitsInStock ASC
RETURN c.categoryName, totalUnitsInStock
LIMIT 1",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o
ORDER BY o.freight DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock < 5 AND p.unitsOnOrder > 0
RETURN p.productName, p.unitsInStock, p.unitsOnOrder",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer {city: 'Berlin'})-[:PURCHASED]->(o:Order)
WHERE o.requiredDate > '1997-01-01'
RETURN o",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock >= 10 AND p.unitsInStock <= 20
RETURN p.productName, p.unitsInStock",Pathfinding Queries,northwind,False,False,False
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice > 100
RETURN DISTINCT c
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product {productName: 'Chai'})
RETURN s.companyName AS SupplierName",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {city: 'London'})
RETURN s
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Condiments'})
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:SUPPLIES]->(s:Supplier)
WHERE p.discontinued = TRUE AND s.country = 'UK'
RETURN p",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, count(o) AS ordersCount
WHERE ordersCount > 100
RETURN p.productName, ordersCount",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category)
WHERE o.shipCity = 'Reims'
WITH cat, count(o) AS orders
ORDER BY orders DESC
LIMIT 3
RETURN cat.categoryName, orders",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.unitPrice < 10
RETURN s.companyName, p.productName, p.unitPrice",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
RETURN c.companyName, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
WHERE o.orderDate = '1996-07-04 00:00:00.000'
RETURN AVG(toFloat(r.discount)) AS averageDiscount",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product {productID: '72'})-[:ORDERS]->(o:Order)
RETURN o",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
RETURN p.productName, p.productID
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice > 50
RETURN DISTINCT c.categoryName",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN o.shipCity AS City, count(p) AS NumberOfProductsShipped
ORDER BY NumberOfProductsShipped DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.homePage CONTAINS 'http'
RETURN s.companyName
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.reorderLevel > 15
RETURN DISTINCT c.description",Verbose query,northwind,False,False,False
"MATCH (s:Supplier {fax: 'NULL'})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Simple Aggregation Queries,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.shipCity = 'Reims'
RETURN DISTINCT c.companyName",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WITH AVG(p.reorderLevel) AS avgReorderLevel
MATCH (p2:Product)
WHERE p2.reorderLevel > avgReorderLevel
RETURN p2.productName AS ProductName",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel > 0
RETURN p.productName, p.reorderLevel
ORDER BY p.reorderLevel DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,False
"MATCH (s:Supplier)
WHERE s.contactName STARTS WITH 'C'
RETURN s",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->()
WITH p, o
ORDER BY o.discount
RETURN p.productName, o.discount
LIMIT 3",Simple Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, AVG(p.unitsInStock) AS avgUnitsInStock
WHERE avgUnitsInStock < 20
RETURN c
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipVia = '3' AND o.shipCountry = 'USA'
RETURN o.orderID, o.shippedDate, o.shipName",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'Germany'})-[:SUPPLIES]->(p:Product)
RETURN p.productName
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
RETURN p.productName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.unitsOnOrder > 0
RETURN s.companyName, count(p) AS NumberOfProductsOnOrder
ORDER BY NumberOfProductsOnOrder DESC",Simple Aggregation Queries,northwind,True,False,False
"MATCH (p:Product)
WHERE p.reorderLevel > 20 AND p.unitsInStock = 0
RETURN p.productName, p.productID, p.reorderLevel, p.unitsInStock",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c.categoryName AS CategoryName, AVG(p.unitPrice) AS AvgUnitPrice
ORDER BY AvgUnitPrice DESC
RETURN CategoryName, AvgUnitPrice
LIMIT 3",Simple Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.unitPrice >= 10 AND p.unitPrice <= 20
RETURN p
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
WHERE p.reorderLevel = 10
RETURN p.productName, p.productID, p.unitPrice",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Seafood'})
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shippedDate = date(o.orderDate) + duration({days: 7})
RETURN o
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {city: 'London'})
RETURN s",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {description: 'Sweet and savory sauces, relishes, spreads, and se'})
RETURN p.productName AS ProductName",Simple Aggregation Queries,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
RETURN c.companyName, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {description: 'Desserts, candies, and sweet breads'})
WHERE p.reorderLevel < 10
RETURN p
LIMIT 3",Simple Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE c.description CONTAINS 'sauces'
RETURN p.productName, p.productID, p.unitPrice
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.phone ENDS WITH '8'
RETURN s.companyName
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: 'Meat/Poultry'})
WITH c, COUNT(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3
RETURN c.companyName, ordersCount",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.freight > 100
RETURN o.shipName AS OrderName
ORDER BY o.freight DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock < 10
RETURN p
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:SUPPLIES]->(s:Supplier)
WHERE p.reorderLevel = 25 AND s.city = 'London'
RETURN p",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Produce'})
WHERE p.reorderLevel IS NOT NULL AND p.reorderLevel > 0
RETURN p.productName AS ProductName, p.reorderLevel AS ReorderLevel
ORDER BY p.reorderLevel DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shipName CONTAINS 'Vins et alcools Chevalier'
RETURN o
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.postalCode STARTS WITH 'EC'
RETURN s",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)
WITH s, COUNT(DISTINCT o.shipCity) AS citiesSupplied
ORDER BY citiesSupplied DESC
LIMIT 3
RETURN s.companyName AS SupplierName, citiesSupplied",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
WHERE exists {
  MATCH (p)<-[:ORDERS]-(:Order)
  WHERE count{(p)<-[:ORDERS]-(:Order)} > 10
}
RETURN p.productName, p.productID
ORDER BY count{(p)<-[:ORDERS]-(:Order)} DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitsOnOrder > 20
RETURN c.categoryName, count(p) AS ProductCount
ORDER BY ProductCount DESC",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product {quantityPerUnit: '48 - 6 oz jars'})
RETURN p.productName
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shipRegion IS NOT NULL
RETURN o
LIMIT 3",Simple Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.unitsOnOrder = 0 AND p.discontinued = FALSE
RETURN p.productName, p.productID",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)
WITH s, AVG(o.freight) AS avgFreight
ORDER BY avgFreight DESC
LIMIT 3
RETURN s.companyName AS SupplierName, avgFreight",Simple Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
WHERE exists {
  (p)<-[:ORDERS {discount: '0'}]-(:Order)
}
RETURN p
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer {contactTitle: 'Sales Representative'})-[:PURCHASED]->(o:Order)
RETURN o",Simple Aggregation Queries,northwind,False,False,False
"MATCH (c:Category)<-[:PART_OF]-(p:Product)<-[:SUPPLIES]-(s:Supplier)
WITH c, count(DISTINCT s) AS suppliersCount
ORDER BY suppliersCount DESC
RETURN c.categoryName AS CategoryName, suppliersCount
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'USA'})-[:SUPPLIES]->(p:Product)
RETURN p
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:ORDERS]->(o:Order)
WITH s, count(DISTINCT o.shipName) AS shipCount
WHERE shipCount > 2
RETURN s.companyName, shipCount",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitPrice < 5 AND p.discontinued = true
RETURN p.productName
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, count(o) AS ordersCount
WHERE ordersCount > 100
RETURN p.productName, ordersCount",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
RETURN s
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WHERE c.categoryName IN ['Desserts', 'Condiments']
WITH s, collect(c.categoryName) AS categories
WHERE ALL(cat IN ['Desserts', 'Condiments'] WHERE cat IN categories)
RETURN s",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)<-[:ORDERS]-(o:Order)
WHERE o.shipCountry = 'France'
RETURN p.productName, sum(toInteger(o.quantity)) AS TotalQuantity
ORDER BY TotalQuantity DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.discontinued = true
RETURN DISTINCT c.categoryName",Verbose query,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel = 10
RETURN p",Verbose query,northwind,False,False,False
"MATCH (c:Customer {city: 'Portland'})-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
RETURN p.productName, sum(r.quantity) AS TotalQuantityOrdered
ORDER BY TotalQuantityOrdered DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.unitPrice >= 10 AND p.unitPrice <= 20 AND p.discontinued = true
RETURN p
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Mayumi's""})-[:SUPPLIES]->(p:Product)-[o:ORDERS]->(:Order)
WHERE o.discount = ""0""
RETURN p.productName AS ProductName, p.productID AS ProductID",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Seafood'})
WHERE s.homePage IS NOT NULL
RETURN s",Complex Aggregation Queries,northwind,False,False,False
"MATCH (c:Customer {city: 'Berlin'})-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
RETURN p.productName, SUM(r.quantity) AS TotalQuantityOrdered
ORDER BY TotalQuantityOrdered DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
RETURN DISTINCT s.companyName AS SupplierName",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.freight >= 1000
RETURN c
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:ORDERS]->(o:Order)
WHERE o.shipCity = 'London' AND toFloat(p.unitPrice) > 30
RETURN p",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Meat/Poultry'})
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(c:Category)
WITH o, count(DISTINCT c) AS numCategories
WHERE numCategories > 3
RETURN o
ORDER BY o.orderDate
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WHERE toFloat(o.unitPrice) * (1 - toFloat(o.discount)) < 15
RETURN p.productName, p.productID, o.unitPrice, o.discount",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
WHERE p.reorderLevel > 10
RETURN s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o.shipCity AS City, count(o) AS NumberOfShipments
ORDER BY NumberOfShipments DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
WHERE p.unitsInStock > 50
RETURN p
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)-[o:ORDERS]->(ord:Order)
WHERE o.quantity < 10
RETURN p.productName, o.quantity",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS numCategories
WHERE numCategories > 1
RETURN s.companyName, numCategories
ORDER BY numCategories DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(p) AS productsSupplied
ORDER BY productsSupplied DESC
LIMIT 5
RETURN s.companyName, productsSupplied",Verbose query,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product {productName: 'Chai'})
RETURN DISTINCT c.companyName AS CustomerName",Verbose query,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
RETURN o.orderID, p.productID, r.quantity
ORDER BY r.quantity DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS productCount
ORDER BY productCount DESC
LIMIT 3
RETURN c.categoryName, productCount",Verbose query,northwind,False,False,False
"MATCH (s:Supplier {city: 'London'})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Verbose query,northwind,False,False,True
"MATCH (p:Product)
WHERE p.quantityPerUnit CONTAINS 'bottles'
RETURN p.productName",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE c.country = 'USA' AND o.shippedDate > '1997-06-01'
RETURN o.orderID, o.shippedDate, c.companyName",Verbose query,northwind,True,False,False
"MATCH (p:Product)
WHERE p.unitsOnOrder = 0 AND NOT exists{(p)<-[:ORDERS]-(:Order)}
RETURN p
ORDER BY p.unitPrice DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (c:Customer)
WHERE c.contactTitle = 'Sales Representative' AND c.city = 'Berlin'
RETURN c",Verbose query,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitPrice > 100 AND p.discontinued = FALSE
RETURN p.productName, p.unitPrice",Verbose query,northwind,False,False,False
"MATCH (s:Supplier {companyName: 'Plutzer'})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
RETURN c.companyName, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.homePage IS NOT NULL
RETURN s.companyName
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice > 50
RETURN c.categoryName AS CategoryName, AVG(p.unitPrice) AS AverageUnitPrice
GROUP BY c.categoryName
HAVING AverageUnitPrice > 50",Verbose query,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder > 0 AND p.discontinued = FALSE
RETURN p
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE c.country = 'Germany'
WITH c, count(DISTINCT p) AS numProducts
WHERE numProducts > 3
RETURN c.companyName, numProducts",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, count(o) AS ordersCount
WHERE ordersCount > 50
RETURN p.productName AS ProductName",Verbose query,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
WHERE p.unitPrice > 20
RETURN count(p) AS NumberOfProducts",Verbose query,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shipCountry = 'France' AND o.requiredDate < '1997-01-01 00:00:00.000'
RETURN o",Verbose query,northwind,False,False,True
"MATCH (o:Order)
RETURN o
ORDER BY o.freight DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})
RETURN s.contactName",Verbose query,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
WHERE p.unitsInStock < 20
RETURN p.productName, p.unitsInStock",Verbose query,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE p.unitPrice < 10
RETURN DISTINCT c",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, count(o) AS ordersCount
WHERE ordersCount > 100
RETURN p.productName, ordersCount",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.unitPrice > 50
WITH s, count(p) AS products_count
ORDER BY products_count DESC
LIMIT 5
RETURN s.companyName, products_count",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder > 50
RETURN p",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE p.productName = 'Chai' AND c.city = 'Portland'
RETURN c
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)-[:PURCHASED]->(c:Customer)
WITH s, COUNT(DISTINCT c.city) AS citiesShippedTo
ORDER BY citiesShippedTo DESC
LIMIT 5
RETURN s.companyName, citiesShippedTo",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'Germany'})-[:SUPPLIES]->(p:Product)-[:ORDERS]->(o:Order)
WHERE o.orderDate STARTS WITH '1998'
RETURN p.productName, p.productID, s.companyName, s.supplierID, o.orderID, o.orderDate",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.quantityPerUnit CONTAINS 'bags'
RETURN p",Complex Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
RETURN o.orderID, p.productID, r.quantity
ORDER BY r.quantity DESC
LIMIT 3",Complex Aggregation Queries,northwind,False,False,False
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WHERE c.categoryName IN ['Grains/Cereals', 'Meat/Poultry']
WITH s, collect(DISTINCT c.categoryName) AS categories
WHERE size(categories) = 2
RETURN s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice ASC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.unitPrice >= 50 AND p.unitPrice <= 100
RETURN p",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.reorderLevel > 25
RETURN DISTINCT c.categoryName",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.shipVia = '2'
RETURN DISTINCT c.companyName",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Seafood'})
WITH p, count{(p)<-[:ORDERS]-()} AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN p.productName, ordersCount",Complex Aggregation Queries,northwind,True,False,False
"MATCH (o:Order)-[:PURCHASED]->(c:Customer {city: ""Berlin""})
WHERE o.freight > 100 AND o.shippedDate IS NOT NULL
RETURN o
ORDER BY o.shippedDate
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder = 0 AND p.discontinued = false AND NOT exists{(p)-[:ORDERS]->(:Order)}
RETURN p.productName, p.productID",Complex Aggregation Queries,northwind,False,False,False
"MATCH (s:Supplier)
WHERE s.homePage IS NULL
RETURN s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WITH c, SUM(toFloat(o.freight)) AS totalFreight
ORDER BY totalFreight DESC
LIMIT 5
RETURN c.companyName, totalFreight",Complex Aggregation Queries,northwind,False,False,False
"MATCH (s:Supplier {companyName: ""Mayumi's""})-[:SUPPLIES]->(p:Product)
WHERE p.unitPrice < 20
RETURN p.productName, p.unitPrice
LIMIT 3",Complex Aggregation Queries,northwind,False,False,False
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(DISTINCT p) AS numProducts
WHERE numProducts > 5
RETURN s.companyName, numProducts",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE exists {
  MATCH (p)-[:PART_OF]->(c1:Category),
        (p)-[:PART_OF]->(c2:Category)
  WHERE c1 <> c2
}
RETURN p.productName, collect(DISTINCT c1.categoryName) AS categories",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.reorderLevel = 0
RETURN s
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
RETURN p.productName, o.discount
ORDER BY o.discount DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.discontinued = true
RETURN s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WHERE o.quantity > 50 AND o.unitPrice > ""20""
RETURN p.productName, o.quantity, o.unitPrice",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:ORDERS]->(o:Order)
WHERE o.orderDate >= date({month: 10, day: 1}) AND o.orderDate <= date({month: 12, day: 31})
RETURN p",Complex Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)-[:PURCHASED]->(c:Customer)
WHERE c.country = 'Germany' AND o.freight IS NOT NULL
RETURN o.orderID, o.freight
ORDER BY o.freight DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.discontinued = false AND p.unitsInStock < 20
RETURN s
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
WHERE p.unitPrice > 75
RETURN p.productName, p.unitPrice",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS numCategories
WHERE numCategories > 1
RETURN s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(o:Order)
WHERE o.orderDate STARTS WITH '1996-12' OR o.orderDate STARTS WITH '1997-12' OR o.orderDate STARTS WITH '1998-12' OR o.orderDate STARTS WITH '1999-12' OR o.orderDate STARTS WITH '2000-12'
WITH p, COUNT(o) AS ordersCount
RETURN p.productName, ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.requiredDate < '1997-06-01' AND toFloat(o.freight) > 200
RETURN o
ORDER BY o.requiredDate
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
WHERE exists {
    (p)<-[:ORDERS {discount: '0'}]-(:Order)
}
RETURN p.productName, p.productID",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE s.fax IS NOT NULL
RETURN p",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c.categoryName AS Category, AVG(p.unitPrice) AS AvgUnitPrice
ORDER BY AvgUnitPrice DESC
RETURN Category, AvgUnitPrice
LIMIT 5",Complex Aggregation Queries,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WITH c, count(o) AS ordersCount
WHERE ordersCount > 5
RETURN c
LIMIT 3",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)<-[:ORDERS]-(o:Order)
WHERE o.orderDate > '1997-01-01'
RETURN p.productName, p.productID",Complex Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipCity = 'Reims' AND toFloat(o.freight) < 50
RETURN o, p",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer {country: 'USA'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.quantityPerUnit CONTAINS '20 bags' AND p.reorderLevel < 15
RETURN p
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE s.contactTitle = 'Purchasing Manager'
WITH s, count(p) AS productsSupplied
WHERE productsSupplied > 3
RETURN s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c1:Category {categoryName: 'Beverages'}),
      (p)-[:PART_OF]->(c2:Category {categoryName: 'Condiments'})
RETURN p.productName, p.productID",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product {productName: 'Chai'})-[:ORDERS]->(o:Order)
RETURN o.orderID AS OrderID, sum(o.quantity) AS TotalQuantity
ORDER BY TotalQuantity DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Category)-[:PART_OF]-(p:Product)-[:ORDERS]-(o:Order)
WITH c, count(o) AS ordersCount
WHERE ordersCount > 50
RETURN c
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipCountry = 'France' AND toFloat(o.freight) > 50
RETURN o, p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {city: 'Berlin'})-[:PURCHASED]->(o:Order)
RETURN o",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = true AND p.unitsInStock < 10
RETURN p.productName, p.unitsInStock",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel > 15
RETURN p.productName, p.reorderLevel",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
WITH p
MATCH (o:Order)-[r:ORDERS]->(p)
RETURN p.productName, SUM(r.quantity) AS TotalQuantityOrdered
ORDER BY TotalQuantityOrdered DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {city: 'London'})
RETURN s.companyName, s.contactName
ORDER BY s.companyName
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: ""Dairy Products""})
WITH c, count(p) AS products_ordered
ORDER BY products_ordered DESC
LIMIT 3
RETURN c.companyName, products_ordered",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})
RETURN s.companyName, s.contactName, s.phone, s.address, s.city, s.postalCode, s.contactTitle",Complex Retrieval Queries,northwind,False,False,False
"MATCH (c:Customer {companyName: ""Ernst Handel""})-[:PURCHASED]->(o:Order)
RETURN o.shipCity AS ShipCity, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,False
"MATCH (c:Customer {country: 'Germany'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock IS NOT NULL
RETURN p
ORDER BY p.unitsInStock ASC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,False
"MATCH (o:Order)
RETURN o
ORDER BY o.requiredDate DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = false AND p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)
RETURN c.city AS City, count(c) AS NumberOfCustomers
ORDER BY NumberOfCustomers DESC
LIMIT 3",Simple Retrieval Queries,northwind,True,False,False
"MATCH (s:Supplier {companyName: ""Plutzer""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice ASC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)-[o:ORDERS]->()
RETURN p.productName, AVG(o.quantity) AS avgQuantity
ORDER BY avgQuantity DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o.shipAddress AS ShipAddress, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, AVG(TOFLOAT(o.discount)) AS avgDiscount
ORDER BY avgDiscount DESC
LIMIT 5
RETURN p.productName, avgDiscount",Simple Retrieval Queries,northwind,False,False,False
"MATCH (c:Customer {city: 'Berlin'})
RETURN c",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(:Order)
WITH p, count(*) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN p.productName, ordersCount",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS {quantity: q}]-(:Order)
WHERE q > 100
RETURN p.productName, p.productID, q",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {companyName: 'LONESOME PINE RESTAURANT'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {customerID: 'VINET'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName AS ProductOrdered",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.fax IS NOT NULL
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WHERE o.discount <> ""0""
RETURN DISTINCT p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.orderDate STARTS WITH '1996'
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel = 0 AND p.unitsInStock > 0
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.city STARTS WITH 'L'
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder > 20
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Category)
WHERE NOT exists {
  MATCH (c)<-[:PART_OF]-(p:Product)
  WHERE p.discontinued = true
}
RETURN c.categoryName",Complex Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.reorderLevel = 0
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WITH c, count(o) AS ordersCount
WHERE ordersCount > 5
RETURN c",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant', city: 'Portland'})-[:PURCHASED]->(o:Order)
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
WHERE p.unitPrice > 50
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product {productName: ""Chef Anton's Cajun Seasoning""})-[:SUPPLIES]-(s:Supplier)
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Condiments'})
WHERE p.unitsInStock > 0
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product {discontinued: true})
RETURN p.productName AS DiscontinuedProducts",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS numCategories
WHERE numCategories > 1
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS productCount
ORDER BY productCount DESC
LIMIT 3
RETURN c.categoryName, productCount",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
WITH s, count(p) AS numProducts
ORDER BY numProducts DESC
LIMIT 5
RETURN s.companyName, numProducts",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.discontinued = true
WITH c, count(p) AS discontinuedCount
ORDER BY discontinuedCount DESC
LIMIT 3
RETURN c.categoryName, discontinuedCount",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {customerID: ""VINET""})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {companyName: ""Alfreds Futterkiste""})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName, SUM(toInteger(o.quantity)) AS TotalQuantityOrdered
ORDER BY TotalQuantityOrdered DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o.shipCity AS ShipCity, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
RETURN c.companyName, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock > 0 AND p.discontinued = FALSE
RETURN p
ORDER BY p.unitsInStock DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.reorderLevel
ORDER BY p.reorderLevel ASC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS productCount
ORDER BY productCount DESC
LIMIT 3
RETURN c.categoryName, productCount",Simple Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.discontinued = true
RETURN p.productName
ORDER BY p.productID
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(p) AS products_supplied
ORDER BY products_supplied DESC
LIMIT 3
RETURN s.companyName, products_supplied",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Seafood'})
WHERE p.reorderLevel = 0
RETURN p.productName AS ProductName",Verbose query,northwind,True,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product {productName: 'Chai'})
WITH c, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3
RETURN c.companyName, ordersCount",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, AVG(toFloat(o.discount)) AS avgDiscount
ORDER BY avgDiscount DESC
LIMIT 3
RETURN p.productName, avgDiscount",Verbose query,northwind,False,False,False
"MATCH (o:Order)
WITH o.employeeID AS EmployeeID, count(o) AS OrdersCount
ORDER BY OrdersCount DESC
LIMIT 5
RETURN EmployeeID, OrdersCount",Verbose query,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel > 0
RETURN p.productName, p.reorderLevel
ORDER BY p.reorderLevel DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer)
WITH s, COUNT(DISTINCT c.city) AS citiesSupplied
ORDER BY citiesSupplied DESC
LIMIT 5
RETURN s.companyName, citiesSupplied",Verbose query,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Condiments'})
RETURN p.productName, p.quantityPerUnit
ORDER BY p.quantityPerUnit DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.shippedDate IS NOT NULL AND o.orderDate IS NOT NULL
WITH c, o, duration.between(datetime(o.orderDate), datetime(o.shippedDate)) AS shippingDuration
ORDER BY shippingDuration DESC
RETURN c.companyName, c.contactName, shippingDuration
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
RETURN DISTINCT c.categoryName
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
RETURN p.productName, o.discount
ORDER BY o.discount DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitPrice >= 10 AND p.unitPrice <= 20
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(p) AS productsSupplied
ORDER BY productsSupplied DESC
LIMIT 5
RETURN s.companyName, productsSupplied",Simple Retrieval Queries,northwind,False,False,True
"MATCH (e:Employee)-[:PROCESSED]->(o:Order)
RETURN e.employeeID, count(o) AS ordersProcessed
ORDER BY ordersProcessed DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})
RETURN s.companyName
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(:Product)
RETURN s.country AS Country, count(s) AS NumberOfSupplies
ORDER BY NumberOfSupplies DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WITH c, COUNT(DISTINCT p) AS uniqueProductsOrdered
ORDER BY uniqueProductsOrdered DESC
LIMIT 5
RETURN c.companyName, uniqueProductsOrdered",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitPrice IS NOT NULL AND p.unitsInStock > 0
RETURN p
ORDER BY p.unitPrice ASC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitsInStock IS NOT NULL
WITH c, count(p) AS productsAvailable
ORDER BY productsAvailable ASC
LIMIT 3
RETURN c.categoryName, productsAvailable",Simple Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)
RETURN p.productName, p.reorderLevel
ORDER BY p.reorderLevel DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE p.discontinued = true
WITH c, count(p) AS discontinuedProductsCount
ORDER BY discontinuedProductsCount DESC
LIMIT 3
RETURN c.companyName, discontinuedProductsCount",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o.shipVia AS ShipVia, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
WITH o, count(p) AS products_ordered
ORDER BY products_ordered DESC
LIMIT 5
RETURN o AS Order, products_ordered AS NumberOfProductsOrdered",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Mayumi's""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shipRegion IS NOT NULL
RETURN o.shipRegion AS ShipRegion, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
RETURN p.productName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, sum(p.unitsOnOrder) AS totalUnitsOnOrder
ORDER BY totalUnitsOnOrder DESC
LIMIT 3
RETURN s.companyName, totalUnitsOnOrder",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c.categoryName AS CategoryName, AVG(p.unitsInStock) AS AvgUnitsInStock
RETURN CategoryName, AvgUnitsInStock
ORDER BY AvgUnitsInStock DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)
RETURN p.productName, p.quantityPerUnit
ORDER BY p.quantityPerUnit
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o.shipCountry AS ShipCountry, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
RETURN c.companyName, SUM(toFloat(o.freight)) AS TotalFreight
ORDER BY TotalFreight DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p1:Product)-[:ORDERS]-(o:Order)-[:ORDERS]-(p2:Product)
WHERE p1.productID < p2.productID
WITH p1, p2, count(o) AS times_ordered_together
ORDER BY times_ordered_together DESC
RETURN p1.productName, p2.productName, times_ordered_together
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o
ORDER BY o.freight DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c.categoryName AS CategoryName, AVG(p.unitPrice) AS AvgUnitPrice
ORDER BY AvgUnitPrice DESC
RETURN CategoryName, AvgUnitPrice
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.homePage STARTS WITH 'http'
RETURN s
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'Germany'})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.productID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipCountry = 'USA'
RETURN o AS Order, p AS Product",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel = 0 AND p.unitsInStock > 0
RETURN p.productName, p.unitsInStock",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o
ORDER BY o.freight DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.discontinued = true
RETURN p.productName, c.categoryName
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer {country: ""Germany""})
RETURN c.companyName",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS numProducts
WHERE numProducts > 5
RETURN c.categoryName, numProducts",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName AS ProductName, p.unitsOnOrder AS UnitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})
RETURN s.companyName, s.contactName
ORDER BY s.companyName
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS productCount
ORDER BY productCount DESC
RETURN c.categoryName, productCount
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.shippedDate IS NOT NULL
RETURN o.shipCity AS City, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,False
"MATCH (c:Category)
RETURN c.categoryName, c.description
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName AS ProductName, p.unitPrice AS UnitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {description: 'Desserts, candies, and sweet breads'})
WHERE p.unitsOnOrder > 5
RETURN p.productName, p.unitsOnOrder",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {city: 'Berlin'})-[:PURCHASED]->(o:Order)
WITH c, count(o) AS ordersCount
WHERE ordersCount > 3
RETURN c",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitPrice > 20 AND p.reorderLevel < 5
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WHERE s.country = 'Germany' AND c.categoryName = 'Beverages'
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Meat/Poultry'})
WHERE p.reorderLevel > 20
RETURN p.productName, p.reorderLevel",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
RETURN o.orderID, SUM(r.quantity) AS TotalQuantity
ORDER BY TotalQuantity DESC
LIMIT 5",Complex Retrieval Queries,northwind,False,False,False
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.discontinued = false
RETURN s",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock ASC
LIMIT 5",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {contactTitle: 'Purchasing Manager'})
RETURN s",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(:Order)
WITH p, count(*) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3
RETURN p.productName, ordersCount",Simple Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE NOT exists{ (p)-[:ORDERS]->(:Order) }
RETURN p.productName
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice < 10
RETURN DISTINCT c
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:SUPPLIES]->(s:Supplier)
WHERE s.region = 'NULL'
RETURN p.productName, p.productID",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Mayumi's""})-[:SUPPLIES]->(p:Product)
RETURN p
LIMIT 3",Simple Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.reorderLevel > 20
RETURN p.productName, p.productID, p.reorderLevel",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
WITH c, sum(r.quantity) AS totalQuantity
ORDER BY totalQuantity DESC
LIMIT 3
RETURN c.companyName AS CustomerName, totalQuantity",Simple Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
WHERE p.discontinued = true
RETURN p
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipVia = '1'
RETURN o.orderID, o.shipName, o.shippedDate, o.shipCity",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product {quantityPerUnit: '10 boxes x 20 bags'})
RETURN p
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS numCategories
WHERE numCategories > 3
RETURN s",Simple Aggregation Queries,northwind,False,False,False
"MATCH (e:Employee)-[:PROCESSED]->(o:Order)
RETURN e, count(o) AS ordersProcessed
ORDER BY ordersProcessed DESC
LIMIT 3",Simple Aggregation Queries,northwind,True,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
WHERE p.unitsInStock > 30
RETURN p.productName, p.unitsInStock",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[r:ORDERS {discount: '0'}]->(:Order)
RETURN p.productName AS ProductName",Simple Aggregation Queries,northwind,False,False,False
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipCountry = 'France'
RETURN o.orderID, o.shippedDate, o.shipName
ORDER BY o.shippedDate
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
WHERE p.unitPrice > 50
RETURN p.productName, p.unitPrice",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitsOnOrder > 50
RETURN DISTINCT c.categoryName",Simple Aggregation Queries,northwind,False,False,False
"MATCH (s:Supplier)
WHERE s.fax IS NULL
RETURN s
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.requiredDate IS NOT NULL AND o.orderDate IS NOT NULL AND 
      duration.between(date(o.orderDate), date(o.requiredDate)).days < 30
RETURN c",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.quantityPerUnit
ORDER BY p.unitsInStock DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.freight > 100
RETURN c.companyName AS CustomerName, o.orderID AS OrderID, o.freight AS FreightCost",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder = 0 AND p.reorderLevel > 10
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(p) AS numProducts
WHERE numProducts > 3
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
WHERE p.discontinued = true
RETURN p.productName, p.productID, p.unitPrice, p.unitsInStock",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
RETURN AVG(p.unitPrice) AS AverageUnitPrice",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = false AND p.unitPrice > 35
RETURN p",Complex Retrieval Queries,northwind,False,False,False
"MATCH (o:Order)
WHERE o.shippedDate >= '1996-07-16 00:00:00.000'
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.region = 'NULL'
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitsOnOrder > 0
RETURN DISTINCT c",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE s.phone ENDS WITH '2222'
RETURN p.productName AS ProductName, p.productID AS ProductID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.discontinued = true
RETURN DISTINCT s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {customerID: 'FURIB'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Complex Retrieval Queries,northwind,False,False,False
"MATCH (s:Supplier)
WHERE s.homePage IS NULL
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {region: 'NULL'})
RETURN c",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.freight < '10'
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {city: 'London'})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel >= 25
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.requiredDate < '1997-01-01'
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[r:ORDERS]->(o:Order)
WITH p, count(o) AS ordersCount
WHERE ordersCount > 1
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WITH c, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3
RETURN c.companyName, ordersCount",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock < 5
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipVia = '3'
RETURN o AS Order, collect(p) AS Products",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
WHERE p.unitsInStock > 50
RETURN p.productName, p.unitsInStock",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)
WHERE c.fax ENDS WITH '6545'
RETURN c",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {contactTitle: 'Sales Representative'})
RETURN c",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.quantityPerUnit = '10 boxes x 20 bags'
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {city: 'Portland'})-[:PURCHASED]->(o:Order)
RETURN o",Complex Retrieval Queries,northwind,False,False,False
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.orderDate STARTS WITH '1996' AND o.shipCountry = 'USA'
RETURN o AS Order, collect(p) AS Products",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.productName STARTS WITH 'C'
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.country <> 'USA' AND s.country <> 'UK'
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitPrice < 10 AND p.discontinued = true
RETURN p.productName, p.unitPrice, p.discontinued",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipCountry = 'France' AND o.shipVia = '1'
RETURN o, p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
WHERE p.unitsOnOrder > 10
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE s.fax IS NULL
RETURN p.productName, p.productID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.reorderLevel
ORDER BY p.reorderLevel DESC
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WHERE c.categoryName IN ['Beverages', 'Condiments']
WITH s, collect(c.categoryName) AS categories
WHERE ALL(cat IN ['Beverages', 'Condiments'] WHERE cat IN categories)
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
WITH c, sum(r.quantity) AS totalQuantity
WHERE totalQuantity > 50
RETURN c.companyName AS CustomerName, totalQuantity",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Seafood'})
WHERE count{(p)<-[:ORDERS]-(:Order)} > 5
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE c.contactTitle = 'Sales Representative'
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, AVG(p.unitPrice) AS avgPrice
MATCH (p2:Product)-[:PART_OF]->(c)
WHERE p2.unitPrice > avgPrice
RETURN p2.productName, p2.unitPrice, c.categoryName, avgPrice",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitPrice < 5
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.reorderLevel > 0
RETURN DISTINCT c.categoryName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (:Order)-[r:ORDERS]->(:Product)
RETURN MAX(r.discount) AS HighestDiscount",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock = 0 AND p.discontinued = false
RETURN p",Complex Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.discontinued = true AND p.unitsInStock = 0
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(p) AS products_supplied
ORDER BY products_supplied DESC
LIMIT 3
RETURN s.companyName, products_supplied",Complex Retrieval Queries,northwind,False,False,False
"MATCH (o:Order)
WHERE o.requiredDate CONTAINS '1996' AND o.shipVia = '2'
RETURN o",Verbose query,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel = 0
RETURN p
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
RETURN s
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:ORDERS]->(o:Order)
RETURN p.productName, count(o) AS reorderCount
ORDER BY reorderCount DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o
ORDER BY o.freight DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order {orderDate: '1996-07-04'})
RETURN c.companyName
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel > 20
RETURN p
ORDER BY p.reorderLevel DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.requiredDate > '1997-01-01 00:00:00.000'
RETURN o
ORDER BY o.requiredDate
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitsOnOrder = 0
RETURN DISTINCT c.categoryName
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer {city: ""London""})
RETURN c.companyName, c.contactName
ORDER BY c.customerID
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.reorderLevel = 0
RETURN s.companyName, count(p) AS NumberOfProducts
ORDER BY NumberOfProducts DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipCountry = 'France' AND o.shipVia = '1'
RETURN o.orderID, o.shippedDate, o.shipName
ORDER BY o.shippedDate
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product {productName: ""Chef Anton's Cajun Seasoning""})
RETURN c
LIMIT 3",Pathfinding Queries,northwind,True,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice ASC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})
RETURN s.companyName, s.contactName, s.phone
ORDER BY s.companyName
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
RETURN c.companyName, SUM(r.quantity) AS totalQuantity
ORDER BY totalQuantity DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,False
"MATCH (c:Customer {country: ""Germany""})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.freight > ""100""
RETURN o
ORDER BY o.orderDate
LIMIT 3",Pathfinding Queries,northwind,True,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.reorderLevel > 15
WITH c, count(p) AS productCount
ORDER BY productCount DESC
LIMIT 3
RETURN c.categoryName, productCount",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p
ORDER BY length(p.productName) ASC
LIMIT 5",Pathfinding Queries,northwind,False,False,False
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS numCategories
WHERE numCategories > 1
RETURN s
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(:Order)
WITH p, count(*) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN p.productName, ordersCount",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, SUM(toFloat(o.discount)) AS totalDiscount
ORDER BY totalDiscount DESC
LIMIT 3
RETURN p.productName, totalDiscount",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shippedDate < o.requiredDate
RETURN o
ORDER BY o.shippedDate
LIMIT 3",Pathfinding Queries,northwind,False,False,False
"MATCH (c:Customer)
RETURN c.companyName, c.customerID
ORDER BY length(c.companyName) DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c.categoryName AS CategoryName, AVG(p.reorderLevel) AS AvgReorderLevel
ORDER BY AvgReorderLevel DESC
RETURN CategoryName, AvgReorderLevel
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = TRUE AND p.reorderLevel > 5
RETURN p
ORDER BY p.reorderLevel DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WHERE c.categoryName IN ['Beverages', 'Condiments']
WITH s, count(DISTINCT c) AS categoriesCount
WHERE categoriesCount = 2
RETURN s
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock IS NOT NULL
RETURN p
ORDER BY p.unitsInStock ASC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category)
WITH c, COUNT(DISTINCT cat.categoryID) AS diversity
ORDER BY diversity DESC
LIMIT 3
RETURN c.companyName, diversity",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(o:Order)-[:PURCHASED]->(c:Customer)
WHERE o.shipCountry = 'France'
RETURN p.productName, count(o) AS shipments
ORDER BY shipments DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c.categoryName AS Category, AVG(p.unitPrice) AS AvgUnitPrice
RETURN Category, AvgUnitPrice
ORDER BY AvgUnitPrice DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.discontinued = false AND p.unitPrice IS NOT NULL
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer {city: 'Berlin'})-[:PURCHASED]->(o:Order)
RETURN o
ORDER BY o.orderDate DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
RETURN c.companyName, SUM(r.quantity) AS totalUnitsOrdered
ORDER BY totalUnitsOrdered DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Meat/Poultry'})
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer {country: 'USA'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category)
WITH cat, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN cat.categoryName, ordersCount",Pathfinding Queries,northwind,False,False,False
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Category)<-[:PART_OF]-(p:Product)
WHERE p.discontinued = true
WITH c, count(p) AS totalProducts
WHERE NOT exists {
    MATCH (c)<-[:PART_OF]-(p2:Product)
    WHERE p2.discontinued = false
}
RETURN c.categoryName
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Mayumi's""})-[:SUPPLIES]->(p:Product)
WHERE NOT exists {
    MATCH (s2:Supplier)-[:SUPPLIES]->(p)
    WHERE s2 <> s
}
RETURN p.productName, p.productID
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
RETURN o.orderID, p.productID, r.quantity
ORDER BY r.quantity DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,False
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(p) AS numProducts
ORDER BY numProducts DESC
LIMIT 5
RETURN s.companyName, numProducts",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE NOT exists {
    MATCH (p)
    WHERE p.discontinued = true
}
RETURN c
LIMIT 3",Pathfinding Queries,northwind,False,False,False
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p.productName AS productName, COUNT(DISTINCT o.unitPrice) AS priceVariations
ORDER BY priceVariations DESC
LIMIT 3
RETURN productName, priceVariations",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.unitsInStock > 50
RETURN s.companyName, count(p) AS ProductsCount
ORDER BY ProductsCount DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.orderDate < '1997-01-01' AND toFloat(o.freight) > 100
RETURN o",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->()
WITH p, count(o) AS ordersCount
WHERE ordersCount > 100
RETURN p.productName, ordersCount",Simple Aggregation Queries,northwind,False,False,False
"MATCH (:Order)-[o:ORDERS]->(:Product)
RETURN AVG(toFloat(o.discount)) AS averageDiscount",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.requiredDate = '1998-06-02'
RETURN o",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
RETURN p.productName AS ProductName, p.productID AS ProductID",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o.freight
ORDER BY o.freight DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer {contactTitle: 'Sales Representative'})
RETURN c",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
RETURN s.companyName, count(p) AS NumberOfProductsSupplied",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WHERE o.discount = '0'
RETURN p.productName AS ProductName, p.productID AS ProductID",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})
RETURN s.companyName AS SupplierName",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.quantityPerUnit = '10 boxes x 20 bags'
RETURN p.productName",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitsOnOrder IS NOT NULL AND p.unitsOnOrder > 0
WITH c, count(p) AS productsOnOrder
ORDER BY productsOnOrder ASC
LIMIT 1
RETURN c.categoryName AS CategoryWithLeastProductsOnOrder, productsOnOrder",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.shipCountry = 'France'
RETURN c.companyName, c.contactName, c.phone
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {contactTitle: 'Purchasing Manager'})
RETURN s",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS productCount
ORDER BY productCount DESC
LIMIT 3
RETURN c.categoryName, productCount",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.discontinued = true
RETURN DISTINCT c.categoryName",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
RETURN AVG(p.unitPrice) AS AverageUnitPrice",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder > 30
RETURN p",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel >= 25
RETURN p.productName, p.productID, p.reorderLevel",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o
ORDER BY o.orderDate DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer {city: ""Berlin""})
RETURN c.companyName
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
WHERE o.orderDate IS NOT NULL
WITH p, r.quantity AS quantity_ordered, o.orderDate AS order_date
ORDER BY order_date DESC, quantity_ordered DESC
RETURN p.productName, quantity_ordered
LIMIT 5",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Seafood'})
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice ASC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(:Order)
WITH p, count(*) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3
RETURN p.productName AS ProductName, ordersCount",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
RETURN MAX(p.unitsOnOrder) AS MaxUnitsOnOrder",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c.categoryName AS CategoryName, SUM(p.unitsInStock) AS TotalUnitsInStock
ORDER BY TotalUnitsInStock DESC
RETURN CategoryName, TotalUnitsInStock
LIMIT 5",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE s.phone STARTS WITH '(171)'
RETURN p.productName, p.productID",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'Germany'})
RETURN s.companyName
LIMIT 3",Simple Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.unitsOnOrder = 0 AND p.discontinued = true
RETURN p.productName, p.productID",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice ASC
LIMIT 3",Simple Aggregation Queries,northwind,True,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: 'Beverages'})
RETURN DISTINCT c.companyName AS CustomerName",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder > 0 AND p.discontinued = false
RETURN p.productName, p.unitsOnOrder",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice IS NOT NULL
RETURN c.categoryName, avg(p.unitPrice) AS averageUnitPrice
ORDER BY averageUnitPrice DESC
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.city STARTS WITH 'L'
RETURN s",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.homePage IS NULL
RETURN s",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice > 50
RETURN DISTINCT c.categoryName",Simple Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)<-[:ORDERS {quantity: q}]-(:Order)
WHERE q > 50
RETURN p.productName AS ProductName",Simple Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipVia = '1' AND o.shipCountry = 'France'
RETURN o.orderID, o.shippedDate, p.productName",Simple Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.unitsInStock < 15
RETURN p",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Seafood'})
RETURN min(p.reorderLevel) AS MinimumReorderLevel",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
RETURN COUNT(DISTINCT c) AS NumberOfDifferentCategories",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock ASC
LIMIT 1",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:ORDERS]->(o:Order)
WHERE o.shipCountry = 'Denmark'
RETURN DISTINCT s.companyName AS SupplierName",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipVia = '3'
RETURN DISTINCT c.companyName
LIMIT 3",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(DISTINCT p) AS numProducts
WHERE numProducts > 5
RETURN s",Simple Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer {companyName: ""Vins et alcools Chevalier""})-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
RETURN sum(r.quantity) AS TotalUnitsOrdered",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.discontinued = false
RETURN s",Simple Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.unitsOnOrder = 0
WITH s, count(p) AS ProductsCount
ORDER BY ProductsCount DESC
LIMIT 3
RETURN s.companyName, ProductsCount",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
WITH p, count{(p)<-[:ORDERS]-(:Order)} AS purchases
ORDER BY purchases DESC
LIMIT 3
RETURN p.productName, purchases",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product {productName: 'Chai'})
RETURN DISTINCT c.companyName AS CustomerName",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock > 0 AND p.reorderLevel > 20
RETURN p",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(p) AS products_supplied
ORDER BY products_supplied DESC
LIMIT 5
RETURN s.companyName, products_supplied",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.reorderLevel = 0
RETURN DISTINCT c.categoryName",Complex Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
RETURN p.productName, r.discount
ORDER BY r.discount DESC
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer {companyName: ""Alfreds Futterkiste""})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier)
RETURN s.companyName, count(p) AS NumberOfProductsSupplied
ORDER BY NumberOfProductsSupplied DESC
LIMIT 1",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(:Order)
WITH p, count(*) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3
RETURN p.productName, ordersCount",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE p.unitPrice > 50
RETURN DISTINCT c",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer {companyName: ""Alfreds Futterkiste""})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName AS ProductOrdered",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder > 50
RETURN p",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.reorderLevel > 25
RETURN s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = true
RETURN p
LIMIT 3",Complex Aggregation Queries,northwind,True,False,False
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
RETURN p",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WITH p, count(DISTINCT c) AS distinctCustomers
ORDER BY distinctCustomers DESC
LIMIT 3
RETURN p.productName, distinctCustomers",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Seafood'})
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,False
"MATCH (c:Customer {companyName: ""Alfreds Futterkiste""})-[:PURCHASED]->(o:Order)
WHERE o.freight > ""10""
RETURN o
ORDER BY o.orderDate
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(:Order)
WITH p, sum(toInteger(ORDERS.quantity)) AS totalQuantity
ORDER BY totalQuantity DESC
LIMIT 5
RETURN p.productName, totalQuantity",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitsInStock < 10
RETURN DISTINCT c",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE NOT exists {
    MATCH (s)-[:SUPPLIES]->(p2:Product)
    WHERE p2.unitPrice <= 20
}
RETURN s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS numCategories
WHERE numCategories > 3
RETURN s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
WHERE p.reorderLevel > 0
RETURN p
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WHERE toFloat(o.discount) > 0
RETURN p.productName, o.unitPrice, o.discount",Complex Aggregation Queries,northwind,True,False,False
"MATCH (p:Product)
WHERE p.unitsOnOrder IS NOT NULL
RETURN p
ORDER BY p.unitsOnOrder DESC
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer {city: ""Berlin""})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN DISTINCT p.productName AS ProductOrdered",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
RETURN DISTINCT s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Condiments'})
WITH p
MATCH (p)<-[:ORDERS]-(o:Order)
RETURN p.productName, sum(o.quantity) AS TotalQuantityOrdered
ORDER BY TotalQuantityOrdered DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,False
"MATCH (c:Customer {companyName: ""Lonesome Pine Restaurant""})-[:PURCHASED]->(o:Order)
WHERE o.freight < ""1""
RETURN o
ORDER BY o.orderDate
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product {productID: '1'})
RETURN DISTINCT c.companyName AS CustomerName",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)
RETURN c
ORDER BY length(c.companyName) ASC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
WHERE p.unitPrice > 10
RETURN p.productName, p.unitPrice",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Meat/Poultry'})
WHERE p.unitPrice < 20
RETURN s.companyName, p.productName, p.unitPrice",Complex Aggregation Queries,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
RETURN c.companyName, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Seafood'})
WHERE p.discontinued = true
RETURN p",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice > 100
RETURN DISTINCT c.categoryName",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE c.country = 'France'
RETURN p.productName, p.productID
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS numCategories
WHERE numCategories > 1
RETURN s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(o:Order)
WHERE o.orderDate >= '1996-07-01 00:00:00.000' AND o.orderDate <= '1996-07-31 23:59:59.999'
RETURN p.productName, p.productID",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, count(o) AS ordersCount
WHERE ordersCount > 100
RETURN p.productName, ordersCount",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
WITH p
ORDER BY p.unitsInStock ASC
LIMIT 3
RETURN p.productName, p.unitsInStock",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Produce'})
WITH p, count{(p)<-[:ORDERS]-(:Order)} AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN p.productName, ordersCount",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product)
RETURN p
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.discontinued = false
WITH s, count(p) AS activeProducts
ORDER BY activeProducts ASC
RETURN s.companyName, activeProducts
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, AVG(toFloat(o.discount)) AS avgDiscount
ORDER BY avgDiscount DESC
LIMIT 3
RETURN p.productName, avgDiscount",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, count(o) AS ordersCount
WHERE ordersCount > 50
RETURN p.productName, ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,False
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product {discontinued: true})
WITH s, count(p) AS discontinuedProducts
ORDER BY discontinuedProducts DESC
LIMIT 3
RETURN s.companyName, discontinuedProducts",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.reorderLevel
ORDER BY p.reorderLevel DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.shipVia = '3'
WITH c, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3
RETURN c.companyName, ordersCount",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer {city: 'London'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.discontinued = false
WITH c, count(p) AS ActiveProducts
ORDER BY ActiveProducts ASC
RETURN c.categoryName, ActiveProducts
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WHERE toFloat(o.discount) > 0.05
RETURN p.productName, p.productID, o.unitPrice, o.discount
ORDER BY o.orderID
LIMIT 3",Pathfinding Queries,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
RETURN c.companyName, SUM(toFloat(r.unitPrice) * r.quantity) AS totalSpent
ORDER BY totalSpent DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, AVG(p.unitPrice) AS avgUnitPrice
ORDER BY avgUnitPrice DESC
LIMIT 3
RETURN s.companyName, avgUnitPrice",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitPrice >= 10 AND p.unitPrice <= 50
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
WITH o, count(DISTINCT p) AS numProducts
ORDER BY numProducts DESC
LIMIT 3
RETURN o.orderID AS OrderID, numProducts",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = true
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.unitPrice > 100
RETURN s
LIMIT 3",Pathfinding Queries,northwind,False,False,False
"MATCH (p:Product)-[o:ORDERS]->(:Order)
RETURN p.productName, SUM(o.quantity) AS TotalQuantity
ORDER BY TotalQuantity DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS numCategories
WHERE numCategories > 3
RETURN s
ORDER BY numCategories DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice > 50
WITH c, count(p) AS ProductCount
ORDER BY ProductCount DESC
LIMIT 3
RETURN c.categoryName, ProductCount",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WITH c, SUM(toFloat(o.freight)) AS totalFreight
ORDER BY totalFreight DESC
LIMIT 5
RETURN c.companyName, totalFreight",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'Germany'})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.productID, p.unitPrice
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer {city: 'Berlin'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(ord:Order)
WHERE ord.orderDate STARTS WITH '1996'
WITH p, SUM(o.quantity) AS totalQuantity
ORDER BY totalQuantity DESC
LIMIT 5
RETURN p.productName, totalQuantity",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Condiments'})
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.freight < ""15""
RETURN o
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Meat/Poultry'})
RETURN p.productName, p.reorderLevel
ORDER BY p.reorderLevel DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)
WITH s, AVG(toFloat(o.freight)) AS avgFreight
ORDER BY avgFreight DESC
RETURN s.companyName, avgFreight
LIMIT 5",Pathfinding Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
WITH p
MATCH (o:Order)-[r:ORDERS]->(p)
RETURN p.productName, count(r) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
WITH o, count(p) AS products_count
ORDER BY products_count DESC
LIMIT 5
RETURN o AS Order, products_count AS NumberOfProducts",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice > 100
WITH c, count(p) AS productCount
ORDER BY productCount DESC
LIMIT 3
RETURN c.categoryName, productCount",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
WITH p, count{(p)<-[:ORDERS]-()} AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN p.productName, ordersCount",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitPrice < 5
RETURN p
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, AVG(p.unitsInStock) AS avgUnitsInStock
ORDER BY avgUnitsInStock DESC
LIMIT 3
RETURN s.companyName, avgUnitsInStock",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:ORDERS]->(o:Order)
WITH p, count(o) AS reorderCount
ORDER BY reorderCount ASC
LIMIT 5
RETURN p.productName, reorderCount",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: ""Seafood""})
WITH c, count(p) AS products_ordered
ORDER BY products_ordered DESC
LIMIT 3
RETURN c.companyName, products_ordered",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Produce'})
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
WITH p, count{(p)<-[:ORDERS]-(:Order)} AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN p.productName, ordersCount",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p1:Product)-[:PART_OF]->(c1:Category {categoryName: 'Beverages'}),
      (o)-[:ORDERS]->(p2:Product)-[:PART_OF]->(c2:Category {categoryName: 'Condiments'})
WITH o
ORDER BY o.orderDate
RETURN o
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS distinctCategories
ORDER BY distinctCategories DESC
LIMIT 3
RETURN s.companyName, distinctCategories",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer {country: 'USA'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitsOnOrder > 0
WITH c, count(p) AS ProductsOnOrder
ORDER BY ProductsOnOrder DESC
LIMIT 5
RETURN c.categoryName, ProductsOnOrder",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = FALSE AND p.reorderLevel IS NOT NULL
RETURN p
ORDER BY p.reorderLevel ASC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o
ORDER BY o.requiredDate DESC
LIMIT 5",Pathfinding Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)
WITH s, count(o) AS totalOrders
ORDER BY totalOrders DESC
LIMIT 3
RETURN s.companyName, totalOrders",Pathfinding Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
WITH p, count{(p)<-[:ORDERS]-()} AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN p.productName, ordersCount",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WITH c, count(DISTINCT p) AS distinctProducts
ORDER BY distinctProducts DESC
LIMIT 3
RETURN c.companyName, distinctProducts",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product {productName: 'Aniseed Syrup'})
RETURN c",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
RETURN c.categoryName, count(p) AS NumberOfProducts",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Simple Aggregation Queries,northwind,True,False,False
"MATCH (c:Customer {country: 'UK'})-[:PURCHASED]->(o:Order)
RETURN o
ORDER BY o.orderDate DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS categoryCount
ORDER BY categoryCount DESC
LIMIT 3
RETURN s.companyName, categoryCount",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Category)
WHERE NOT exists {
  MATCH (c)<-[:PART_OF]-(p:Product)
  WHERE p.discontinued = true
}
RETURN c
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.quantityPerUnit CONTAINS 'bags'
RETURN p
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o
ORDER BY o.freight
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WITH c, count(p) AS products_ordered
ORDER BY products_ordered ASC
LIMIT 3
RETURN c.companyName, products_ordered",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS {quantity: q}]-(:Order)
WHERE q > 50
RETURN p.productName, p.productID, p.unitPrice
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.region = 'NULL'
RETURN s
LIMIT 3",Simple Retrieval Queries,northwind,False,False,False
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipVia = '2'
RETURN o.orderID, o.shippedDate, o.shipName
ORDER BY o.shippedDate DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)
WHERE c.phone STARTS WITH '030'
RETURN c
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitPrice >= 10 AND p.unitPrice <= 20
RETURN p
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipCity = c.city
RETURN o.orderID, o.shipName, o.shipCity, c.companyName, c.city
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c.categoryName AS Category, AVG(p.unitPrice) AS AvgPrice
ORDER BY AvgPrice DESC
LIMIT 5
RETURN Category, AvgPrice",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(p) AS numProducts
ORDER BY numProducts ASC
LIMIT 3
RETURN s.companyName, numProducts",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:ORDERS]->(o:Order)
WHERE o.orderDate >= '1998-01-01' AND o.orderDate < '1999-01-01'
RETURN p.productName, p.productID
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
RETURN o.orderID, p.productID, r.quantity
ORDER BY r.quantity DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)
WITH p ORDER BY p.unitPrice DESC LIMIT 1
MATCH (c:Customer)-[:PURCHASED]->(:Order)-[:ORDERS]->(p)
RETURN c.companyName, COUNT(*) AS ordersCount
ORDER BY ordersCount DESC LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.reorderLevel
ORDER BY p.reorderLevel ASC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {city: 'Berlin'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName, p.productID
LIMIT 5",Simple Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.reorderLevel = 30
RETURN p.productName, p.productID
ORDER BY p.unitsOnOrder DESC
LIMIT 3",Simple Retrieval Queries,northwind,True,False,False
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE NOT exists {
  MATCH (p)
  WHERE p.unitsInStock = 0
}
RETURN s
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WITH c, AVG(toFloat(o.unitPrice)) AS avgUnitPrice
ORDER BY avgUnitPrice DESC
LIMIT 3
RETURN c.companyName, avgUnitPrice",Simple Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)-[o:ORDERS]->(ord:Order)
WHERE ord.orderDate >= '1997-10-01 00:00:00.000' AND ord.orderDate <= '1997-12-31 23:59:59.999'
WITH p, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN p.productName, ordersCount",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
WITH o, count(DISTINCT p) AS numProducts
ORDER BY numProducts DESC
LIMIT 5
RETURN o.orderID, numProducts",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)
WITH s, count(o) AS totalOrders
ORDER BY totalOrders DESC
LIMIT 3
RETURN s.companyName, totalOrders",Simple Retrieval Queries,northwind,True,False,False
"MATCH (c:Category {categoryName: 'Seafood'})<-[:PART_OF]-(p:Product)-[:ORDERS]->(o:Order)
RETURN o
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Category)<-[:PART_OF]-(p:Product)<-[:ORDERS]-(o:Order)
WHERE o.shippedDate IS NOT NULL AND o.orderDate IS NOT NULL
WITH c.categoryName AS Category, avg(duration.inDays(datetime(o.shippedDate), datetime(o.orderDate)).days) AS AvgShippingDays
RETURN Category, AvgShippingDays
ORDER BY AvgShippingDays ASC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WITH c, p, COUNT(o) AS times_ordered
WHERE times_ordered > 1
RETURN c.companyName, p.productName, times_ordered
ORDER BY times_ordered DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE NOT exists{ (p)<-[:ORDERS]-(:Order) }
RETURN p.productName
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.homePage IS NOT NULL
RETURN s
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH c, count(DISTINCT s) AS supplierCount
ORDER BY supplierCount DESC
LIMIT 3
RETURN c.categoryName, supplierCount",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.productID
ORDER BY length(p.productName) DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
WITH s, count(p) AS numProducts
ORDER BY numProducts DESC
LIMIT 3
RETURN s.companyName, numProducts",Simple Retrieval Queries,northwind,True,False,False
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:ORDERS]->(o:Order)
WITH s, count(DISTINCT o.shipCity) AS uniqueCities
RETURN s.companyName, uniqueCities
ORDER BY uniqueCities DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
WITH p
ORDER BY p.unitPrice ASC
LIMIT 3
RETURN p.productName, p.unitPrice",Simple Retrieval Queries,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: 'Dairy Products'})
WITH c, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN c.companyName, ordersCount",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.unitsOnOrder > 10
RETURN s.companyName, count(p) AS NumberOfProducts
ORDER BY NumberOfProducts DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, AVG(p.unitPrice) AS avgPrice
WHERE avgPrice > 30
RETURN c
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
RETURN o.orderID, r.discount
ORDER BY r.discount DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)<-[:SUPPLIES]-(:Supplier)
WITH p, count(DISTINCT (:Supplier)) AS supplierCount
WHERE supplierCount > 1
RETURN p.productName, supplierCount
ORDER BY supplierCount DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)
WHERE c.fax IS NOT NULL
RETURN c
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock = 50
RETURN p
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitsOnOrder IS NOT NULL
WITH c, count(p) AS productCount
ORDER BY productCount ASC
LIMIT 3
RETURN c.categoryName, productCount",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(c:Category)
WITH o, count(DISTINCT c) AS numCategories
WHERE numCategories >= 3
RETURN o
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.requiredDate STARTS WITH '1997'
RETURN o
ORDER BY o.requiredDate
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category)
WITH c, COUNT(DISTINCT cat) AS numCategories
ORDER BY numCategories DESC
LIMIT 3
RETURN c.companyName, numCategories",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Meat/Poultry'})
WHERE p.discontinued = true
RETURN p
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.unitPrice > 20
WITH s, count(p) AS products_count
ORDER BY products_count DESC
LIMIT 3
RETURN s.companyName, products_count",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.requiredDate STARTS WITH '1996'
RETURN o
ORDER BY o.requiredDate
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WITH c, count(o) AS ordersCount
WHERE ordersCount > 1
RETURN c
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})
RETURN s.companyName
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock ASC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice > 50
RETURN DISTINCT c.categoryName
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o
ORDER BY o.freight DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = false AND p.unitsOnOrder IS NOT NULL
RETURN p
ORDER BY p.unitsOnOrder ASC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel = 30
RETURN p
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
WITH s, count(p) AS numProducts
ORDER BY numProducts DESC
LIMIT 5
RETURN s.companyName, numProducts",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
RETURN DISTINCT c
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:ORDERS]->(o:Order)
RETURN p.productName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipCountry = 'France'
RETURN o.orderID, o.shippedDate, o.shipName
ORDER BY o.shippedDate
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {country: ""Germany""})
RETURN c.companyName, c.contactName
ORDER BY c.customerID
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
RETURN DISTINCT s.companyName
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product {discontinued: true})
RETURN p.productName, p.productID
ORDER BY p.productID
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel > 20
RETURN p
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
RETURN c.companyName, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(DISTINCT p.country) AS countries_covered
ORDER BY countries_covered DESC
LIMIT 3
RETURN s.companyName, countries_covered",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WITH c, count(DISTINCT p) AS uniqueProducts
ORDER BY uniqueProducts DESC
LIMIT 3
RETURN c.companyName, uniqueProducts",Simple Retrieval Queries,northwind,True,False,False
"MATCH (p:Product)
RETURN p.productName, p.quantityPerUnit
ORDER BY p.quantityPerUnit DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,False
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
WITH o, count(p) AS numProducts
ORDER BY numProducts DESC
LIMIT 3
RETURN o AS Order, numProducts AS NumberOfProducts",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE c.country = 'USA'
RETURN c.companyName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitsInStock > 50
RETURN c.categoryName, count(p) AS ProductCount
ORDER BY ProductCount DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WITH avg(p.unitPrice) AS avgPrice
MATCH (p2:Product)
WHERE p2.unitPrice < avgPrice
RETURN p2
ORDER BY p2.unitPrice
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.unitPrice < 10
RETURN s.companyName, s.contactName, s.phone
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.orderDate IS NOT NULL AND o.shippedDate IS NOT NULL
RETURN o.orderID, o.shippedDate, o.orderDate, duration.between(datetime(o.orderDate), datetime(o.shippedDate)) AS shippingDuration
ORDER BY shippingDuration DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, SUM(toFloat(o.discount)) AS totalDiscount
ORDER BY totalDiscount DESC
LIMIT 3
RETURN p.productName, totalDiscount",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer)
WITH s, count(DISTINCT c) AS distinctCustomers
WHERE distinctCustomers > 3
RETURN s
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.discontinued = true
RETURN c.categoryName, count(p) AS DiscontinuedProducts
ORDER BY DiscontinuedProducts DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
RETURN o.orderID, SUM(r.quantity) AS TotalUnitsOrdered
ORDER BY TotalUnitsOrdered DESC
LIMIT 5",Simple Retrieval Queries,northwind,True,False,False
"MATCH (p:Product {productName: 'Chai'})<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer)
RETURN c.companyName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {city: 'London'})
RETURN s
LIMIT 5",Simple Retrieval Queries,northwind,False,False,False
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS productCount
ORDER BY productCount ASC
LIMIT 3
RETURN c.categoryName, productCount",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(o:Order)
WHERE o.orderDate >= '1996-07-01 00:00:00.000' AND o.orderDate <= '1996-07-31 23:59:59.999'
WITH p, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5
RETURN p.productName, ordersCount",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {contactTitle: 'Sales Representative'})
RETURN c.companyName, c.contactName
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shipVia = '1'
RETURN o
ORDER BY o.shippedDate
LIMIT 5",Simple Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)<-[:ORDERS]-(o:Order)
WHERE o.orderDate IS NOT NULL AND o.shippedDate IS NOT NULL
WITH p, o, duration.between(datetime(o.orderDate), datetime(o.shippedDate)) AS leadTime
RETURN p.productName, leadTime
ORDER BY leadTime ASC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
WHERE r.discount = '0'
RETURN c.companyName, COUNT(o) AS OrdersCount
ORDER BY OrdersCount DESC
LIMIT 5",Simple Retrieval Queries,northwind,False,False,False
"MATCH (s:Supplier)
WHERE s.fax IS NULL
RETURN s
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.reorderLevel < 10
RETURN c
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName",Simple Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:ORDERS]->(o:Order)
WHERE o.freight > 250
RETURN p.productName, p.productID
LIMIT 5",Simple Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
RETURN p.productName AS ProductName",Complex Retrieval Queries,northwind,False,False,False
"MATCH (c:Category {categoryName: 'Seafood'})<-[:PART_OF]-(p:Product)-[:ORDERS]->(o:Order)-[:PURCHASED]->(cust:Customer)
WHERE o.shipCountry = 'France'
RETURN o.orderID, o.shippedDate, cust.companyName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.orderDate STARTS WITH '1997' AND toFloat(o.freight) > 25
RETURN o
ORDER BY o.orderDate
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.shipVia = '3'
RETURN c.companyName AS CustomerName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Condiments'})
WHERE EXISTS {
  (p)<-[:ORDERS]-(o:Order)
  WHERE o.orderDate >= '1998-01-01' AND o.orderDate < '1999-01-01'
}
RETURN p
LIMIT 5",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.unitsInStock >= 50
RETURN DISTINCT s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.country <> ""UK"" AND s.country IN [""Germany"", ""France"", ""Italy"", ""Spain"", ""Netherlands"", ""Belgium"", ""Sweden"", ""Norway"", ""Denmark"", ""Finland"", ""Poland"", ""Ireland"", ""Czech Republic"", ""Greece"", ""Portugal"", ""Hungary"", ""Austria"", ""Switzerland"", ""Bulgaria"", ""Slovakia"", ""Belarus"", ""Romania"", ""Croatia"", ""Lithuania"", ""Latvia"", ""Estonia"", ""Slovenia"", ""Luxembourg"", ""Malta"", ""Cyprus""]
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:ORDERS]->(o:Order)
WHERE o.requiredDate < '1997-01-01'
RETURN p.productName, p.productID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.quantityPerUnit CONTAINS 'bottles'
RETURN p
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product {productName: 'Spegesild'})
RETURN DISTINCT c.companyName AS CustomerName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = true
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 5",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(c:Category)
WITH o, count(DISTINCT c) AS numCategories
WHERE numCategories > 3
RETURN o.orderID AS OrderID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Mayumi's""})-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
RETURN DISTINCT c.categoryName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
WHERE p.unitsOnOrder > 20
RETURN p
LIMIT 3",Complex Retrieval Queries,northwind,False,False,False
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
RETURN s.companyName AS SupplierName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder > 70 AND p.reorderLevel > 15
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipVia = '2' AND o.shipCountry = 'USA'
RETURN o, p",Complex Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE c.description CONTAINS 'sauces'
RETURN p.productName AS ProductName, p.productID AS ProductID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipCountry = 'Germany'
RETURN o, p
LIMIT 3",Complex Retrieval Queries,northwind,False,False,False
"MATCH (s:Supplier {contactTitle: 'Purchasing Manager'})
RETURN s",Complex Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WHERE o.quantity >= 100
RETURN p.productName, o.quantity",Complex Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Produce'})
WHERE p.discontinued = TRUE
RETURN p.productName, p.productID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE NOT exists {
    MATCH (p)-[:PART_OF]->(c:Category)
    WHERE c.categoryName <> 'Beverages'
}
RETURN DISTINCT s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = true AND p.reorderLevel = 10
RETURN p.productID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock >= 10 AND p.unitsInStock <= 20
RETURN p.productName, p.unitsInStock",Simple Aggregation Queries,northwind,False,False,False
"MATCH (s:Supplier {companyName: ""Plutzer""})-[:SUPPLIES]->(p:Product)
RETURN p
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:ORDERS]->(o:Order)
WITH s.supplierID AS supplierID, COUNT(DISTINCT o.shipCity) AS cityCount
WHERE cityCount > 3
RETURN supplierID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Category {categoryName: 'Meat/Poultry'})<-[:PART_OF]-(p:Product)-[:ORDERS]->(o:Order {shipVia: '2'})
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock = 0 AND p.discontinued = false
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
MATCH (s:Supplier)-[:SUPPLIES]->(p)
RETURN s.companyName AS SupplierName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipVia = '1' AND o.shipCountry = 'USA'
RETURN o, p
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:SUPPLIES]->(s:Supplier)
WHERE p.reorderLevel > 0 AND s.country = 'Germany'
RETURN p.productName, p.productID, s.companyName, s.country",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Category {categoryName: 'Dairy Products'})<-[:PART_OF]-(p:Product)
MATCH (o:Order)-[r:ORDERS]->(p)
RETURN o.orderID AS OrderID, sum(r.quantity) AS TotalQuantity
ORDER BY TotalQuantity DESC
LIMIT 5",Complex Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice < 10
RETURN DISTINCT c.categoryName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
WHERE r.discount = '0'
RETURN DISTINCT c AS CustomersWithNoDiscountOrders",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitsOnOrder > 30
RETURN DISTINCT c
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE s.phone STARTS WITH '(171)'
RETURN p.productName, p.productID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.requiredDate >= '1998-01-01 00:00:00.000' AND o.requiredDate < '1999-01-01 00:00:00.000'
  AND toFloat(o.freight) < 5
RETURN o",Complex Retrieval Queries,northwind,False,False,False
"MATCH (s:Supplier)
WHERE s.fax IS NOT NULL
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product {productName: 'Chai'})-[:ORDERS]->(o:Order)
RETURN DISTINCT o.shipCity AS ShipCities",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel < 5 AND p.unitPrice < 15
RETURN p",Complex Retrieval Queries,northwind,False,False,False
"MATCH (c:Customer {city: 'Berlin'})-[:PURCHASED]->(o:Order)
WHERE o.shippedDate STARTS WITH '1997'
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.unitPrice > 100
RETURN DISTINCT c.categoryName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shipCity = 'Portland'
RETURN o
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
WHERE count{(p)<-[:ORDERS]-(:Order)} > 50
RETURN p.productName, p.quantityPerUnit, p.unitsOnOrder, p.supplierID, p.productID, p.discontinued, p.categoryID, p.reorderLevel, p.unitsInStock, p.unitPrice",Complex Retrieval Queries,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
WITH c, sum(r.quantity) AS totalQuantity
WHERE totalQuantity > 200
RETURN c
LIMIT 5",Complex Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.reorderLevel = 25 AND p.discontinued = false
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product {productName: 'Aniseed Syrup'})-[:ORDERS]->(o:Order)
RETURN DISTINCT o.shipCountry AS ShipCountries",Complex Retrieval Queries,northwind,False,False,False
"MATCH (p:Product)
WHERE p.unitsInStock = 0
RETURN p.productName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
WHERE r.discount = '0'
RETURN o AS Order, r AS OrderDetails, p AS Product",Complex Retrieval Queries,northwind,False,False,False
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS numCategories
WHERE numCategories > 1
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->(:Order)
WITH p, count(o) AS ordersCount
WHERE ordersCount > 100
RETURN p.productName, ordersCount",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product {productName: 'Chai'})-[:ORDERS]->(o:Order)
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order {orderID: '10248'})-[:ORDERS]->(p:Product)
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {companyName: 'Rattlesnake Canyon Grocery'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
MATCH (e:Employee)-[:PROCESSED]->(o)
RETURN DISTINCT e",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.requiredDate > '1997-01-01'
RETURN o
ORDER BY o.requiredDate
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)
WHERE s.homePage IS NULL
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, count(p) AS productsSupplied
ORDER BY productsSupplied DESC
LIMIT 3
RETURN s.companyName, productsSupplied",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitPrice > 50
RETURN p.productName, p.unitPrice",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order {shipVia: '1'})
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.shipCountry = 'France'
RETURN c.companyName AS CustomerName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder > 50
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = true
RETURN p.productName, p.productID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {city: ""Berlin""})
RETURN c
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel > 20
RETURN p.productName, p.productID, p.reorderLevel",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'UK'})
RETURN s.companyName, s.contactName
ORDER BY s.companyName
LIMIT 5",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS productCount
WHERE productCount > 5
RETURN c.categoryName, productCount",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.reorderLevel = 0
RETURN c.categoryName, count(p) AS ProductCount
ORDER BY ProductCount DESC
LIMIT 3",Simple Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {contactTitle: 'Sales Representative'})
RETURN c",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.discontinued = true AND p.unitsInStock > 0
RETURN p.productName AS ProductName, p.unitPrice AS Price",Complex Retrieval Queries,northwind,False,False,False
"MATCH (p:Product {productID: '3'})-[:SUPPLIES]-(s:Supplier)
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(o:Order)
RETURN p.productName, sum(toInteger(o.quantity)) AS TotalQuantity
ORDER BY TotalQuantity DESC
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WHERE c.categoryName IN ['Beverages', 'Seafood']
WITH s, collect(DISTINCT c.categoryName) AS categories
WHERE ALL(cat IN ['Beverages', 'Seafood'] WHERE cat IN categories)
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
WHERE EXISTS {
  (p)<-[:ORDERS]-(:Order)
}
RETURN p.productName AS ProductName, p.productID AS ProductID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsInStock >= 50 AND p.unitsInStock <= 100
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.orderDate STARTS WITH '1996'
RETURN o
ORDER BY o.orderDate
LIMIT 5",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE s.phone IS NULL
RETURN p.productName, p.productID",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer {region: 'NULL'})-[:PURCHASED]->(o:Order)
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.reorderLevel = 0
RETURN DISTINCT c.categoryName",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder = 0 AND p.reorderLevel = 10
RETURN p
LIMIT 3",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.discontinued = true
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.freight > '50'
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category)
WHERE c.country = 'Germany' AND cat.categoryName = 'Beverages'
RETURN c.companyName, c.contactName, c.city
LIMIT 3",Complex Retrieval Queries,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WITH c, count(DISTINCT p) AS numProducts
WHERE numProducts > 10
RETURN c",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product {productName: 'Spegesild'})-[:PART_OF]->(c:Category)
RETURN c.description",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)
WHERE p.quantityPerUnit CONTAINS 'boxes'
RETURN p",Complex Retrieval Queries,northwind,False,False,True
"MATCH (s:Supplier {city: 'London'})
RETURN s",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Meat/Poultry'})
WHERE p.unitsInStock > 30
RETURN p.productName, p.unitsInStock",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)-[:ORDERS]->(p:Product)
WHERE o.shipName = 'Vins et alcools Chevalier'
RETURN o.orderID, o.shippedDate, p.productName, p.unitPrice",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shipRegion IS NULL
RETURN o",Complex Retrieval Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(:Order)
RETURN p.productName, count(*) AS orderCount
ORDER BY orderCount DESC
LIMIT 5",Complex Retrieval Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o
ORDER BY o.freight DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(o:Order)
WHERE o.shipCountry = 'France'
RETURN p.productName, count(o) AS shipments
ORDER BY shipments DESC
LIMIT 3",Pathfinding Queries,northwind,False,False,True
"MATCH (c:Customer {country: 'USA'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN DISTINCT p.productName AS ProductName",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
RETURN c.companyName, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
WITH o, count(DISTINCT p) AS distinctProducts
ORDER BY distinctProducts DESC
LIMIT 5
RETURN o.orderID, distinctProducts",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS productCount
ORDER BY productCount ASC
LIMIT 3
RETURN c.categoryName, productCount",Verbose query,northwind,False,False,True
"MATCH (p:Product)
WHERE p.unitsOnOrder IS NOT NULL AND p.discontinued = false
RETURN p
ORDER BY p.unitsOnOrder ASC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.requiredDate STARTS WITH '1997'
RETURN c.companyName, c.contactName
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, count(p) AS supplyCount
ORDER BY supplyCount DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (o:Order)
WHERE o.orderDate STARTS WITH '1996'
RETURN o
ORDER BY o.orderDate
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
RETURN p.productName, p.quantityPerUnit
ORDER BY p.quantityPerUnit DESC
LIMIT 3",Verbose query,northwind,False,False,False
"MATCH (p:Product)<-[:SUPPLIES]-(s:Supplier)
WITH p, count(s) AS supplierCount
ORDER BY supplierCount DESC
LIMIT 5
RETURN p.productName, supplierCount",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE s.city = 'London'
RETURN s.companyName, count(p) AS NumberOfProductsSupplied
ORDER BY NumberOfProductsSupplied DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)
RETURN s.contactTitle AS ContactTitle, count(s) AS Count
ORDER BY Count DESC
LIMIT 5",Verbose query,northwind,True,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WITH c, AVG(toFloat(p.unitPrice)) AS avgUnitPrice
ORDER BY avgUnitPrice DESC
LIMIT 3
RETURN c.companyName, avgUnitPrice",Verbose query,northwind,False,False,True
"MATCH (c:Category)<-[:PART_OF]-(p:Product)
WHERE NOT exists {
  MATCH (p)
  WHERE p.discontinued = true
}
RETURN c.categoryName, count(p) as ProductCount
ORDER BY ProductCount DESC
LIMIT 5",Verbose query,northwind,False,False,False
"MATCH (p:Product)
WHERE p.reorderLevel IS NOT NULL
RETURN p
ORDER BY p.reorderLevel ASC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
WHERE p.unitPrice > 50
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (c:Customer {companyName: ""Alfreds Futterkiste""})-[:PURCHASED]->(o:Order)
RETURN o.shipCountry AS ShipCountry, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
WHERE p.discontinued = true
WITH c, count(p) AS discontinuedProductsCount
ORDER BY discontinuedProductsCount DESC
LIMIT 5
RETURN c.companyName, discontinuedProductsCount",Verbose query,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS {discount: maxDiscount}]-(o:Order)
WITH p, MAX(toFloat(o.discount)) AS maxDiscount
ORDER BY maxDiscount DESC
RETURN p.productName, maxDiscount
LIMIT 3",Verbose query,northwind,False,False,False
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: ""Beverages""})
WHERE p.unitPrice < 20
RETURN p.productName, p.unitPrice",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[o:ORDERS]->()
WITH p, sum(o.quantity) AS totalQuantity
ORDER BY totalQuantity DESC
LIMIT 5
RETURN p.productName, totalQuantity",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WHERE p.reorderLevel > 15
WITH c, count(p) AS productCount
ORDER BY productCount DESC
LIMIT 3
RETURN c.categoryName, productCount",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WITH s, AVG(p.unitPrice) AS avgUnitPrice
ORDER BY avgUnitPrice DESC
LIMIT 5
RETURN s.companyName, avgUnitPrice",Verbose query,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shipCity = 'Reims'
RETURN o
ORDER BY o.shippedDate
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (p:Product)
RETURN p
ORDER BY p.productID DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)-[o:ORDERS]->()
WITH p, sum(o.quantity) AS totalQuantity
ORDER BY totalQuantity DESC
LIMIT 3
RETURN p.productName, totalQuantity",Verbose query,northwind,False,False,False
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, count(p) AS supplyCount
ORDER BY supplyCount DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Produce'})
WHERE p.unitPrice IS NOT NULL
RETURN p
ORDER BY p.unitPrice ASC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category)
WITH s, count(DISTINCT c) AS numCategories
ORDER BY numCategories DESC
LIMIT 3
RETURN s.companyName, numCategories",Verbose query,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shippedDate IS NOT NULL
RETURN o
ORDER BY o.shippedDate DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product {productID: '1'})
RETURN c
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
WITH s, count(p) AS numProducts
ORDER BY numProducts DESC
LIMIT 3
RETURN s.companyName, numProducts",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[:ORDERS]->(o:Order)
RETURN p.productName, count(o) AS reorderCount
ORDER BY reorderCount DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (o:Order)
RETURN o.shipAddress AS ShipAddress, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 3",Verbose query,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Condiments'})
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
RETURN o.orderID, p.productID, r.quantity
ORDER BY r.quantity DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
RETURN c.companyName, SUM(toFloat(o.freight)) AS TotalFreight
ORDER BY TotalFreight DESC
LIMIT 5",Verbose query,northwind,False,False,False
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category)
WITH c, COUNT(DISTINCT cat) AS distinctCategories
ORDER BY distinctCategories DESC
LIMIT 5
RETURN c.companyName, distinctCategories",Verbose query,northwind,False,False,True
"MATCH (o:Order)
RETURN o.shipCity AS ShipCity, count(o) AS NumberOfOrders
ORDER BY NumberOfOrders DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (p:Product {discontinued: true})
RETURN p.productName, p.productID
ORDER BY p.productID
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE s.contactTitle = 'Purchasing Manager' AND p.unitPrice > 50
RETURN s.companyName, s.contactName, p.productName, p.unitPrice",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {description: 'Desserts, candies, and sweet breads'})
WHERE p.reorderLevel > 15
RETURN p",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)
WITH s, count(DISTINCT o.shipCity) AS citiesCount
ORDER BY citiesCount DESC
LIMIT 5
RETURN s.companyName, citiesCount",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
WHERE p.discontinued = true
RETURN p
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)
WITH s, count(DISTINCT o.shipRegion) AS regions
WHERE regions > 1
RETURN s.companyName, regions",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer {companyName: ""Vins et alcools Chevalier""})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Complex Aggregation Queries,northwind,False,False,False
"MATCH (s:Supplier {companyName: ""Exotic Liquids""})-[:SUPPLIES]->(p:Product)
RETURN p.productName, p.unitPrice
ORDER BY p.unitPrice DESC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS products_count
ORDER BY products_count DESC
LIMIT 5
RETURN c.categoryName, products_count",Complex Aggregation Queries,northwind,False,False,True
"MATCH (s:Supplier {country: 'Germany'})-[:SUPPLIES]->(p:Product)
RETURN p.productName AS ProductName, p.productID AS ProductID",Complex Aggregation Queries,northwind,False,False,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Seafood'})
WHERE p.unitsOnOrder > 20
RETURN p
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.requiredDate STARTS WITH '1998'
RETURN c",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Produce'})
RETURN p.productName, p.quantityPerUnit
ORDER BY p.quantityPerUnit DESC
LIMIT 5",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
WHERE p.discontinued = true
RETURN p
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)<-[:ORDERS]-(:Order)
WITH p, count(*) AS orderCount
ORDER BY orderCount DESC
LIMIT 3
RETURN p.productName, orderCount",Verbose query,northwind,False,False,True
"MATCH (c:Category)<-[:PART_OF]-(p:Product)<-[:SUPPLIES]-(s:Supplier)
WITH c, count(DISTINCT s) AS supplierCount
WHERE supplierCount > 3
RETURN c.categoryName, supplierCount",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product {productName: 'Chai'})-[:ORDERS]->(o:Order)
RETURN o
ORDER BY o.orderDate
LIMIT 3",Complex Aggregation Queries,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Beverages'})
RETURN p.productName, p.productID
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE p.unitsInStock > 80
RETURN s",Complex Aggregation Queries,northwind,False,False,True
"MATCH (o:Order)
RETURN o
ORDER BY o.freight DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Dairy Products'})
RETURN DISTINCT s.companyName
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
WHERE r.quantity > 100
RETURN o
ORDER BY o.orderDate
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: ""Seafood""})
WITH c, count(p) AS products_count
ORDER BY products_count DESC
LIMIT 3
RETURN c.companyName, products_count",Verbose query,northwind,False,False,True
"MATCH (c:Customer {companyName: ""Alfreds Futterkiste""})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)
RETURN p.productName, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category)
WITH c, count(p) AS productCount
ORDER BY productCount DESC
LIMIT 5
RETURN c.categoryName, productCount",Verbose query,northwind,False,False,True
"MATCH (o:Order)-[r:ORDERS]->(p:Product)
WHERE o.shipVia = '2' AND r.discount <> '0'
RETURN o, r, p
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)
WHERE NOT EXISTS {
  MATCH (p)-[:ORDERS]->(o:Order)
  WHERE p.unitsInStock = 0
}
RETURN s
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Grains/Cereals'})
RETURN p.productName AS ProductName, p.unitPrice AS UnitPrice
ORDER BY p.unitPrice ASC
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category {categoryName: 'Meat/Poultry'})
WITH s, count(p) AS products_count
ORDER BY products_count DESC
LIMIT 3
RETURN s.companyName, products_count",Verbose query,northwind,False,False,True
"MATCH (s:Supplier)-[:SUPPLIES]->(p:Product {discontinued: true})
WITH s, count(p) AS discontinuedProducts
ORDER BY discontinuedProducts DESC
LIMIT 3
RETURN s.companyName, discontinuedProducts",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WITH c, count(o) AS ordersCount
ORDER BY ordersCount DESC
LIMIT 3
RETURN c.companyName, ordersCount",Verbose query,northwind,False,False,True
"MATCH (p:Product)
WHERE p.reorderLevel > 20
RETURN p.productName, p.reorderLevel
ORDER BY p.reorderLevel DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (o:Order)
WHERE o.shippedDate IS NOT NULL
RETURN o
ORDER BY o.shippedDate DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product)
RETURN c.companyName, SUM(r.quantity) AS TotalUnitsOrdered
ORDER BY TotalUnitsOrdered DESC
LIMIT 3",Verbose query,northwind,False,True,False
"MATCH (p:Product)-[:PART_OF]->(c:Category {categoryName: 'Confections'})
RETURN p.productName, p.unitsInStock
ORDER BY p.unitsInStock DESC
LIMIT 3",Verbose query,northwind,False,True,False
"MATCH (p:Product)
WHERE p.discontinued = false AND p.unitsOnOrder IS NOT NULL
RETURN p.productName, p.unitsOnOrder
ORDER BY p.unitsOnOrder DESC
LIMIT 5",Verbose query,northwind,False,False,True
"MATCH (c:Customer)-[:PURCHASED]->(o:Order)
WHERE o.shipCountry = 'France'
RETURN c
LIMIT 3",Verbose query,northwind,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
RETURN a.address, count(e) AS entity_count
ORDER BY entity_count DESC",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE e.status = 'Defaulted'
RETURN a.address",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.note = 'Closed date stands for Liquidation date.'
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)
WHERE o.valid_until = 'The Panama Papers data is current through 2015'
RETURN o",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL
RETURN e.name AS CurrentName, e.former_name AS FormerName",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)
WHERE o.lastEditTimestamp IS NOT NULL
RETURN o
ORDER BY o.lastEditTimestamp DESC
LIMIT 5",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
RETURN e.jurisdiction_description AS Jurisdiction
ORDER BY e.node_id
LIMIT 5",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {type: 'FOREIGN FORMED CORPORATION'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.tax_stat_description IS NOT NULL
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:connected_to]->(e:Entity)
RETURN o, e",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary)-[:officer_of]->(e:Entity)
RETURN i, e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.company_number IS NOT NULL
RETURN e.name, e.company_number",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[r:officer_of {link: 'shareholder of'}]->(e:Entity)
RETURN o, r, e",Simple Retrieval Queries,offshoreleaks,True,False,False
"MATCH (e1:Entity)-[:same_id_as]->(e2:Entity)
RETURN e1, e2",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.inactivation_date IS NOT NULL
RETURN e
ORDER BY e.inactivation_date DESC
LIMIT 5",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:registered_address]->(a:Address)
RETURN i.name AS IntermediaryName, a.address AS RegisteredOffice
ORDER BY i.node_id
LIMIT 5",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (o1:Officer)-[:same_name_as]->(o2:Officer)
RETURN o1, o2",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:same_name_as]->(e:Entity)
RETURN i, e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {struck_off_date: '15-FEB-2013'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[r:officer_of]->(e:Entity)
WHERE r.start_date IS NOT NULL AND r.end_date IS NOT NULL
RETURN o.name AS OfficerName, e.name AS EntityName, r.start_date AS StartDate, r.end_date AS EndDate, duration.between(date(r.start_date), date(r.end_date)) AS Duration
ORDER BY Duration DESC",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
RETURN e
ORDER BY e.internal_id
LIMIT 5",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.country_codes IS NOT NULL
RETURN e.country_codes AS CountryCode, count(e) AS Frequency
ORDER BY Frequency DESC",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)-[r:connected_to]->(:Other {sourceID: 'Paradise Papers - Aruba corporate registry'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary {status: 'ACTIVE'})
RETURN i",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (a:Address)<-[:registered_address]-(e:Entity)
WITH a, count(e) AS numEntities
WHERE numEntities > 1
RETURN a.address, numEntities",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:same_company_as]->(related:Entity)
RETURN e, related",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {company_type: 'LIMITED LIABILITY COMPANY'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.incorporation_date CONTAINS ""MAR-2006""
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {type: 'SOLE OWNERSHIP'})
MATCH (e2:Entity)
WHERE e2.type = e.type AND e2.node_id <> e.node_id
RETURN e2",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {name: 'TIANSHENG INDUSTRY AND TRADING CO., LTD.'})-[:registered_address]->(a:Address)
RETURN a",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WITH o, count(e) AS num_entities
ORDER BY num_entities DESC
LIMIT 3
RETURN o.name, num_entities",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WITH o, count(e) AS connections
ORDER BY connections DESC
LIMIT 3
RETURN o.name, connections",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
RETURN e
ORDER BY e.node_id DESC
LIMIT 5",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {incorporation_date: '23-MAR-2006'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)-[:similar]->(similarOfficer:Officer)
WHERE o.name = 'KIM SOO IN'
RETURN similarOfficer",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:registered_address]->(a:Address)
RETURN a.address, count(i) AS usage_count
ORDER BY usage_count DESC
LIMIT 5",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.company_type IS NOT NULL
RETURN e.name, e.company_type",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
RETURN e
ORDER BY e.lastEditTimestamp DESC
LIMIT 10",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {jurisdiction: 'SAM'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o1:Officer {name: 'KIM SOO IN'})
MATCH (o2:Officer)
WHERE EXISTS {
  (o1)-[:same_name_as]->(o2)
}
RETURN o2",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.company_number IS NOT NULL
RETURN e",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WITH o, count(e) AS numEntities
ORDER BY numEntities DESC
LIMIT 5
RETURN o.name, numEntities",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:similar]->(target:Entity {name: 'Top Games Holdings Inc.'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary {sourceID: 'Panama Papers'})
RETURN i",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {company_type: 'FOREIGN FORMED CORPORATION'})
RETURN e.name AS EntityName, e.jurisdiction AS Jurisdiction",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {jurisdiction: 'SAM'})
RETURN e.jurisdiction_description",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.incorporation_date STARTS WITH 'JAN-2006'
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.struck_off_date IS NOT NULL
RETURN e.name, e.struck_off_date",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.original_name IS NOT NULL
RETURN e.original_name, e
ORDER BY e.original_name
LIMIT 3",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)
WHERE o.former_name IS NOT NULL
RETURN o.name AS OfficerName, o.former_name AS FormerName",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (a:Address)-[:registered_address]-(e:Entity)
WITH a, count(e) AS connections
ORDER BY connections DESC
LIMIT 5
RETURN a.address, connections",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)
WHERE i.lastEditTimestamp <= '2015'
RETURN i",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {name: 'HOTFOCUS CO., LTD.'})-[:same_name_as]->(sameNameEntity)
RETURN sameNameEntity",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.dorm_date IS NOT NULL
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.jurisdiction IS NOT NULL
RETURN e.jurisdiction AS Jurisdiction, count(e) AS NumberOfEntities
ORDER BY NumberOfEntities DESC",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity)-[:similar]->(e2:Entity)
RETURN e1, e2",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[:intermediary_of]->(e:Entity)
RETURN o, e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i1:Intermediary)-[:registered_address]->(a:Address)<-[:registered_address]-(i2:Intermediary)
WHERE i1.node_id <> i2.node_id
RETURN i1.name AS Intermediary1, i2.name AS Intermediary2, a.address AS SharedAddress",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.struck_off_date IS NOT NULL
RETURN e
ORDER BY e.struck_off_date DESC",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.struck_off_date IS NOT NULL
RETURN e.country_codes",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.closed_date = '28-NOV-2012'
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.closed_date IS NOT NULL
RETURN e.name, e.closed_date",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {name: 'NINGBO SUNRISE ENTERPRISES UNITED CO., LTD.'})-[:similar]->(similarEntity:Entity)
RETURN similarEntity",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (a:Address)
RETURN a.address, a.lastEditTimestamp
ORDER BY a.lastEditTimestamp DESC
LIMIT 5",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o1:Officer)-[:same_id_as]->(o2:Officer)
WHERE o1.icij_id IS NOT NULL AND o2.icij_id IS NOT NULL AND o1.icij_id = o2.icij_id
AND exists {
  (o1)-[:officer_of]->(:Entity)
}
RETURN o1.name AS OfficerName",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity {name: 'HOTFOCUS CO., LTD.'})-[:same_as]->(e2:Entity)
RETURN e2",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.note IS NOT NULL
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity {jurisdiction: 'SAM'})
RETURN o.name AS OfficerName, e.name AS EntityName
LIMIT 3",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.incorporation_date CONTAINS ""MAR-2006"" AND e.former_name IS NOT NULL
RETURN e.former_name",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {name: 'Top Games Holdings Inc.'})-[:connected_to]->(connectedEntities:Entity)
RETURN connectedEntities",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (a:Address)
WHERE a.sourceID = 'Bahamas Leaks'
RETURN a",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (o:Officer {icij_id: 'E72326DEA50F1A9C2876E112AAEB42BC'})
RETURN o.name",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {countries: ""South Korea""})
RETURN o",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)
WHERE i.status = 'ACTIVE'
RETURN i.name",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity)
WHERE e.countries = 'South Africa'
RETURN i",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.lastEditTimestamp IS NOT NULL
RETURN e
ORDER BY e.lastEditTimestamp DESC
LIMIT 5",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {node_id: 10000002})
RETURN e.original_name",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (i1:Intermediary {name: 'MICHAEL PAPAGEORGE, MR.'})-[:registered_address]->(a:Address)
MATCH (i2:Intermediary)-[:registered_address]->(a)
RETURN DISTINCT i2.name AS IntermediaryName",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity {name: 'NINGBO SUNRISE ENTERPRISES UNITED CO., LTD.'})
RETURN o.name AS OfficerName",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {country_codes: 'HKG'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {inactivation_date: '18-FEB-2013'})
RETURN e.name",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {status: 'Defaulted'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {incorporation_date: '23-MAR-2006'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {service_provider: 'Mossack Fonseca'})
RETURN e.name",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {struck_off_date: '15-FEB-2013'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {jurisdiction: 'SAM'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.countries = ""Hong Kong"" AND e.sourceID = ""Panama Papers""
RETURN e",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (a:Address)<-[:registered_address]-(e:Entity)
WITH a, count(e) AS numEntities
WHERE numEntities > 1
RETURN a",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)-[:same_name_as]->(o:Officer)
RETURN e, o",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity {name: 'HOTFOCUS CO., LTD.'})
RETURN i.name AS IntermediaryName, i.status AS IntermediaryStatus",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {countries: ""South Korea""})
RETURN o.name",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL
RETURN e.name AS CurrentName, e.former_name AS FormerName",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE e.jurisdiction_description = 'Samoa'
RETURN a",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o1:Officer)-[:same_name_as]->(o2:Officer)
RETURN o1, o2",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity)-[:registered_address]->(a:Address)
WHERE e1.company_type IS NOT NULL AND a.countries = ""Hong Kong""
MATCH (e2:Entity)-[:registered_address]->(a2:Address)
WHERE e2.company_type = e1.company_type AND a2.countries = ""Hong Kong""
RETURN e1, e2",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (a:Address)
WHERE a.sourceID = 'Panama Papers' AND a.original_address IS NOT NULL
RETURN a.original_address",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {inactivation_date: '18-FEB-2013'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {name: 'TIANSHENG INDUSTRY AND TRADING CO., LTD.'})-[:same_name_as]->(sameNameEntity)
RETURN sameNameEntity",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:similar]->(o:Officer)
RETURN i, o",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE e.countries = ""Hong Kong""
RETURN a",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.jurisdiction_description = 'Samoa'
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)
WHERE o.valid_until = ""The Panama Papers data is current through 2015""
RETURN o",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
RETURN e
ORDER BY e.lastEditTimestamp DESC
LIMIT 3",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e1:Entity)-[:registered_address]->(a:Address)<-[:registered_address]-(e2:Entity)
WHERE e1.node_id <> e2.node_id
RETURN e1, a, e2",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:intermediary_of]->(e:Entity)
WITH o, count(e) AS numEntities
WHERE numEntities > 1
RETURN o.name, numEntities",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {service_provider: 'Mossack Fonseca'})
RETURN e
ORDER BY e.node_id
LIMIT 5",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.struck_off_date STARTS WITH '15-FEB-2013'
RETURN e.name",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE a.countries = 'Samoa'
RETURN e",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity)
RETURN i, e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {service_provider: ""Mossack Fonseca""})
WHERE e.company_number IS NOT NULL
RETURN e.name",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {countries: ""South Korea""})
RETURN o.name
LIMIT 5",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.incorporation_date IS NOT NULL
RETURN e
ORDER BY e.incorporation_date
LIMIT 3",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.jurisdiction_description = 'Samoa' AND e.incorporation_date CONTAINS 'MAR'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {incorporation_date: ""2006""})
RETURN e.name, e.service_provider",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {status: 'Defaulted'})
RETURN e.name AS EntityName",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {inactivation_date: '18-FEB-2013'})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:registered_address]->(a:Address {countries: ""Bahamas""})
RETURN o.name",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e1:Entity)-[:registered_address]->(a:Address)<-[:registered_address]-(e2:Entity)
WHERE e1.node_id <> e2.node_id
RETURN e1.name AS Entity1, e2.name AS Entity2",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE e.incorporation_date < '01-JAN-2000'
RETURN o",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary {countries: ""South Africa"", status: ""ACTIVE""})
RETURN i.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.jurisdiction_description = 'Samoa' AND e.struck_off_date >= '01-JAN-2011'
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WITH o, count(e) AS numEntities
WHERE numEntities > 1
RETURN o.name, numEntities",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e1:Entity {name: 'HOTFOCUS CO., LTD.'})
MATCH (e2:Entity)
WHERE e1.struck_off_date IS NOT NULL AND e1.struck_off_date = e2.struck_off_date AND e1.node_id <> e2.node_id
RETURN e2.name",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity {name: 'NINGBO SUNRISE ENTERPRISES UNITED CO., LTD.'})
WHERE e.sourceID = 'Offshore Leaks'
RETURN o.name AS OfficerName",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {status: 'Defaulted'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:registered_address]->(a:Address)<-[:registered_address]-(e:Entity)
RETURN i, a, e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:similar]->(o:Officer)
RETURN i.name AS IntermediaryName",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.dorm_date IS NOT NULL
RETURN e
ORDER BY e.dorm_date DESC
LIMIT 1;",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary {status: ""ACTIVE""})-[:intermediary_of]->(e:Entity)
RETURN i, e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity {original_name: 'TIANSHENG INDUSTRY AND TRADING CO., LTD.'})
RETURN o",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.incorporation_date CONTAINS '2006' AND e.status IS NOT NULL
RETURN e.name, e.status",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {struck_off_date: '15-FEB-2013'})-[:registered_address]->(a:Address)
RETURN e.name AS EntityName, e.service_provider AS ServiceProvider, a.address AS Address",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.countries = 'Hong Kong' AND e.jurisdiction_description = 'Hong Kong'
RETURN count(e) AS NumberOfEntities",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (a:Address {address: 'ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.'})<-[:registered_address]-(e:Entity)
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[r:officer_of]->(o:Officer)
WHERE r.start_date <= '1999'
RETURN e, r, o",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.inactivation_date = '18-FEB-2013' AND e.status IS NOT NULL
RETURN e.name, e.status",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.status = 'Active' AND e.lastEditTimestamp IS NOT NULL
RETURN e.countries AS Country, e.jurisdiction_description AS Jurisdiction",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.incorporation_date CONTAINS '2013' AND e.struck_off_date CONTAINS '2013'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL
RETURN e.former_name AS FormerName, e.name AS CurrentName",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o1:Officer)-[:similar]->(o2:Officer)
RETURN o1.name AS Officer1, o2.name AS Officer2, o1.address AS Address1, o2.address AS Address2",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE e.incorporation_date CONTAINS '2007' AND e.status = 'Active'
RETURN o",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE e.status = 'Defaulted' AND e.inactivation_date CONTAINS '2013'
RETURN e.name, a.address",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)-[:officer_of]->(o:Officer)
WHERE e.status = 'Active'
WITH e, count(o) AS officerCount
WHERE officerCount > 1
RETURN e, officerCount",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.incorporation_date STARTS WITH ""JAN-2006""
RETURN e.name, e.status",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE a.countries = 'Hong Kong' AND e.jurisdiction_description <> 'Hong Kong'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {incorporation_date: '23-MAR-2006'})
RETURN e.name, e.status",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.service_provider = 'Mossack Fonseca' AND e.status = 'Active'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.incorporation_date IS NOT NULL AND e.struck_off_date IS NOT NULL
  AND substring(e.incorporation_date, 7) = substring(e.struck_off_date, 7)
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity {status: 'Defaulted'})
RETURN i.name",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[:registered_address]->(a:Address)
WHERE a.countries = 'Samoa'
RETURN o",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.incorporation_date CONTAINS ""MAR-2006"" AND e.status = ""Defaulted""
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL AND e.status = ""Active""
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE e.jurisdiction_description = 'Samoa'
RETURN o",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {service_provider: 'Mossack Fonseca', status: 'Defaulted'})
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.jurisdiction_description = 'Samoa' AND e.struck_off_date = '15-FEB-2013'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {name: 'NINGBO SUNRISE ENTERPRISES UNITED CO., LTD.'})-[:same_as]->(sameEntity:Entity)
RETURN sameEntity",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE o.valid_until = ""The Panama Papers data is current through 2015""
  AND e.jurisdiction_description = ""Samoa""
RETURN o",Simple Aggregation Queries,offshoreleaks,True,False,False
"MATCH (e:Entity)
WHERE e.jurisdiction_description = 'Samoa' AND e.status = 'Active'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.service_provider = 'Mossack Fonseca' AND e.incorporation_date CONTAINS '2006'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.jurisdiction_description = 'Samoa' AND e.status = 'Defaulted'
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {name: 'MICHAEL PAPAGEORGE, MR.'})-[:registered_address]->(a:Address)
RETURN a.address AS RegisteredOfficeAddress",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.dorm_date IS NOT NULL
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity {name: 'HOTFOCUS CO., LTD.'}), (e2:Entity)
WHERE e1.company_number IS NOT NULL AND e1.company_number = e2.company_number AND e1 <> e2
RETURN e2",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {jurisdiction: 'SAM'})
RETURN e.jurisdiction_description AS JurisdictionDescription, count(e) AS Count
GROUP BY e.jurisdiction_description",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (a:Address)<-[:registered_address]-(n)
WITH a, count(n) AS sharedCount
WHERE sharedCount > 1
RETURN a
LIMIT 3",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[r:officer_of]->(e:Entity)
WHERE o.status IS NOT NULL
RETURN o, r, e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:registered_address]->(a:Address)
RETURN i.name AS IntermediaryName",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.tax_stat_description IS NOT NULL
RETURN e",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (o:Other)
WHERE o.type IS NOT NULL
RETURN DISTINCT o.type",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:similar]->(similarEntity:Entity)
WHERE e.name = 'HOTFOCUS CO., LTD.'
RETURN similarEntity",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.incorporation_date CONTAINS '2006'
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (a:Address {address: ""ORION HOUSE SERVICES (HK) LIMITED""})
MATCH (e:Entity)-[:registered_address]->(a)
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.closed_date IS NOT NULL
RETURN e.name, e.closed_date",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (o:Officer {name: 'KIM SOO IN'})-[:officer_of]->(e:Entity)
RETURN e",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (o1:Officer)-[:same_name_as]->(o2:Officer)
WHERE o1.node_id <> o2.node_id
RETURN o1.name AS Officer1, o2.name AS Officer2",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (a:Address)<-[:registered_address]-(e:Entity)
WHERE e.jurisdiction_description = 'Samoa'
WITH a, count(e) AS entityCount
WHERE entityCount > 1
RETURN a.address, entityCount",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.company_number IS NOT NULL AND e.status = 'Defaulted'
RETURN e",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[:registered_address]->(a:Address)
WHERE a.countries = ""South Korea""
RETURN o
LIMIT 5",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.inactivation_date = '18-FEB-2013'
RETURN e",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL
RETURN e.name AS CurrentName, e.former_name AS FormerName",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (a:Address)
WITH a, count{(a)<-[:registered_address]-()} AS numEntities
WHERE numEntities > 1
RETURN a",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE e.jurisdiction_description = 'Samoa'
RETURN o.name AS OfficerName, e.name AS EntityName",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary)-[:officer_of]->(e:Entity)
RETURN i.name, count(e) AS entities_linked
ORDER BY entities_linked DESC
LIMIT 3",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {name: 'TIANSHENG INDUSTRY AND TRADING CO., LTD.'})-[:officer_of]->(o:Officer)
RETURN o",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.valid_until = ""The Panama Papers data is current through 2015"" AND e.service_provider = ""Mossack Fonseca""
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity)-[:registered_address]->(a:Address)<-[:registered_address]-(e2:Entity)
WHERE e1.node_id <> e2.node_id
RETURN a.address, collect(e1.name) AS entity_names",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)-[:registered_address]->(a:Address {countries: ""Bahamas""})
RETURN o.name, a.address
LIMIT 3",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {countries: ""South Africa""})
RETURN i.name",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.struck_off_date STARTS WITH '2013'
RETURN e
LIMIT 5",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {node_id: 10000002})-[:registered_address]->(a:Address)
RETURN a.address AS Address",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[r:officer_of {link: 'shareholder of'}]->(e:Entity)
RETURN o.name AS OfficerName, e.name AS EntityName, r.start_date AS StartDate, r.end_date AS EndDate
ORDER BY r.start_date
LIMIT 10",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {sourceID: 'Panama Papers'})
RETURN o
LIMIT 5",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {status: 'Defaulted'})
RETURN e.company_number AS CompanyNumber",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {name: 'MICHAEL PAPAGEORGE, MR.'})-[:intermediary_of]->(e:Entity)
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {countries: ""South Korea""})
RETURN o",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary {status: 'ACTIVE'})
RETURN i",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {countries: 'South Africa'})
RETURN i.name",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE a.countries = 'Hong Kong'
RETURN e
LIMIT 5",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {service_provider: 'Mossack Fonseca'})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {struck_off_date: '15-FEB-2013'})
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {incorporation_date: '23-MAR-2006'})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {status: 'Defaulted'})
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity)
WITH i, count(e) AS numEntities
WHERE numEntities > 1
RETURN i.name AS IntermediaryName",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {node_id: 12174285})-[:officer_of]->(o:Officer)
RETURN o",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.closed_date IS NOT NULL
RETURN e.name, e.closed_date",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:registered_address]->(a:Address)
WITH o, count(a) AS num_addresses
RETURN o.name AS OfficerName, num_addresses
ORDER BY num_addresses DESC",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity)-[:same_as]->(e2:Entity)
RETURN e1, e2",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.tax_stat_description IS NOT NULL
RETURN e",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.service_provider = 'Mossack Fonseca'
RETURN e.name, e.service_provider",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.jurisdiction = 'SAM'
RETURN e.name, e.jurisdiction_description",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (a:Address)
RETURN a.address, a.lastEditTimestamp
ORDER BY a.lastEditTimestamp DESC
LIMIT 3",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {internal_id: '1001256'})
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:registered_address]->(a:Address)
WHERE a.countries = 'Bahamas'
RETURN o.name, a.address",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary {name: 'MICHAEL PAPAGEORGE, MR.'})
RETURN i",Simple Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.sourceID = 'Bahamas Leaks'
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {jurisdiction_description: ""Samoa""})
RETURN e.country_codes",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[r:similar]->(other:Officer)
WITH o, count(r) AS numSimilar
ORDER BY numSimilar DESC
LIMIT 5
RETURN o.name, numSimilar",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.closed_date = '28-NOV-2012'
RETURN e.name",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {country_codes: 'KOR'})
RETURN o",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:connected_to]->(o:Other)
WHERE o.sourceID = 'Paradise Papers - Appleby'
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL
RETURN e.name AS CurrentName, e.former_name AS FormerName",Simple Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.incorporation_date CONTAINS '2006'
RETURN e",Simple Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE a.countries = 'Samoa'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {incorporation_date: '27-MAR-2006'})
RETURN e
ORDER BY e.node_id
LIMIT 3",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (o:Officer {name: 'KIM SOO IN'})
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {name: ""HOTFOCUS CO., LTD.""})
RETURN e.countries AS Countries",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.closed_date = '28-NOV-2012'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary {internal_id: '10001'})-[:registered_address]->(a:Address)
RETURN a.address AS Address",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity)-[:same_name_as]->(e2:Entity)
RETURN e1.name AS CurrentName, e2.name AS FormerName",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity {name: 'Top Games Holdings Inc.'})
RETURN i",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {name: 'ANTAM ENTERPRISES N.V.'})-[:connected_to]->(connectedEntities:Entity)
RETURN connectedEntities",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {incorporation_date: '10-JAN-2006'})
RETURN e.node_id",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.note = 'Closed date stands for Liquidation date.'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e1:Entity)-[:same_id_as]->(e2:Entity)
RETURN e1, e2",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {country_codes: 'HKG'})
RETURN DISTINCT e.jurisdiction_description AS JurisdictionDescription",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.lastEditTimestamp IS NOT NULL
RETURN e
ORDER BY e.lastEditTimestamp DESC
LIMIT 5",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {inactivation_date: '27-FEB-2014'})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Other)
RETURN DISTINCT o.type",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {name: 'MICHAEL PAPAGEORGE, MR.'})
RETURN i.countries AS Countries",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {name: ""ANTAM ENTERPRISES N.V.""})-[:same_name_as]->(related:Entity)
RETURN related",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (a:Address {address: ""ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.""})-[:similar]->(similarAddress:Address)
RETURN similarAddress",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity {jurisdiction: 'SAM'})
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {original_name: 'NINGBO SUNRISE ENTERPRISES UNITED CO., LTD.'})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {status: 'Defaulted'})
WHERE e.former_name IS NOT NULL
RETURN e.former_name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {struck_off_date: '15-FEB-2014'})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {name: 'Top Games Holdings Inc.'})-[:same_company_as]->(sameCompany:Entity)
RETURN sameCompany",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address {node_id: 14048584})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {ibcRUC: '25221'})
RETURN e.original_name",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity {node_id: 12160432})
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (a:Address {address: 'ANNEX FREDERICK & SHIRLEY STS, P.O. BOX N-4805, NA'})
RETURN a.country_codes",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE exists {
  (e)-[:same_as]->(:Entity)
} AND exists {
  (e)-[:registered_address]->(:Address)
}
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {inactivation_date: '18-FEB-2013'})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (o1:Officer)-[:same_id_as]->(o2:Officer)
RETURN o1, o2",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE e.sourceID = 'Panama Papers'
RETURN a",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity {name: 'NINGBO SUNRISE ENTERPRISES UNITED CO., LTD.'})
MATCH (e2:Entity)
WHERE e1.company_type IS NOT NULL AND e2.company_type = e1.company_type AND e1 <> e2
RETURN e2",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)-[r:officer_of]->(e:Entity)
WHERE e.incorporation_date = '10-JAN-2006' AND r.link = 'shareholder of'
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.original_name IS NOT NULL AND e.name IS NOT NULL AND e.original_name <> e.name
RETURN e.name AS CurrentName, e.original_name AS OriginalName",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {struck_off_date: '15-FEB-2013'})
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.incorporation_date >= '01-JAN-2005' AND e.incorporation_date <= '31-DEC-2010'
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {jurisdiction_description: ""Samoa""})
RETURN e.name",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {struck_off_date: '15-FEB-2013'})
RETURN count(e) AS StruckOffEntitiesCount",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {service_provider: 'Mossack Fonseca'})
RETURN e",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {country_codes: 'HKG'})
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.inactivation_date STARTS WITH 'FEB-2014'
RETURN e",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary {countries: ""South Africa""})
RETURN i.name",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (o:Officer {country_codes: 'KOR'})
RETURN o",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (a:Address)
WHERE a.countries = 'Bahamas'
RETURN a",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (a:Address {node_id: 24000001})<--(e:Entity)
RETURN count(e) AS NumberOfConnectedEntities",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity {node_id: 10000001})-[:same_as]->(e2:Entity)
RETURN e2",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {node_id: 11000001})-[:intermediary_of]->(e:Entity)
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {node_id: 12000001})-[:same_name_as]->(e:Entity)
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {status: 'Defaulted'})
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity {node_id: 10000002})
RETURN o",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {node_id: 12000001})-[:officer_of]->(e:Entity)
RETURN count(e) AS NumberOfConnectedEntities",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.jurisdiction_description = 'Samoa'
RETURN e",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {incorporation_date: '23-MAR-2006'})
RETURN e",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[:registered_address]->(a:Address)
WHERE a.countries = 'South Korea'
RETURN o",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {original_name: 'NINGBO SUNRISE ENTERPRISES UNITED CO., LTD.'})
RETURN e",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary {name: 'MICHAEL PAPAGEORGE, MR.'})
RETURN i",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.status = 'Defaulted' AND e.inactivation_date < '01-JAN-2014'
RETURN e.name",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
RETURN e.name AS EntityName, e.service_provider AS ServiceProvider, e.incorporation_date AS IncorporationDate",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (a:Address {original_address: 'ANNEX FREDERICK & SHIRLEY STS, P. O. BOX N-4805 NA'})-[:registered_address]-(e:Entity)
RETURN e",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.closed_date STARTS WITH ""NOV-2012""
RETURN e",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.struck_off_date STARTS WITH '15-FEB-2013' OR e.struck_off_date STARTS WITH '18-FEB-2013'
RETURN e.name",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL AND e.name IS NOT NULL
RETURN e.node_id AS EntityID, e.former_name AS FormerName, e.name AS CurrentName",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {node_id: 10000004})-[:officer_of]->(o:Officer)
RETURN o.name AS OfficerName, o.node_id AS OfficerNodeID",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE e.countries = ""Hong Kong""
RETURN e.name, a.address",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {status: 'ACTIVE'})
RETURN i",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE e.node_id > 12000000
RETURN o",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity), (i:Intermediary)
WHERE e.country_codes = i.country_codes AND e.country_codes IS NOT NULL
RETURN e, i",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:registered_address]->(a:Address)
WHERE a.address = 'MICHAEL PAPAGEORGE; MR. 106 NICHOLSON STREET BROOK'
RETURN i",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)
WHERE o.valid_until = ""The Panama Papers data is current through 2015""
RETURN o",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.company_type IS NOT NULL
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.dorm_date IS NOT NULL
RETURN e",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.incorporation_date IS NOT NULL
RETURN e
ORDER BY e.incorporation_date DESC
LIMIT 5",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (a:Address {address: ""ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.""})-[:registered_address]-(e:Entity)
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity)
WHERE i.countries = 'South Africa'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL AND e.name IS NOT NULL AND e.former_name <> e.name
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)
WHERE o.lastEditTimestamp IS NOT NULL
RETURN o
ORDER BY o.lastEditTimestamp DESC
LIMIT 5",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {jurisdiction: 'SAM'})
RETURN e",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {service_provider: 'Mossack Fonseca'})
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (a:Address {icij_id: 'F969D23B2EDF91CAEBE119A675B61AAB'})-[:registered_address]-(e:Entity)
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.note IS NOT NULL
RETURN e.name, e.note",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.lastEditTimestamp < '1638311040000'
RETURN e
ORDER BY e.lastEditTimestamp DESC
LIMIT 5",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)
WHERE o.country_codes IS NOT NULL
RETURN DISTINCT o.country_codes AS CountryCodes",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity {status: 'Defaulted'})
RETURN i",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[r:officer_of]->(e:Entity)
WHERE r.start_date >= '1999-01-01'
RETURN o.name AS OfficerName, e.name AS EntityName, r.start_date AS StartDate",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity)-[r:same_id_as]->(e2:Entity)
RETURN e1, r, e2",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e1:Entity)-[:connected_to]->(e2:Entity)
RETURN e1, e2",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:same_name_as]->(o:Officer)
RETURN e, o",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.struck_off_date IS NOT NULL AND e.inactivation_date IS NOT NULL AND e.struck_off_date <> e.inactivation_date
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (a:Address)<-[:registered_address]-(e:Entity)
WITH a, count(e) AS numEntities
WHERE numEntities > 1
RETURN a",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.incorporation_date IS NOT NULL
RETURN e
ORDER BY e.incorporation_date DESC
LIMIT 5",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity)
RETURN i.name, count(e) AS connections
ORDER BY connections DESC",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.jurisdiction_description = e.country_codes
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.name IS NOT NULL AND e.original_name IS NOT NULL AND e.name <> e.original_name
RETURN e.name AS CurrentName, e.original_name AS OriginalName",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (n:Other {type: 'SOLE OWNERSHIP'})
RETURN n",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.note = 'Closed date stands for Liquidation date.'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
RETURN e
ORDER BY e.node_id DESC
LIMIT 5",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[r:officer_of]->(e:Entity)
WHERE r.link = 'Nominee Shareholder of'
RETURN o AS Officer, e AS Entity",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {node_id: 10000001})-[:same_company_as]->(sameCompany:Entity)
RETURN sameCompany",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (a:Address)
WHERE a.status = 'ACTIVE'
RETURN a",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.struck_off_date >= '01-JAN-2011' AND e.struck_off_date IS NOT NULL
RETURN e.node_id",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.closed_date IS NOT NULL AND e.type IS NOT NULL
RETURN e.name, e.closed_date, e.type",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {type: 'FOREIGN FORMED CORPORATION'})
RETURN e",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WITH e.name AS entityName, collect(e.status) AS statuses
WHERE size(statuses) > 1
RETURN entityName, statuses",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[r:officer_of]->(e:Entity)
WHERE r.link = 'Nominee Director of'
RETURN o.name AS OfficerName, e.name AS EntityName",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.lastEditTimestamp = '1638311020926'
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.node_id < 80000012
RETURN e.node_id, e.name",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {status: 'ACTIVE'})
RETURN o",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {jurisdiction: 'SAM'})
RETURN e.name",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.valid_until IS NOT NULL AND e.incorporation_date IS NOT NULL
RETURN e.name, e.valid_until, e.incorporation_date",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE a.address = 'KOWLOON; HONG KONG'
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (a:Address {node_id: 24000001})<-[:registered_address]-(o:Officer)
RETURN o",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.jurisdiction_description = 'Samoa' AND e.incorporation_date IS NOT NULL AND e.struck_off_date IS NOT NULL
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {incorporation_date: ""23-MAR-2006""})-[:registered_address]->(a:Address)
RETURN e.name AS EntityName, a.address AS RegisteredAddress",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (o:Officer {icij_id: 'CB195B5424E13A74A6F3BC719050A2B9'})-[:officer_of]->(e:Entity)
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {former_name: 'MOSSFON SUBSCRIBERS LTD.'})
RETURN o.name AS CurrentName",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary)-[:registered_address]->(a:Address)
WITH i, count(a) AS numAddresses
WHERE numAddresses > 1
RETURN i.name AS IntermediaryName, numAddresses",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity {struck_off_date: '15-FEB-2013'})
RETURN o",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e1:Entity)-[:same_company_as]-(e2:Entity)
RETURN e1.name AS Entity1, e2.name AS Entity2",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (a:Address)<-[:registered_address]-(e:Entity)
WITH a, count(e) AS numEntities
WHERE numEntities > 1
RETURN a",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)
WHERE o.note CONTAINS 'Liquidation date'
RETURN o",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Other {jurisdiction: 'AW'})
RETURN o.node_id, o.name, o.type",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {company_type: 'SOLE OWNERSHIP'})
WHERE e.incorporation_date IS NOT NULL
RETURN e.name, e.incorporation_date",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.sourceID = 'Panama Papers' AND e.company_number IS NOT NULL
RETURN e",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
RETURN o.name, o.lastEditTimestamp",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)-[:officer_of]->(o:Officer)
WITH e, count(o) AS numOfficers
WHERE numOfficers > 1
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.service_provider = 'Mossack Fonseca' AND e.status = 'Active'
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.struck_off_date = '15-FEB-2014'
RETURN e.name, e.jurisdiction",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.jurisdiction_description = 'Aruba'
RETURN e.name, e.jurisdiction",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE e.inactivation_date STARTS WITH 'FEB-2012'
RETURN o.name AS OfficerName, e.name AS EntityName, e.inactivation_date AS InactivationDate",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.country_codes = 'WSM'
WITH e
MATCH (o:Officer)
WHERE o.country_codes = 'WSM'
RETURN e, o",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)-[r:registered_address]->(a:Address)
RETURN e, r, a",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE exists{(o)-[:same_name_as]->(e)}
RETURN o, e",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (o:Other {type: 'LIMITED LIABILITY COMPANY'})
RETURN o",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.inactivation_date = '18-FEB-2013'
RETURN e.name AS EntityName, e.service_provider AS ServiceProvider",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.note CONTAINS 'Liquidation date'
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {jurisdiction: 'SAM'})
WHERE e.company_type IS NOT NULL
RETURN e.name, e.company_type",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE o.sourceID = 'Panama Papers'
RETURN o, e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[r:officer_of]->(e:Entity)
WITH o, count(DISTINCT e) AS numEntities
WHERE numEntities > 1
RETURN o.name, numEntities",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.lastEditTimestamp IS NOT NULL AND e.struck_off_date IS NOT NULL
RETURN e.name, e.lastEditTimestamp, e.struck_off_date",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (a:Address {country_codes: 'BHS'})-[:registered_address]-(e:Entity)
RETURN a, e",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.valid_until = 'The Panama Papers data is current through 2015'
RETURN e",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary)-[:registered_address]->(a:Address)
WHERE a.countries = 'Bahamas'
RETURN i",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)-[r]->()
WHERE r.link CONTAINS 'Nominee'
RETURN e",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE o.name CONTAINS ' SOO'
RETURN o.name AS OfficerName, e.name AS EntityName",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.struck_off_date IS NOT NULL
RETURN e.name, e.struck_off_date, e.status",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {node_id: 10000002})-[:same_name_as]->(o:Officer)
RETURN o.name AS OfficerName, o.node_id AS OfficerNodeId",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity {node_id: 10000004})-[:similar]->(e2:Entity)
RETURN e2",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL
RETURN e.name AS CurrentName, e.former_name AS FormerName",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)
WHERE o.node_id > 12000000
RETURN o",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.tax_stat_description IS NOT NULL
RETURN e",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (o:Other)-[r:connected_to]->(e:Entity)
RETURN o, r, e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[r:connected_to]->(:Other {sourceID: 'Paradise Papers - Aruba corporate registry'})
RETURN e, r",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WITH e, count(a) AS numAddresses, collect(a.address) AS addresses
WHERE numAddresses > 1
RETURN e.name AS EntityName, addresses",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity {incorporation_date: ""23-MAR-2006""})
RETURN o",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.struck_off_date IS NOT NULL AND e.inactivation_date IS NOT NULL
  AND substring(e.struck_off_date, 7) = substring(e.inactivation_date, 7)
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {node_id: 12000001})-[:registered_address]->(a:Address)
MATCH (e:Entity)-[:registered_address]->(a)
RETURN e",Pathfinding Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)-[:same_name_as]->(similar:Entity {name: 'Top Games Holdings Inc.'})
RETURN e.name AS EntityName, e.incorporation_date AS IncorporationDate",Pathfinding Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary {node_id: 11000001})-[:intermediary_of]->(e:Entity)<-[:officer_of]-(o:Officer)
RETURN o",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[r:intermediary_of]->(e:Entity)
RETURN i, r, e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {inactivation_date: '27-FEB-2014'})
RETURN e",Pathfinding Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
RETURN e
ORDER BY e.lastEditTimestamp DESC
LIMIT 5",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {incorporation_date: '23-MAR-2006'})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE a.address CONTAINS ""Tsim Sha Tsui, Kowloon, Hong Kong""
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.company_number IS NOT NULL
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[:officer_of]->(e:Entity {incorporation_date: '23-MAR-2006'})
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.service_provider = 'Mossack Fonseca' AND e.jurisdiction = 'SAM'
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (o:Officer {icij_id: 'E72326DEA50F1A9C2876E112AAEB42BC'})
RETURN o.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.closed_date = '28-NOV-2012'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE EXISTS {
    (e)-[:same_company_as]->(e2:Entity)
    WHERE e.company_type IS NOT NULL AND e2.company_type IS NOT NULL AND e.company_type <> e2.company_type
}
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity {struck_off_date: '15-FEB-2009'})
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.incorporation_date STARTS WITH 'JAN-2006'
RETURN e.name, e.country_codes",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {address: 'MICHAEL PAPAGEORGE; MR. 106 NICHOLSON STREET BROOK'})
RETURN i",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.tax_stat_description IS NOT NULL
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (a:Address)
WHERE a.valid_until IS NOT NULL AND a.sourceID = 'Panama Papers' AND toInteger(substring(a.valid_until, -4)) > 2010
RETURN a",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.note = 'Closed date stands for Liquidation date.'
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WITH e, count(a) AS numAddresses
WHERE numAddresses > 1
RETURN e, numAddresses",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[r:intermediary_of]->(e:Entity)
WHERE r.start_date < '2015'
RETURN i AS Intermediary, r AS Relationship, e AS Entity",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.valid_until = 'Aruba corporate registry data is current through 2014'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.jurisdiction_description = 'Samoa' AND e.service_provider = 'Mossack Fonseca'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary)-[:same_name_as]->(o:Officer)
WHERE i.sourceID = 'Panama Papers' AND o.sourceID = 'Panama Papers'
RETURN i.name AS IntermediaryName",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.struck_off_date = '31-DEC-2002' AND e.jurisdiction_description = 'Aruba'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.incorporation_date IS NOT NULL AND e.struck_off_date IS NOT NULL
  AND substring(e.incorporation_date, 7) = substring(e.struck_off_date, 7)
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[r:officer_of {link: 'shareholder of', start_date: '19-NOV-1999'}]->(e:Entity)
RETURN o.name AS OfficerName",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {country_codes: 'HKG'})
RETURN e.name, e.incorporation_date",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.valid_until = ""The Panama Papers data is current through 2015"" AND e.sourceID = ""Bahamas Leaks""
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.note = 'Closed date stands for Cancelled date.'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL
RETURN e.name AS CurrentName, e.former_name AS FormerName",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:registered_address]->(a:Address)
WHERE a.address = 'Level 5 Development; Bank of Samoa Building; Beach Road; Apia; Samoa'
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[r:officer_of]->(e:Entity)
WHERE o.sourceID = 'Offshore Leaks' AND r.link = 'nominee'
RETURN o.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.jurisdiction = 'SAM' AND e.inactivation_date = '15-FEB-2012'
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[r:intermediary_of]->(e:Entity)
WHERE r.start_date = '19-NOV-1999'
RETURN i, r, e",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.company_type IS NOT NULL AND EXISTS {
  MATCH (e)-[:same_as]->(e2:Entity)
  WHERE e2.company_type IS NOT NULL AND e.company_type <> e2.company_type
}
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.type = 'LIMITED LIABILITY COMPANY' AND e.sourceID = 'Paradise Papers - Appleby'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.closed_date = '28-NOV-2012'
RETURN e.name, e.country_codes",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.incorporation_date CONTAINS '2012' AND e.struck_off_date CONTAINS '2012'
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {name: 'MOSSFON SUBSCRIBERS LTD.'})-[:connected_to]->(connectedEntities:Entity)
RETURN connectedEntities",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {inactivation_date: '18-FEB-2013'})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.incorporation_date CONTAINS '2006' AND e.status = 'Defaulted'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[:registered_address]->(a:Address)
WHERE o.sourceID = 'Bahamas Leaks' AND a.address = 'ANNEX FREDERICK & SHIRLEY STS, P.O. BOX N-4805, NA'
RETURN o.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE a.address = 'Level 5 Development; Bank of Samoa Building; Beach Road; Apia; Samoa'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[r:officer_of]->(e:Entity)
WHERE o.sourceID = 'Offshore Leaks' AND r.link = 'nominee'
RETURN o.name, e.name",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {name: 'Top Games Holdings Inc.'})-[:connected_to]->(connectedEntities:Entity)
RETURN connectedEntities",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e1:Entity)-[:same_name_as]->(e2:Entity)
RETURN e1.name AS EntityName1, e2.name AS EntityName2",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o1:Officer)-[r:same_id_as {sourceID: 'Paradise Papers - Malta corporate registry'}]->(o2:Officer)
RETURN o1, r, o2",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.jurisdiction = 'SAM' AND e.service_provider = 'Mossack Fonseca'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {former_name: 'KIM SOO IN'})
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {name: 'MICHAEL PAPAGEORGE, MR.'})-[:intermediary_of]->(e:Entity)
RETURN e.name",Complex Retrieval Queries,offshoreleaks,True,False,False
"MATCH (a:Address)<-[:registered_address]-(e:Entity)
WHERE e.sourceID = 'Panama Papers'
WITH a, count(e) AS entityCount
WHERE entityCount > 1
RETURN a.address, entityCount",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)
WHERE o.valid_until = ""The Panama Papers data is current through 2015"" AND o.sourceID = ""Panama Papers""
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.struck_off_date IS NOT NULL AND e.inactivation_date IS NULL
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.struck_off_date STARTS WITH '15-FEB-2013' OR e.struck_off_date STARTS WITH '18-FEB-2013'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.struck_off_date STARTS WITH 'FEB-2012' AND e.former_name IS NOT NULL
RETURN e.former_name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {country_codes: 'HKG', status: 'Defaulted'})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[r:officer_of {link: 'shareholder of', start_date: '19-NOV-1999'}]->(e:Entity)
WHERE e.incorporation_date = '19-NOV-1999'
RETURN o.name AS OfficerName",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.struck_off_date IS NOT NULL AND e.inactivation_date IS NOT NULL
  AND date(e.struck_off_date) = date(e.inactivation_date) - duration({years: 1})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE e.jurisdiction_description = 'Samoa'
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity {incorporation_date: '06-JAN-2006'})
RETURN o.name AS OfficerName",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity {name: 'HOTFOCUS CO., LTD.'})-[:registered_address]->(a:Address)
MATCH (e2:Entity)-[:same_as]->(e1)
RETURN e2",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.valid_until = ""The Panama Papers data is current through 2015"" AND e.sourceID = ""Panama Papers""
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.service_provider = 'Mossack Fonseca' AND e.struck_off_date CONTAINS '2013'
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:registered_address]->(a:Address)
WHERE i.countries IS NOT NULL AND a.countries IS NOT NULL AND NOT i.countries CONTAINS a.countries
RETURN i.name AS IntermediaryName, i.countries AS CountryOfOperation, a.address AS RegisteredAddress, a.countries AS AddressCountry",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)
WHERE o.status = 'ACTIVE' AND o.sourceID = 'Panama Papers'
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {service_provider: 'Mossack Fonseca', inactivation_date: '16-FEB-2009'})
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[r:officer_of]->(e:Entity)
WHERE r.sourceID = 'Offshore Leaks' AND r.link = 'beneficiary of'
RETURN o.name",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.company_number STARTS WITH '240'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity {name: 'Top Games Holdings Inc.'})
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.incorporation_date = '10-JAN-2006' AND e.jurisdiction = 'SAM'
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (o:Officer {icij_id: 'E72326DEA50F1A9C2876E112AAEB42BC'})-[:officer_of]->(e:Entity)
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Other)
RETURN o
ORDER BY o.lastEditTimestamp DESC
LIMIT 3",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o:Other)
WHERE o.note = 'Closed date stands for Liquidation date.'
RETURN o",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE a.countries = 'Samoa'
RETURN e",Simple Aggregation Queries,offshoreleaks,True,False,False
"MATCH (e1:Entity {name: 'Top Games Holdings Inc.'})-[:same_company_as]->(e2:Entity)
RETURN e2",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary)-[r:intermediary_of]->(e:Entity)
RETURN i, e, r
ORDER BY i.lastEditTimestamp DESC
LIMIT 5",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (o:Officer)-[:same_name_as]->(e:Entity {name: 'MOSSFON SUBSCRIBERS LTD.'})
RETURN o.name AS OfficerName",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL
RETURN e",Simple Aggregation Queries,offshoreleaks,True,False,False
"MATCH (e:Entity)-[:registered_address]->(a:Address)
WHERE a.countries = 'Hong Kong'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary)
RETURN i
ORDER BY i.lastEditTimestamp DESC
LIMIT 5",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity {incorporation_date: '23-MAR-2006'})
RETURN e.name, e.status",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.struck_off_date IS NOT NULL AND e.inactivation_date IS NOT NULL
  AND date(e.struck_off_date) = date(e.inactivation_date) + duration({days: 1})
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {status: 'Defaulted'})
RETURN e.name AS EntityName, e.countries AS Country",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.lastEditTimestamp < '1638311040000'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {jurisdiction_description: ""Samoa""})-[:connected_to]->(connected:Entity)
RETURN connected",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity)
RETURN i, collect(e) AS connected_entities
ORDER BY count(e) DESC
LIMIT 5",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.node_id > 10000000
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (o:Officer)-[r:officer_of {link: 'Nominee Shareholder of'}]->(e:Entity)
RETURN o, r, e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (a:Address)<-[:registered_address]-(e:Entity)
WITH a, count(e) AS numEntities
WHERE numEntities > 1
RETURN a.address, numEntities",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity {name: 'Top Games Holdings Inc.'})
MATCH (e2:Entity)
WHERE e1.lastEditTimestamp = e2.lastEditTimestamp AND e1.node_id <> e2.node_id
RETURN e2",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.tax_stat_description IS NOT NULL
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.closed_date IS NOT NULL AND e.struck_off_date IS NULL
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (n)-[r]->(m)
RETURN DISTINCT type(r) AS ConnectionType, max(r.lastEditTimestamp) AS MostRecent
ORDER BY MostRecent DESC
LIMIT 3",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {name: 'TIANSHENG INDUSTRY AND TRADING CO., LTD.'})-[:same_as]->(sameEntity:Entity)
RETURN sameEntity",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e1:Entity {name: 'Top Games Holdings Inc.'})-[:registered_address]->(a:Address)
MATCH (e2:Entity)-[:registered_address]->(a)
RETURN e2",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary)
WHERE i.sourceID = 'Panama Papers' AND i.status = 'ACTIVE'
RETURN i",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.struck_off_date CONTAINS '2014'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:registered_address]->(a:Address)
WHERE a.countries = 'Samoa' AND a.address CONTAINS 'Apia'
RETURN o.name, o.node_id, a.address",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {jurisdiction: 'SAM'})
WHERE e.closed_date IS NOT NULL
RETURN e.name, e.closed_date",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)-[:similar]->(similarEntity:Entity {name: 'NINGBO SUNRISE ENTERPRISES UNITED CO., LTD.'})
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (o:Other {type: 'LIMITED LIABILITY COMPANY'})
RETURN o.name",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (a:Address)
RETURN a
ORDER BY a.lastEditTimestamp DESC
LIMIT 5",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (a:Address)
WHERE a.valid_until = ""The Bahamas Leaks data is current through early 2020""
RETURN a",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.former_name IS NOT NULL
WITH e, split(e.former_name, "";"") AS names
WHERE size(names) > 1
RETURN e.name AS entity_name, names AS former_names",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
WHERE e.company_number STARTS WITH '240'
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {sourceID: ""Panama Papers""})
WHERE o.note IS NOT NULL
RETURN o.name",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.inactivation_date = '18-FEB-2013' AND e.struck_off_date = '15-FEB-2013'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {company_type: 'FOREIGN FORMED CORPORATION'})
WHERE e.sourceID = 'Paradise Papers - Appleby'
RETURN e.name",Complex Retrieval Queries,offshoreleaks,False,True,False
"MATCH (e:Entity)
WHERE e.incorporation_date CONTAINS '2006' AND e.service_provider = 'Mossack Fonseca'
RETURN e",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {name: 'MICHAEL PAPAGEORGE, MR.'})-[:intermediary_of]->(e:Entity)
RETURN e.name AS EntityName, e.status AS Status",Complex Retrieval Queries,offshoreleaks,False,False,False
"MATCH (o:Officer {sourceID: 'Bahamas Leaks', status: 'ACTIVE'})
RETURN o",Complex Retrieval Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.incorporation_date CONTAINS ""MAR-2006""
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {jurisdiction_description: ""Samoa""})
RETURN e",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (e:Entity {status: ""Defaulted""})
WHERE e.inactivation_date STARTS WITH ""2013"" OR e.struck_off_date STARTS WITH ""2013""
RETURN e.name",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {service_provider: ""Mossack Fonseca""})
RETURN e
ORDER BY e.node_id
LIMIT 5",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {country_codes: 'HKG'})
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.struck_off_date STARTS WITH '15-FEB-2013' OR e.struck_off_date STARTS WITH '18-FEB-2013'
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (a:Address {address: ""ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.""})-[:registered_address]-(e:Entity)
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.inactivation_date STARTS WITH '18-FEB-2013'
RETURN count(e) AS InactivatedEntitiesCount",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.lastEditTimestamp = '1638311020926'
RETURN e.name",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity)
WHERE e.valid_until = ""The Panama Papers data is current through 2015""
RETURN e",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {countries: ""South Africa""})
RETURN i
ORDER BY i.node_id
LIMIT 3",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary {status: ""ACTIVE""})
RETURN i",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (a:Address {address: 'MICHAEL PAPAGEORGE; MR. 106 NICHOLSON STREET BROOK'})<-[:registered_address]-(i:Intermediary)
RETURN i",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity)
WHERE e.jurisdiction = 'PAN'
RETURN i",Simple Aggregation Queries,offshoreleaks,False,True,False
"MATCH (i:Intermediary {sourceID: ""Panama Papers""})
RETURN i.name",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (i:Intermediary)
RETURN DISTINCT i.countries AS Countries",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {name: 'KIM SOO IN'})
RETURN o",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity {jurisdiction: 'SAM'})
RETURN o.name AS OfficerName, e.name AS EntityName",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o:Officer {country_codes: 'KOR'})
RETURN o",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (o:Officer)-[:officer_of]->(e:Entity)
RETURN o",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (a:Address {countries: ""Bahamas""})
RETURN count(a) AS NumberOfAddressesInBahamas",Simple Aggregation Queries,offshoreleaks,False,False,False
"MATCH (e:Entity)
WHERE e.inactivation_date IS NOT NULL AND e.status IS NOT NULL
RETURN e.name, e.inactivation_date, e.status",Simple Aggregation Queries,offshoreleaks,False,False,True
"MATCH (e:Entity {name: 'SKY-BLUE GIFTS & TOYS CO., LTD.'})-[:same_company_as]->(sameCompany:Entity)
RETURN sameCompany.name",Complex Retrieval Queries,offshoreleaks,True,False,False
"MATCH (m:Movie)
WHERE m.runtime > 120
RETURN m
ORDER BY m.runtime DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.imdbRating < 5
WITH g, avg(m.imdbRating) AS avgRating
ORDER BY avgRating ASC
RETURN g.name, avgRating
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.bio IS NOT NULL
RETURN d
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.plot
ORDER BY size(m.plot) DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(d:Director)
WITH a, m, count(DISTINCT d) AS numDirectors
WHERE numDirectors >= 3
RETURN a.name, count(DISTINCT m) AS moviesWithThreeDirectors
ORDER BY moviesWithThreeDirectors DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE d.gender = 'female'
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)
RETURN a.name, count(r) AS roles_count
ORDER BY roles_count DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size{(u:User)-[:RATED]->(m)} >= 10
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, count(DISTINCT m.languages) AS languageDiversity
ORDER BY languageDiversity DESC
RETURN g.name AS Genre, languageDiversity
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.budget > 200000000
RETURN a
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.imdbRating IS NOT NULL
WITH d, AVG(m.imdbRating) AS avgRating
ORDER BY avgRating DESC
LIMIT 5
RETURN d.name, avgRating",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL
RETURN m.title, m.budget, m.revenue, abs(m.revenue - m.budget) AS difference
ORDER BY difference DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released STARTS WITH '12-' OR m.released CONTAINS '-12-'
RETURN m
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating > 7.0 AND m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE m.year < 2000
WITH u, count(m) AS movies_rated
ORDER BY movies_rated DESC
LIMIT 5
RETURN u.userId, u.name, movies_rated",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (a:Actor {bornIn: ""France""})-[:ACTED_IN]->(m:Movie)
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, size(m.countries) AS countries_count
ORDER BY countries_count DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.budget < 50000000
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'young boy' OR m.plot CONTAINS 'orphan'
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m
ORDER BY u.born DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.revenue IS NOT NULL
RETURN a.name, sum(m.revenue) AS totalRevenue
ORDER BY totalRevenue DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
RETURN m
ORDER BY m.runtime DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: ""Nebraska""})-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor)
RETURN DISTINCT a.name
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor {bornIn: ""USA""})-[:ACTED_IN]->(m:Movie)
WITH a, count(m) AS movies_count
WHERE movies_count >= 2
RETURN a.name, movies_count
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster IS NOT NULL AND m.released > ""2010-01-01""
RETURN m
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m.title, count(r) AS ratingsCount
ORDER BY ratingsCount DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(g) AS genreCount
ORDER BY genreCount DESC
RETURN m.title, genreCount
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (u:User {name: 'John'})-[:RATED]->(m:Movie)
RETURN m.title AS MovieTitle, avg(u.rating) AS AverageRating
ORDER BY AverageRating DESC
LIMIT 5",Simple Retrieval Queries,recommendations,True,False,False
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE 'English' IN m.languages AND 'French' IN m.languages
RETURN DISTINCT g.name
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.year >= 2000 AND m.year < 2010
RETURN d.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, size(m.languages) AS num_languages
ORDER BY num_languages DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released IS NOT NULL AND date(m.released).dayOfWeek = 5
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m.title, m.released, m.imdbRating
ORDER BY u.accountCreationDate ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.runtime = 90
RETURN g.name, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.bornIn = a.diedIn AND a.bornIn IS NOT NULL AND a.diedIn IS NOT NULL
RETURN a
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)
RETURN d.name, d.bio
ORDER BY length(d.bio) DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.tmdbId IS NOT NULL AND m.imdbId IS NOT NULL
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH m, count(DISTINCT u) AS userCount
WHERE userCount > 5
RETURN m
ORDER BY userCount DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:DIRECTED]->(m:Movie)
RETURN a.name, a.url, a.tmdbId
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.countries IS NOT NULL
RETURN m.title, size(m.countries) AS num_countries
ORDER BY num_countries DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor)
WITH d, count(DISTINCT a) AS diversity
ORDER BY diversity DESC
LIMIT 3
RETURN d.name, diversity",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'French' IN m.languages
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE exists {
  (d)-[:ACTED_IN]->(:Movie)
}
RETURN m.title AS MovieTitle
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH m, count(a) AS num_actors
ORDER BY num_actors DESC
LIMIT 5
RETURN m.title, num_actors",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.imdbRating >= 9
RETURN d
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, AVG(r.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN u.userId, u.name, avgRating",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {name: ""Harold Lloyd""})-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN DISTINCT g.name
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH d, COUNT(DISTINCT g) AS genreDiversity
ORDER BY genreDiversity DESC
RETURN d.name, genreDiversity
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[r:RATED]-(:User)
WITH m, count(r) AS ratingsCount
WHERE ratingsCount = 5
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE d.born > date('1960-01-01')
RETURN DISTINCT g.name
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
RETURN m.title, count(u) AS ratingsCount
ORDER BY ratingsCount DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.runtime > 120
RETURN DISTINCT g.name
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {name: ""Harold Lloyd""})-[:DIRECTED]->(m:Movie)
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, AVG(r.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 5
RETURN u.userId, u.name, avgRating",Verbose query,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.imdbRating IS NOT NULL
WITH d, AVG(m.imdbRating) AS avgRating
ORDER BY avgRating DESC
LIMIT 5
RETURN d.name, avgRating",Verbose query,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH a, avg(m.imdbRating) AS avgRating
ORDER BY avgRating DESC
LIMIT 5
RETURN a.name, avgRating",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL
RETURN m
ORDER BY m.budget ASC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.budget
ORDER BY m.budget DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.born IS NOT NULL
RETURN d
ORDER BY d.born DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.born IS NOT NULL
RETURN a
ORDER BY a.born
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.year ASC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released IS NOT NULL
RETURN m
ORDER BY m.released DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.languages IS NOT NULL
UNWIND m.languages AS language
RETURN language, count(m) AS num_movies
ORDER BY num_movies DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u.name, count(m) AS movies_rated
ORDER BY movies_rated DESC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
UNWIND m.countries AS country
WITH country, COUNT(m) AS movieCount
ORDER BY movieCount DESC
RETURN country, movieCount
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)
RETURN m.title AS MovieTitle, count(u) AS NumberOfRatings
ORDER BY NumberOfRatings DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
RETURN g.name, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
RETURN d.name, count(m) AS movies_directed
ORDER BY movies_directed DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating IS NOT NULL
RETURN m.title AS MovieTitle, m.imdbRating AS Rating
ORDER BY m.imdbRating ASC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.runtime
ORDER BY m.runtime DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WITH m ORDER BY m.revenue DESC LIMIT 1
MATCH (u:User)-[:RATED]->(m)
RETURN u LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.runtime > 150
WITH d, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN d.name, movies_count",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.year = 2014
RETURN a
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.bornIn = 'France'
RETURN d
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH m, u ORDER BY m.year ASC, r.timestamp ASC
RETURN u.userId, u.name, COLLECT(m.title)[..3] AS movies_rated LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.died > date('2000-01-01')
RETURN d
ORDER BY d.died ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot IS NOT NULL
RETURN m
ORDER BY m.released DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'USA' IN m.countries AND m.revenue > 500000000
RETURN m
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WHERE exists {
  MATCH (d)-[:ACTED_IN]->(:Movie)
}
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.imdbRating > 8.0
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.born < date('1900-01-01')
RETURN a
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue > 0
RETURN m.title, m.budget, m.revenue, (toFloat(m.budget) / m.revenue) AS budgetRevenueRatio
ORDER BY budgetRevenueRatio DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u, count(m) AS movies_rated
ORDER BY movies_rated DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.poster IS NOT NULL
RETURN a
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH d, count(DISTINCT g) AS genreCount
WHERE genreCount > 1
RETURN d.name, genreCount
ORDER BY genreCount DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(DISTINCT g) AS genreCount
ORDER BY genreCount DESC
RETURN m.title, genreCount
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE r.rating < 3.0
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year = 2006
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.runtime < 90
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: ""USA""})-[:DIRECTED]->(m:Movie)
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.languages
ORDER BY size(m.languages) DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE exists {
  MATCH (u:User)-[:RATED]->(m)
  WITH m, count(DISTINCT u) AS userCount
  WHERE userCount >= 5
}
RETURN g.name AS Genre
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 100000000
RETURN m
ORDER BY m.budget DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:RATED]-(:User)
RETURN m.title, count(*) AS votes
ORDER BY votes DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released STARTS WITH '1995' AND m.imdbRating IS NOT NULL
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m.title AS MovieTitle, m.revenue AS Revenue
ORDER BY m.revenue DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.tmdbId IS NOT NULL AND a.imdbId IS NOT NULL
RETURN a
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, count(m) AS movieCount
ORDER BY movieCount ASC
LIMIT 3
RETURN g.name, movieCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime < 90
RETURN m
ORDER BY m.runtime ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN a.name, sum(m.imdbVotes) AS totalVotes
ORDER BY totalVotes DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: ""USA""})
RETURN d.name
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'USA' IN m.countries
RETURN m
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue ASC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating IS NOT NULL
RETURN m.title, m.imdbRating
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m.title, AVG(r.rating) AS averageRating
ORDER BY averageRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 100000000
RETURN m
ORDER BY m.budget DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, AVG(r.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN u.userId, u.name, avgRating",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (u:User)-[r:RATED]->(:Movie)
RETURN u, count(r) AS ratingsCount
ORDER BY ratingsCount DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year > 2010
RETURN m
ORDER BY m.year ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.runtime DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue > 0
RETURN m.title, m.budget, m.revenue, (toFloat(m.budget) / m.revenue) AS budgetToRevenueRatio
ORDER BY budgetToRevenueRatio DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:IN_GENRE]->(g:Genre)
RETURN g.name
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {name: 'Anthony Stacchi'})-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor)
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating > 7.0 AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue ASC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, count(m) AS movies_directed
ORDER BY movies_directed DESC
LIMIT 3
RETURN d.name, movies_directed",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'love'
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue / m.budget > 3
RETURN m
ORDER BY m.revenue / m.budget DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH a, count(DISTINCT m.languages) AS numLanguages
WHERE numLanguages > 3
RETURN a.name, numLanguages
ORDER BY numLanguages DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, avg(m.year) AS avgYear
ORDER BY avgYear ASC
LIMIT 3
RETURN u",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'Turkish' IN m.languages
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (a:Actor)
WHERE a.born >= date('1980-01-01') AND a.born <= date('1989-12-31')
RETURN a
ORDER BY a.born
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.imdbRating IS NOT NULL
WITH d, avg(m.imdbRating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN d.name, avgRating",Simple Retrieval Queries,recommendations,True,False,False
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'zombie'
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Comedy'})
WITH u, count(DISTINCT m) AS comedyCount
WHERE NOT exists {
    (u)-[:RATED]->(m2:Movie)-[:IN_GENRE]->(g2:Genre)
    WHERE g2.name <> 'Comedy'
}
RETURN u
ORDER BY comedyCount DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, count(m) AS movieCount
ORDER BY movieCount ASC
LIMIT 3
RETURN g.name, movieCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating > 8 AND m.imdbRating < 9
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.died > date(""2000-01-01"")
RETURN d
ORDER BY d.died ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE exists {
  (m)<-[:ACTED_IN]-(a1:Actor {bornIn: 'USA'})
} AND exists {
  (m)<-[:ACTED_IN]-(a2:Actor {bornIn: 'Japan'})
}
RETURN m.title AS MovieTitle
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster CONTAINS 'face'
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name IN ['Comedy', 'Drama']
WITH a, count(DISTINCT g.name) AS genresCount
WHERE genresCount = 2
RETURN a.name, count(m) AS moviesCount
ORDER BY moviesCount DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.revenue > 500000000
RETURN d.name, sum(m.revenue) as totalRevenue
ORDER BY totalRevenue DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating < 5
RETURN m
ORDER BY m.imdbRating ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m, count(r) AS ratingsCount
ORDER BY ratingsCount DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.languages
ORDER BY size(m.languages) DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor {bornIn: ""France""})-[:ACTED_IN]->(m:Movie)
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.imdbRating > 7
WITH g, avg(m.imdbRating) AS avgRating
ORDER BY avgRating DESC
RETURN g.name AS Genre, avgRating
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH d, count(DISTINCT g) AS genreCount
WHERE genreCount > 2
RETURN d.name, genreCount
ORDER BY genreCount DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.title STARTS WITH 'The'
RETURN m
ORDER BY m.title
LIMIT 3",Simple Retrieval Queries,recommendations,True,False,False
"MATCH (m:Movie)
WHERE m.year >= 2000 AND m.year < 2010
RETURN m
ORDER BY m.year ASC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE d.bornIn = ""Nebraska""
RETURN m.title, m.year, m.imdbRating
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Retrieval Queries,recommendations,True,False,False
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User {name: 'Omar Huffman'})-[:RATED]->(m:Movie)
RETURN m.title AS MovieTitle, m.imdbRating AS IMDbRating
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: ""Comedy""})
WITH a, count(r.role) AS roles
ORDER BY roles DESC
LIMIT 3
RETURN a.name, roles",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (u:User)-[r:RATED]->(m:Movie {title: 'Toy Story'})
RETURN u.name, r.rating
ORDER BY r.rating DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {name: 'Graham Annable'})-[:DIRECTED]->(m:Movie)
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.bio IS NOT NULL
RETURN a.name, a.bio, length(a.bio) AS bio_length
ORDER BY bio_length DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size(m.languages) >= 3
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, collect(m.imdbRating) AS ratings
WITH u, apoc.coll.min(ratings) AS minRating, apoc.coll.max(ratings) AS maxRating, maxRating - minRating AS range
ORDER BY range DESC
RETURN u.userId, u.name, range
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE d.born > date('1980-01-01')
RETURN g.name AS Genre
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.imdbRating >= 6
WITH d, count(m) AS moviesCount
ORDER BY moviesCount DESC
LIMIT 5
RETURN d.name, moviesCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster CONTAINS ""blue""
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH a, collect(DISTINCT m.year) AS years
RETURN a.name, size(years) AS distinct_years
ORDER BY distinct_years DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'friendship'
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH m, count(d) AS numDirectors
ORDER BY numDirectors DESC
RETURN m.title, numDirectors
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH a, COUNT(DISTINCT g) AS genreCount
ORDER BY genreCount DESC
LIMIT 3
RETURN a.name, genreCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, count(DISTINCT u) AS userCount
ORDER BY userCount DESC
RETURN g.name AS Genre, userCount
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE exists {
    MATCH (d)-[:ACTED_IN]->(:Movie)
}
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE exists{(m)-[:IN_GENRE]->(:Genre {name: 'Animation'})}
WITH d, count(DISTINCT m) AS animatedCount
WHERE animatedCount > 0
MATCH (d)-[:DIRECTED]->(m2:Movie)
WHERE NOT exists{(m2)-[:IN_GENRE]->(:Genre {name: 'Animation'})}
WITH d, count(DISTINCT m2) AS nonAnimatedCount
WHERE nonAnimatedCount > 0
RETURN d.name
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size(m.countries) = 3
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH m, COUNT(DISTINCT u.name) AS distinctUserNames
ORDER BY distinctUserNames DESC
RETURN m.title, distinctUserNames
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.budget < 10000000
RETURN a
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, count(DISTINCT m.countries) AS numCountries
WHERE numCountries > 3
RETURN d.name, numCountries
ORDER BY numCountries DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'evil exterminator'
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH a, count(m) AS movies_count
WHERE movies_count > 10
RETURN a.name, movies_count
ORDER BY movies_count DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE count{(u:User)-[:RATED]->(m)} = 3
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL AND m.budget IS NOT NULL
RETURN m.title, m.revenue - m.budget AS profit
ORDER BY profit DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: ""USA""})
RETURN d.name
ORDER BY d.born DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.countries IS NOT NULL
RETURN m.title, size(m.countries) AS distinct_countries
ORDER BY distinct_countries DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, avg(r.rating) AS avgRating
ORDER BY avgRating ASC
LIMIT 3
RETURN u.userId, u.name, avgRating",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year > 2010
RETURN m.title, m.imdbVotes
ORDER BY m.imdbVotes DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.born < date('1900-01-01')
RETURN d
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)
WHERE m.year < 1980
RETURN a.name, count(r) AS roles
ORDER BY roles DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, size(m.languages) AS num_languages
ORDER BY num_languages DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Adventure'})
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.died >= date('2000-01-01')
RETURN d
ORDER BY d.died DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating < 5.0
RETURN m.title, m.imdbRating
ORDER BY m.imdbRating ASC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u, count(m) AS movies_rated
ORDER BY movies_rated DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 100000000
RETURN m
ORDER BY m.budget DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:DIRECTED]->(:Movie)
WHERE a.bornIn = 'France'
RETURN a
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.runtime > 150
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE r.timestamp > 1451606400
RETURN m.title, m.year, r.rating
ORDER BY r.timestamp DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, count(m) AS movies_directed
ORDER BY movies_directed DESC
LIMIT 3
RETURN d.name, movies_directed",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(m) AS MovieCount
ORDER BY MovieCount DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating > 8.0
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r1:ACTED_IN]->(m:Movie)<-[r2:DIRECTED]-(a)
RETURN a.name, collect(m.title) AS movies, count(m) AS numberOfMovies
ORDER BY numberOfMovies DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year = 2014
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released STARTS WITH '1995'
RETURN m
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m.title, count(u) AS num_users
ORDER BY num_users DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.released <= '2000-01-01'
RETURN m
ORDER BY m.released DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH a, avg(m.imdbRating) AS avgRating, count(m) AS moviesCount
WHERE moviesCount >= 3
RETURN a.name, avgRating
ORDER BY avgRating DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= ""2000-01-01"" AND m.imdbRating IS NOT NULL
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.runtime > 120
RETURN g.name AS Genre, count(m) AS MovieCount
ORDER BY MovieCount DESC",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year < 2000 AND m.imdbVotes IS NOT NULL
RETURN m.title, m.imdbVotes
ORDER BY m.imdbVotes DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'English' IN m.languages AND m.runtime = 96
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 200000000 AND m.imdbRating < 6.0
RETURN m.title, m.revenue, m.imdbRating",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {name: ""Anthony Stacchi""})-[:DIRECTED]->(m:Movie)
UNWIND m.languages AS language
RETURN language, count(language) AS frequency
ORDER BY frequency DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie), (p)-[:DIRECTED]->(m)
RETURN m.title AS MovieTitle, p.name AS PersonName",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.budget < 50000000
RETURN DISTINCT a.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 180
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: ""France""})
RETURN d.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'friendship'
RETURN m.title",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Animation'})
RETURN DISTINCT u.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie {imdbId: '0787474'})<-[:RATED]-(u:User)
RETURN u",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {name: ""François Lallement""})-[:DIRECTED]->(m:Movie)
RETURN m.title AS MovieTitle, m.imdbRating AS IMDbRating",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Adventure'})
WITH a, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5
RETURN a.name, movies_count",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:IN_GENRE]->(g:Genre)
RETURN g.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.year DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {name: ""Harold Lloyd""})-[:DIRECTED]->(m:Movie)
RETURN m.title AS MovieTitle, m.revenue AS Revenue
ORDER BY m.revenue DESC
LIMIT 5",Complex Retrieval Queries,recommendations,True,False,False
"MATCH (m:Movie)
WHERE m.imdbVotes > 600000
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie {title: 'Open Season'})<-[:ACTED_IN]-(a:Actor)
RETURN a.name AS ActorName",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.year > 2010
RETURN d.name
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= '2000-01-01' AND m.released < '2010-01-01' AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 500000000
UNWIND m.countries AS country
RETURN country, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.imdbRating > 8.0
RETURN d.name, m.title, m.imdbRating",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User {userId: '1'})-[:RATED]->(m:Movie)
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User {userId: '1'})-[:RATED {rating: r}]->(m:Movie)
WHERE r > 8
RETURN m",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes > 100000
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, count(m) AS movies_directed
ORDER BY movies_directed DESC
LIMIT 5
RETURN d.name, movies_directed",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director {name: 'Anthony Stacchi'})-[:DIRECTED]->(m:Movie)
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released < ""2010-01-01"" AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 120 AND m.released > '2000-01-01'
RETURN m",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE exists {
  (p)-[:DIRECTED]->(m)
}
RETURN m.title AS MovieTitle",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'evil exterminator'
RETURN m.title, m.imdbRating",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue < 20000000 AND m.released < '1980-01-01'
RETURN m",Complex Retrieval Queries,recommendations,True,False,False
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.plot CONTAINS 'army'
RETURN DISTINCT g.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User {name: 'Omar Huffman'})-[:RATED]->(m:Movie)
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)
WHERE m.year > 2010
RETURN a.name, count(r) AS roles
ORDER BY roles DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster ENDS WITH 'w5Lctmkc1yah215Luxmci4djaiW.jpg'
RETURN m.title",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)<-[:DIRECTED]-(d:Director)
WHERE d.born > date('1960-01-01')
RETURN DISTINCT u",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (d:Director {name: ""Harold Lloyd""})-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN DISTINCT g.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue > 0
RETURN m.title, m.budget, m.revenue, (toFloat(m.budget) / m.revenue) AS budgetToRevenueRatio
ORDER BY budgetToRevenueRatio DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'English' NOT IN m.languages AND m.budget > 75000000
RETURN m.title AS MovieTitle",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: 'Burchard, Nebraska, USA'})-[:DIRECTED]->(m:Movie)
RETURN m.title AS MovieName",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Comedy'})
RETURN DISTINCT a.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 100000000
RETURN m.title AS MovieName
ORDER BY m.budget DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, count(DISTINCT u) AS userCount
WHERE userCount >= 5
RETURN m
ORDER BY m.year ASC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE u.age < 25
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Comedy'})
WITH u, count(r) AS ratingsCount
ORDER BY ratingsCount DESC
LIMIT 5
RETURN u, ratingsCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.bio IS NOT NULL
RETURN d
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year IS NOT NULL
RETURN m
ORDER BY m.year ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.budget < 50000000
RETURN a
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year >= 2000 AND m.year < 2010 AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Drama'})
WITH u, count(m) AS DramaCount
WHERE exists {
    MATCH (u)-[:RATED]->(m2:Movie)
    WITH count(m2) AS TotalCount, DramaCount
    WHERE DramaCount > TotalCount / 2
}
RETURN u
ORDER BY DramaCount DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor {bornIn: 'France'})-[:ACTED_IN]->(m:Movie)
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.released >= '1990-01-01' AND m.released < '2000-01-01' AND m.imdbRating IS NOT NULL
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: 'USA'})
WITH d, count{(d)-[:DIRECTED]->(:Movie)} AS directedMovies
WHERE directedMovies >= 3
RETURN d
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name IN ['Comedy', 'Action']
WITH a, collect(DISTINCT g.name) AS genres
WHERE ALL(x IN ['Comedy', 'Action'] WHERE x IN genres)
RETURN a
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 1000000000
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {name: 'Steven Spielberg'})-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(m) AS MoviesCount
ORDER BY MoviesCount DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m.title, m.imdbVotes
ORDER BY m.imdbVotes DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, avg(r.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN u.userId, u.name, avgRating",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User {name: 'John Smith'})-[:RATED]->(m:Movie)
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,True,False,False
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.revenue > 500000000
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.imdbRating > 7.0
WITH d, count(m) AS moviesDirected
WHERE moviesDirected >= 5
RETURN d.name, moviesDirected
ORDER BY moviesDirected DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 100000000
RETURN m
ORDER BY m.budget DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.year > 2000
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH a, count(m) AS movies_count
WHERE movies_count > 10
RETURN a.name, movies_count
ORDER BY movies_count DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, count(m) AS movie_count
WHERE movie_count > 20
RETURN u
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (d:Director)
WHERE d.born < date('1950-01-01')
RETURN d
ORDER BY d.born
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot IS NOT NULL
RETURN m
ORDER BY length(m.plot) DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 1000000000
RETURN m",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, m, r ORDER BY u.born ASC
RETURN m.title, m.year, m.imdbRating, collect(r.rating)[..3] AS ratings
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released ENDS WITH ""-12-25""
RETURN m
ORDER BY m.year DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget < 10000000 AND m.revenue > 100000000
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster CONTAINS 'face'
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE d.gender = 'female' AND m.imdbRating IS NOT NULL
RETURN m.title, m.imdbRating
ORDER BY m.imdbRating DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(d:Director)
WITH a, m, count(DISTINCT d) AS numDirectors
WHERE numDirectors >= 3
RETURN a.name, collect(m.title) AS movies
ORDER BY a.name
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH d, count(DISTINCT g) AS genreCount
WHERE genreCount > 3
RETURN d.name, genreCount
ORDER BY genreCount DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime < 90 AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'adventure'
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year > 2010 AND m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE m.released < ""1980-01-01""
RETURN u
ORDER BY r.timestamp
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE count{(u:User)-[:RATED]->(m)} = 5
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE exists{(d)-[:ACTED_IN]->(m)}
RETURN d.name, collect(m.title) AS movies
ORDER BY size(movies) DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(a)
RETURN m.title AS MovieTitle, a.name AS ActorDirector
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.languages
ORDER BY size(m.languages) DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(g) AS genreCount
ORDER BY genreCount DESC
RETURN m.title, genreCount
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Horror'})
WITH u, count(m) AS horrorMovieCount
ORDER BY horrorMovieCount DESC
LIMIT 5
RETURN u, horrorMovieCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.born IS NOT NULL
RETURN a.name, a.born
ORDER BY a.born
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: 'UK'})-[:DIRECTED]->(m:Movie)
RETURN m.title, m.budget
ORDER BY m.budget DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH m, count(DISTINCT u) AS userCount
WHERE userCount > 10
RETURN m
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.imdbRating < 4.0
RETURN d
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)
WHERE r.role IS NOT NULL
RETURN a.name, count(r) AS roles_count
ORDER BY roles_count DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(m.languages) AS LanguageCount
ORDER BY LanguageCount DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name = 'Horror'
WITH d, collect(m) AS horrorMovies
WHERE exists {
    MATCH (d)-[:DIRECTED]->(m2:Movie)-[:IN_GENRE]->(g2:Genre)
    WHERE g2.name = 'Romance'
}
RETURN d.name, count(horrorMovies) AS HorrorMoviesDirected",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.languages
ORDER BY size(m.languages) DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue > 0
RETURN m.title, m.budget, m.revenue, (toFloat(m.budget) / m.revenue) AS budgetToRevenueRatio
ORDER BY budgetToRevenueRatio DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name = 'Comedy'
WITH a, count(DISTINCT m) AS ComedyMovies
WHERE ComedyMovies > 0
MATCH (a)-[:ACTED_IN]->(m2:Movie)-[:IN_GENRE]->(g2:Genre)
WHERE g2.name = 'Drama'
RETURN DISTINCT a.name",Complex Aggregation Queries,recommendations,True,False,False
"MATCH (d:Director {bornIn: ""USA""})-[:DIRECTED]->(m:Movie)
WHERE m.released IS NOT NULL
RETURN m.title, m.released
ORDER BY m.released DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 3
RETURN g.name AS Genre, movieCount",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE r.rating > 7.0
WITH u, count(m) AS moviesRated
WHERE moviesRated > 5
RETURN u",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.countries IS NOT NULL
RETURN m.title, size(m.countries) AS num_countries
ORDER BY num_countries DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,True,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Drama'})
WITH d, count(m) AS movies_count
WHERE movies_count > 1
RETURN d.name, movies_count",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE 'English' IN m.languages
RETURN a.name, a.born
ORDER BY a.born
LIMIT 5",Complex Aggregation Queries,recommendations,True,False,False
"MATCH (m:Movie)
WHERE size((:User)-[:RATED]->(m)) > 1000
RETURN m",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year < 2000 AND m.imdbRating IS NOT NULL
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released STARTS WITH '1995' AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE p.born < date('1900-01-01')
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes > 500000
RETURN m.imdbId",Pathfinding Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE r.timestamp > 1420070400
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 3",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE length(m.plot) > 150
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: 'Burchard, Nebraska, USA'})-[:DIRECTED]->(m:Movie)
RETURN sum(m.revenue) AS TotalRevenue",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'kingdom'
RETURN m",Pathfinding Queries,recommendations,False,False,False
"MATCH (d:Director)
WHERE d.poster CONTAINS 'w440_and_h660_face'
RETURN d",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 150 AND m.runtime < 200
RETURN m",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, size(m.languages) AS num_languages
ORDER BY num_languages DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE NOT EXISTS {
    MATCH (a)-[:ACTED_IN]->(m:Movie)
    WHERE m.year > 2010
}
RETURN a.name",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released STARTS WITH '2014' AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'love' AND m.runtime > 120
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(high:Movie)
WHERE high.budget > 200000000
WITH a
MATCH (a)-[:ACTED_IN]->(low:Movie)
WHERE low.budget < 10000000
RETURN DISTINCT a",Complex Aggregation Queries,recommendations,False,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE exists{(m)-[:WON]->(:Award {name: ""Academy Award""})}
RETURN d.name, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,False
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.released >= '1990-01-01' AND m.released < '2000-01-01'
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(g) AS genreCount
WHERE genreCount > 5
RETURN m",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(DISTINCT g) AS genreCount
ORDER BY genreCount DESC
LIMIT 5
RETURN m.title, genreCount",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year = 2013
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: 'France'})-[:DIRECTED]->(m:Movie)
WITH d, count(m) AS moviesDirected
WHERE moviesDirected >= 2
RETURN d.name, moviesDirected",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director {name: ""Denzel Washington""})-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor)
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE exists {
  (u:User)-[:RATED]->(m)
}
WITH m, count{(u:User)-[:RATED]->(m)} AS ratingsCount
WHERE ratingsCount > 500
RETURN m
ORDER BY m.imdbRating ASC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, m, count(r) AS num_ratings
WHERE num_ratings > 1
RETURN u AS User, m AS Movie, num_ratings",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH m, count(a) AS numActors
ORDER BY numActors DESC
LIMIT 5
RETURN m.title, numActors",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL
RETURN m, abs(m.revenue - m.budget) AS difference
ORDER BY difference ASC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, collect(DISTINCT m.languages) AS languages
WHERE size(languages) > 3
RETURN d.name, languages",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.revenue > 500000000
WITH a, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5
RETURN a.name, movies_count",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year > 2000 AND m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes ASC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)
WHERE m.budget > 100000000
RETURN a.name, count(r.role) AS roles_count
ORDER BY roles_count DESC",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime < 90 AND m.released IS NOT NULL
RETURN m
ORDER BY m.released DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.imdbRating < 4.0
RETURN DISTINCT g.name",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, avg(r.rating) AS avgRating, count(r) AS numRatings
WHERE numRatings >= 3
RETURN u, avgRating
ORDER BY avgRating DESC",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Action'})
WITH d, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 5
RETURN d.name, moviesDirected",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie {title: 'Dracula Untold'})
RETURN u.name",Pathfinding Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH a, COUNT(DISTINCT g) AS genreCount
RETURN a.name AS ActorName, genreCount
ORDER BY genreCount DESC
LIMIT 1",Pathfinding Queries,recommendations,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p)
RETURN m.title AS MovieTitle, p.name AS PersonName",Pathfinding Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie {imdbId: '0829150'})
RETURN a.name AS ActorName, r.role AS Role",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating IS NOT NULL
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, count(u) AS userCount
WHERE userCount > 3
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 120 AND m.released >= '2000-01-01'
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE size(m.languages) > 1
RETURN DISTINCT a.name",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH d, g, count(m) AS movies_count
ORDER BY movies_count DESC
RETURN d.name, g.name, movies_count
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, count(u) AS userCount
WHERE userCount > 1000
RETURN m",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue < m.budget
RETURN m
ORDER BY m.budget DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, count(m) AS movieCount
ORDER BY movieCount ASC
LIMIT 5
RETURN g.name, movieCount",Simple Aggregation Queries,recommendations,False,False,False
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u, count(m) AS movies_rated
ORDER BY movies_rated DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: ""Canada""})-[:DIRECTED]->(m:Movie)
RETURN m
ORDER BY m.year DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 500000000 AND m.imdbRating > 8.0
RETURN m",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.born IS NOT NULL
RETURN d
ORDER BY d.born
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Adventure'})
WITH a, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5
RETURN a.name, movies_count",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE exists {
  MATCH (a)-[:DIRECTED]->(m2:Movie)
}
RETURN DISTINCT a.name",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year = 2014 AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'English' IN m.languages AND 'Japanese' IN m.languages
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 200000000
RETURN m",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH m, avg(r.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 5
RETURN m.title, avgRating",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.bornIn = ""USA""
RETURN d.name, d.born, d.died, d.url, d.imdbId, d.tmdbId",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= '1990-01-01' AND m.released < '2000-01-01' AND m.imdbRating > 7
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
UNWIND m.countries AS country
RETURN country, count(country) AS count
ORDER BY count DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH a, count(m) AS numMovies
WHERE numMovies > 5
RETURN a.name",Pathfinding Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:DIRECTED]->(:Movie)
RETURN DISTINCT a.name
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Adventure'})
RETURN DISTINCT u",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 2 * m.budget
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)
WHERE NOT EXISTS {
    MATCH (u)-[:RATED]->(m2:Movie)-[:IN_GENRE]->(g:Genre {name: 'Sci-Fi'})
}
RETURN DISTINCT u",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= ""2011-01-01"" AND m.released <= ""2016-12-31"" AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Pathfinding Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE size(m.languages) > 2
RETURN d.name, collect(m.title) AS movies",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE (m.revenue + m.budget) > 1000000000
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE r.rating = 5
WITH m, count(u) AS userCount
WHERE userCount > 1
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime < 90 AND m.imdbRating IS NOT NULL
RETURN AVG(m.imdbRating) AS averageRating",Pathfinding Queries,recommendations,False,False,False
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
RETURN m.title AS Movie, count(a) AS NumberOfActors
ORDER BY NumberOfActors DESC
LIMIT 1",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title AS MovieTitle, count{(m)-[:IN_GENRE]->(:Genre)} AS GenreCount",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year = 2014
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Pathfinding Queries,recommendations,False,False,True
"MATCH (a:Actor {bornIn: ""France""})-[:ACTED_IN]->(m:Movie)
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie {title: 'Toy Story'})-[:IN_GENRE]->(g:Genre)
RETURN g.name",Pathfinding Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)
WHERE m.year < 1980
RETURN a.name, count(r) AS roles
ORDER BY roles DESC
LIMIT 1",Pathfinding Queries,recommendations,False,False,False
"MATCH (m:Movie {imdbId: '0114709'})<-[:RATED]-(u:User)
RETURN count(u) AS numberOfUsers",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'English' IN m.languages AND 'French' IN m.languages
RETURN m",Pathfinding Queries,recommendations,False,False,False
"MATCH (d:Director)
WHERE d.bio CONTAINS 'Academy Award'
RETURN d.name, d.bio",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes DESC
LIMIT 3",Pathfinding Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH a, collect(DISTINCT m.countries) AS countries
WHERE size(countries) >= 3
RETURN a.name, countries",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year >= 2010 AND m.year <= 2020
RETURN m.year AS ReleaseYear, count(m) AS NumberOfMovies
ORDER BY ReleaseYear",Pathfinding Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m1:Movie)-[:IN_GENRE]->(g1:Genre {name: 'Comedy'})
MATCH (d)-[:DIRECTED]->(m2:Movie)-[:IN_GENRE]->(g2:Genre {name: 'Drama'})
RETURN DISTINCT d.name",Pathfinding Queries,recommendations,False,False,False
"MATCH (u1:User {userId: '1'})-[:RATED]->(m:Movie)<-[:RATED]-(u2:User {userId: '2'})
RETURN m",Pathfinding Queries,recommendations,False,False,False
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, count(m) AS movieCount
WHERE movieCount > 10
RETURN g.name, movieCount",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:DIRECTED]->(d:Director)
WHERE m.budget > 100000000 AND d.bornIn = ""USA""
RETURN m.title, m.budget, d.name, d.bornIn",Pathfinding Queries,recommendations,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE exists{ (p)-[:ACTED_IN]->(:Movie) }
RETURN m.title AS MovieTitle, m.year AS ReleaseYear
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE d.born > date('1970-01-01')
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(a)
RETURN a.name, count(m) AS moviesDirectedAndActedIn
ORDER BY moviesDirectedAndActedIn DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, collect(DISTINCT m.languages) AS languages
WHERE size(languages) > 3
RETURN d.name, languages",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Horror'})
WHERE m.released STARTS WITH 'December'
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE u.bornIn = 'USA'
RETURN m.title AS Movie, avg(r.rating) AS AverageRating
ORDER BY AverageRating DESC
LIMIT 5",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'friendship' AND m.budget < 20000000
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor)
WHERE m.revenue > 300000000 AND a.bio CONTAINS 'Wikipedia'
RETURN m.title, m.revenue, a.name, a.bio",Pathfinding Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE d.born.year = m.year
RETURN d, m",Pathfinding Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'zombie' AND m.imdbRating > 7
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE exists {
  (m)<-[:RATED]-(u:User {gender: 'male'})
} AND exists {
  (m)<-[:RATED]-(u:User {gender: 'female'})
}
RETURN m",Pathfinding Queries,recommendations,False,True,False
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.revenue > 1000000000
RETURN a.name, collect(m.title) AS movies",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.title STARTS WITH 'The' AND m.poster ENDS WITH 'jpg'
RETURN m",Pathfinding Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.imdbVotes > 10000 AND m.runtime < 90
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, count(m) AS movies_rated
WHERE movies_rated > 50
RETURN u",Pathfinding Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.imdbRating > 8
WITH d, count(m) AS moviesCount
ORDER BY moviesCount DESC
RETURN d.name, moviesCount",Pathfinding Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE 'English' IN m.languages AND 'French' IN m.languages
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating IS NOT NULL AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.imdbRating ASC, m.revenue DESC
LIMIT 5",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(g) AS genreCount
WHERE genreCount > 1
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL AND m.revenue > 100000000
RETURN m
ORDER BY m.runtime ASC
LIMIT 3",Pathfinding Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE a.born IS NOT NULL AND m.released IS NOT NULL AND toString(a.born) = m.released
RETURN a.name AS ActorName, m.title AS MovieTitle, m.released AS ReleaseDate",Pathfinding Queries,recommendations,True,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE NOT exists {
  MATCH (m)-[r:RATED]->()
  WHERE r.rating < 6
}
RETURN d",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget > 200000000 AND m.revenue < 500000000
RETURN m",Pathfinding Queries,recommendations,False,False,False
"MATCH (u:User {name: 'John'})-[:RATED]->(m:Movie)
WITH m, count(u) AS popularity
ORDER BY popularity DESC
LIMIT 3
RETURN m.title, m.url, popularity",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.imdbRating = 6.5
RETURN g.name AS Genre",Pathfinding Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:DIRECTED]->(m:Movie)
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:DIRECTED]-(d:Director)
WHERE d.born > date('1960-01-01') AND m.revenue > 100000000
RETURN m.title, m.revenue, d.name, d.born",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.languages IS NOT NULL
RETURN m.title, m.languages
ORDER BY size(m.languages) DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.imdbRating > 8.0
RETURN d.name, collect(m.title) AS movies
ORDER BY m.imdbRating DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= '1990-01-01' AND m.released < '2000-01-01' AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor {bornIn: 'France'})-[:ACTED_IN]->(m:Movie)
WITH a, count(m) AS movies_count
WHERE movies_count > 1
RETURN a.name, movies_count
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u, count(m) AS movies_rated
ORDER BY movies_rated DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.languages
ORDER BY size(m.languages) DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,False
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(m) AS MovieCount
ORDER BY MovieCount DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.year < 2000
RETURN m
ORDER BY m.budget DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
RETURN d.name, count(m) AS movies_directed
ORDER BY movies_directed DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating IS NOT NULL
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: ""Thriller""})
MATCH (a:Actor)-[:ACTED_IN]->(m)
WHERE a.bornIn = ""Canada""
RETURN m.title AS MovieTitle, collect(a.name) AS CanadianActors",Pathfinding Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE r.rating > 8
WITH m, count(r) AS ratingsCount
WHERE ratingsCount >= 10
RETURN m",Pathfinding Queries,recommendations,False,True,False
"MATCH (m:Movie)
WHERE m.revenue = 50000000
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Pathfinding Queries,recommendations,False,False,False
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(d:Director)
WITH a, m, count(DISTINCT d) AS numDirectors
WHERE numDirectors >= 2
RETURN DISTINCT a.name AS ActorName",Pathfinding Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.plot CONTAINS 'evil'
RETURN d.name, m.title",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size(m.languages) > 5
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Sci-Fi'})
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= '2000-01-01' AND m.released < '2010-01-01' AND m.budget IS NOT NULL
RETURN m
ORDER BY m.budget DESC
LIMIT 3",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size(m.languages) >= 3
RETURN m",Pathfinding Queries,recommendations,False,False,False
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE r.rating = 5.0
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: ""Nebraska""})-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor)
RETURN DISTINCT a.name AS ActorName, collect(m.title) AS Movies",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.title CONTAINS 'war' AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Pathfinding Queries,recommendations,False,False,False
"MATCH (m:Movie)
RETURN m.title, m.languages
ORDER BY size(m.languages) DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.budget > 100000000
WITH a, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5
RETURN a.name, movies_count",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, count(DISTINCT m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 5
RETURN d.name, moviesDirected",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbId STARTS WITH '07'
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:DIRECTED]->(d:Director)
WHERE d.bio IS NOT NULL
RETURN m.title AS MovieTitle, d.name AS DirectorName, d.bio AS Biography
ORDER BY size(d.bio) DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.runtime > 180
RETURN d
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH m, count(DISTINCT a.bornIn) AS diversity
ORDER BY diversity DESC
RETURN m.title, diversity
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE size(split(d.bio, ' ')) > 500
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE a.bornIn = 'USA'
WITH m, count(a) AS numActors
ORDER BY numActors DESC
LIMIT 5
RETURN m.title, numActors",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE exists{(p)-[:ACTED_IN]->(m)}
RETURN m.title AS MovieTitle, p.name AS PersonName
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,False
"MATCH (d:Director)
WHERE d.born IS NOT NULL AND d.died IS NULL
RETURN d
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(g) AS genreCount
ORDER BY genreCount DESC
LIMIT 5
RETURN m.title, genreCount",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster IS NOT NULL AND m.tmdbId IS NOT NULL AND m.imdbId IS NULL
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size(m.languages) > 1
RETURN m.title, m.plot, m.languages
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE m.budget > 200000000
RETURN u
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,False
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, min(u.timestamp) AS firstRatingTimestamp
WHERE m.released IS NOT NULL
WITH m, firstRatingTimestamp, date(m.released) AS releaseDate
WITH m, firstRatingTimestamp, releaseDate, duration.inDays(releaseDate, datetime({epochSeconds: firstRatingTimestamp}).date).days AS gap
ORDER BY gap ASC
RETURN m.title, m.released, firstRatingTimestamp, gap
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE a.born IS NULL
RETURN a.name, a.url, m.title
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d1:Director)-[:DIRECTED]->(m:Movie)<-[:DIRECTED]-(d2:Director)
WHERE d1 <> d2
RETURN d1.name AS Director1, d2.name AS Director2, m.title AS Movie
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: ""Nebraska""})-[:DIRECTED]->(m:Movie)
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m.title, m.imdbVotes
ORDER BY m.imdbVotes DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)
WHERE r.role CONTAINS ""uncredited""
RETURN a.name, count(r) AS uncreditedRoles
ORDER BY uncreditedRoles DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster IS NOT NULL
RETURN m.title, m.poster
ORDER BY m.poster DESC
LIMIT 5",Simple Aggregation Queries,recommendations,True,False,False
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE exists {
    MATCH (a)-[:DIRECTED]->(m)
}
RETURN a.name, collect(m.title) AS movies
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[r:RATED]->()
WHERE m.year >= 2000 AND r.rating < 5
RETURN m
ORDER BY m.released
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.died >= date('2000-01-01')
RETURN a
ORDER BY a.died ASC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.budget < 5000000
RETURN g.name AS Genre",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster CONTAINS 'face' AND m.imdbRating > 8
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'love' AND m.released ENDS WITH '-02-14'
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(d)
RETURN d.name, m.title",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: ""Comedy""})
MATCH (a:Actor)-[:ACTED_IN]->(m)
WHERE a.bornIn = ""USA""
RETURN m.title AS MovieTitle, collect(a.name) AS Actors",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size((:User)-[:RATED]->(m)) > 1000
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.revenue > 500000000
RETURN g.name AS Genre, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year < 2000 AND m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes DESC
LIMIT 3",Pathfinding Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.budget > 100000000
WITH d, count(m) AS moviesDirected
WHERE moviesDirected >= 3
RETURN d.name, moviesDirected",Pathfinding Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.imdbRating > 7
WITH a, count(m) AS movies_count
WHERE movies_count > 1
RETURN a.name, movies_count",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= '1990-01-01' AND m.released < '2000-01-01'
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Pathfinding Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: 'France'})-[:DIRECTED]->(m:Movie)
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 120 AND m.year > 2010
RETURN m",Pathfinding Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.runtime IS NOT NULL
WITH d, sum(m.runtime) AS total_runtime
ORDER BY total_runtime DESC
LIMIT 5
RETURN d.name, total_runtime",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'evil'
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.released ENDS WITH '-12-25'
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot IS NOT NULL
RETURN m.title, size([c IN split(m.plot, '""') WHERE c <> '']) / 2 AS quote_count
ORDER BY quote_count DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie), (p)-[:DIRECTED]->(m)
RETURN m.title AS MovieTitle, p.name AS PersonName
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
WHERE m.released IS NOT NULL AND m.year = toInteger(substring(m.released, 0, 4))
WITH m, count(u) AS ratingsCount
ORDER BY ratingsCount DESC
LIMIT 5
RETURN m.title, m.year, ratingsCount",Simple Aggregation Queries,recommendations,True,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH m, count(DISTINCT d) AS numDirectors
ORDER BY numDirectors DESC
RETURN m.title, numDirectors
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.imdbRating IS NOT NULL
WITH d, AVG(m.imdbRating) AS avgRating
ORDER BY avgRating DESC
LIMIT 5
RETURN d.name, avgRating",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: ""Adventure""})
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(:Movie)
WHERE d.bio IS NULL
RETURN d
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year IS NOT NULL
RETURN m
ORDER BY m.year ASC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating > 7.0 AND m.budget IS NOT NULL
RETURN m
ORDER BY m.budget ASC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH d, count(DISTINCT g) AS genreCount
WHERE genreCount > 3
RETURN d.name, genreCount
ORDER BY genreCount DESC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year > 2000
RETURN m
ORDER BY m.runtime DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size((:User)-[:RATED]->(m)) = 3
RETURN m
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, AVG(r.rating) AS avgRating, COUNT(m) AS numMovies
WHERE numMovies >= 20
RETURN u.userId, u.name, avgRating
ORDER BY avgRating DESC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes > 100000
RETURN m
ORDER BY m.imdbVotes DESC
LIMIT 5",Verbose query,recommendations,False,False,False
"MATCH (d:Director)-[:ACTED_IN]->(m:Movie)
RETURN d.name, collect(m.title) AS movies
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.languages, size(m.languages) AS num_languages
ORDER BY num_languages DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.imdbRating IS NOT NULL
WITH g.name AS Genre, AVG(m.imdbRating) AS AvgRating
RETURN Genre, AvgRating
ORDER BY AvgRating DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, AVG(r.rating) AS avgRating
WHERE avgRating < 3
RETURN u
LIMIT 3",Verbose query,recommendations,False,False,False
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.revenue > 500000000
RETURN a.name, a.url
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE a.born > date('1980-01-01')
WITH a, count(m) AS movies_count
WHERE movies_count > 5
RETURN a.name, a.born, movies_count
ORDER BY a.born
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL AND m.budget IS NOT NULL AND m.revenue / m.budget > 5
RETURN m
ORDER BY m.revenue / m.budget DESC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
RETURN d.name, count(m) AS directedMovies
ORDER BY directedMovies DESC
LIMIT 5",Verbose query,recommendations,False,False,False
"MATCH (m:Movie)
WHERE 'English' IN m.languages AND 'French' IN m.languages
RETURN m
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name IN ['Comedy', 'Drama']
WITH a, collect(DISTINCT g.name) AS genres
WHERE ALL(x IN ['Comedy', 'Drama'] WHERE x IN genres)
RETURN a.name
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating > 8
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (d:Director {bornIn: 'France'})-[:DIRECTED]->(m:Movie)
RETURN m
LIMIT 3",Verbose query,recommendations,True,False,False
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, count(u) AS userCount
WHERE userCount > 500000
RETURN m
ORDER BY userCount DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH a, count(m) AS movies_count
WHERE movies_count > 10
RETURN a.name, movies_count
ORDER BY movies_count DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= '1990-01-01' AND m.released < '2000-01-01'
RETURN m
ORDER BY m.released
LIMIT 5",Verbose query,recommendations,False,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE d.bornIn = ""Nebraska, USA""
RETURN m.title, m.year, m.imdbRating
ORDER BY m.imdbRating DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH m, count(a) AS numActors
ORDER BY numActors DESC
LIMIT 3
RETURN m.title, numActors",Verbose query,recommendations,True,False,False
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, count(m) AS movieCount
WHERE movieCount > 50
RETURN g.name AS Genre, movieCount
ORDER BY movieCount DESC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.countries IS NOT NULL
RETURN m.title, size(m.countries) AS num_countries
ORDER BY num_countries DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE length(a.bio) > 1000
WITH a, count(m) AS movies_count
WHERE movies_count > 5
RETURN a.name, a.bio, movies_count
ORDER BY movies_count DESC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.runtime < 90
WITH d, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 5
RETURN d.name, moviesDirected",Verbose query,recommendations,False,False,True
"MATCH (a:Actor)-[:DIRECTED]->(m:Movie)
RETURN m
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE count{(u:User)-[:RATED]->(m)} = 5
RETURN m
LIMIT 3",Verbose query,recommendations,False,False,False
"MATCH (m:Movie)-[:DIRECTED]->(d:Director)
WHERE d.bio IS NOT NULL
RETURN m.title, d.name, d.bio
ORDER BY size(d.bio) DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.poster IS NULL
RETURN a
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (oldest:Movie), (newest:Movie)
WHERE oldest.year = (SELECT min(m.year) FROM Movie m)
  AND newest.year = (SELECT max(m.year) FROM Movie m)
MATCH (u:User)-[:RATED]->(oldest), (u)-[:RATED]->(newest)
RETURN u
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(g) AS genreCount
ORDER BY genreCount DESC
LIMIT 5
RETURN m.title, genreCount",Verbose query,recommendations,False,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name IN ['Comedy', 'Drama']
WITH d, collect(DISTINCT g.name) AS genresDirected
WHERE ALL(genre IN ['Comedy', 'Drama'] WHERE genre IN genresDirected)
RETURN d
LIMIT 3",Verbose query,recommendations,True,False,False
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue > 0
RETURN m.title, m.budget, m.revenue, (toFloat(m.budget) / m.revenue) AS budgetToRevenueRatio
ORDER BY budgetToRevenueRatio DESC
LIMIT 3",Verbose query,recommendations,True,False,False
"MATCH (m:Movie)
WHERE m.year IS NOT NULL
RETURN m
ORDER BY m.year ASC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'adventure'
RETURN m
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (a:Actor {bornIn: ""France""})-[:ACTED_IN]->(m:Movie)
WITH a, count(m) AS movies_count
WHERE movies_count > 20
RETURN a.name, movies_count
ORDER BY movies_count DESC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget < 10000000 AND m.revenue > 100000000
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.countries IS NOT NULL
RETURN m.title, m.countries, size(m.countries) AS country_count
ORDER BY country_count DESC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.runtime > 180
WITH d, count(m) AS movies_count
ORDER BY movies_count DESC
LIMIT 3
RETURN d.name, movies_count",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= date().year - 5
RETURN m
ORDER BY m.released DESC
LIMIT 5",Verbose query,recommendations,False,False,False
"MATCH (m:Movie)
WHERE 'English' NOT IN m.languages AND m.imdbRating > 7
RETURN m
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (high:Movie)
WHERE high.revenue = (SELECT max(m.revenue) FROM Movie m)
WITH high
MATCH (low:Movie)
WHERE low.revenue = (SELECT min(m.revenue) FROM Movie m)
WITH high, low
MATCH (actor:Actor)-[:ACTED_IN]->(high)
MATCH (actor)-[:ACTED_IN]->(low)
RETURN actor.name
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating IS NOT NULL AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.imdbRating ASC, m.revenue DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u, count(m) AS movies_rated
ORDER BY movies_rated DESC
LIMIT 3",Verbose query,recommendations,True,False,False
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year > 2010 AND m.budget > 100000000
RETURN m
ORDER BY m.year ASC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (d:Director {bornIn: ""USA""})
RETURN d
ORDER BY d.born DESC
LIMIT 3",Verbose query,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH d, count(DISTINCT g) AS genreCount
WHERE genreCount > 3
RETURN d.name, genreCount
ORDER BY genreCount DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size(split(m.plot, ' ')) > 100
RETURN m
ORDER BY size(split(m.plot, ' ')) DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.imdbRating > 7.5
WITH g, avg(m.imdbRating) AS avgRating
ORDER BY avgRating DESC
RETURN g.name, avgRating
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= '2011-01-01' AND m.budget IS NOT NULL
RETURN m
ORDER BY m.budget DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(:Movie)
WHERE a.born <= date('1900-12-31')
RETURN a
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'English' NOT IN m.languages AND m.imdbRating > 7.0
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.runtime IS NOT NULL
WITH d, sum(m.runtime) AS total_runtime
ORDER BY total_runtime DESC
LIMIT 3
RETURN d.name AS director, total_runtime",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH m, count(a) AS num_actors
ORDER BY num_actors DESC
LIMIT 5
RETURN m.title, num_actors",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, AVG(r.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN u.userId, u.name, avgRating",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 500000000
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(DISTINCT g) AS genreCount
ORDER BY genreCount DESC
LIMIT 3
RETURN m.title, genreCount",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: ""USA""})-[:DIRECTED]->(m:Movie)
RETURN m.title AS MovieTitle, m.year AS ReleaseYear
ORDER BY m.year DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE a.poster IS NOT NULL
WITH a, count(m) AS movies_count
WHERE movies_count >= 2
RETURN a.name, a.poster, movies_count
ORDER BY movies_count DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)
WITH m, count(DISTINCT u) AS userCount
ORDER BY userCount DESC
LIMIT 5
RETURN m.title, userCount",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH g, count(m) AS movieCount
ORDER BY movieCount ASC
LIMIT 3
RETURN g.name, movieCount",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime < 90 AND m.imdbRating > 8.0
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.imdbRating IS NOT NULL
WITH a, avg(m.imdbRating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN a.name, avgRating",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'adventure'
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE d.died > date('2000-01-01')
WITH d, count(m) AS moviesDirected
WHERE moviesDirected > 2
RETURN d.name, d.died, moviesDirected
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN m.title, m.released, collect(g.name) AS genres
ORDER BY m.released DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)
WHERE m.year < 2000
RETURN u
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.languages IS NOT NULL
RETURN m.title, m.languages, size(m.countries) AS num_countries
ORDER BY num_countries DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.budget > 100000000
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH a, avg(m.imdbRating) AS avgRating, count(m) AS moviesCount
WHERE moviesCount > 3
RETURN a.name, avgRating
ORDER BY avgRating ASC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (u1:User)-[r1:RATED]->(m:Movie)<-[r2:RATED]-(u2:User)
WHERE u1 <> u2 AND r1.rating <> r2.rating
RETURN u1, u2, m
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.runtime > 150
RETURN m
ORDER BY m.runtime DESC
LIMIT 5",Verbose query,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE m.imdbRating < 5.0
WITH u, count(m) AS movies_rated
ORDER BY movies_rated DESC
LIMIT 3
RETURN u.userId, u.name, movies_rated",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating > 6.0 AND m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.imdbVotes IS NOT NULL
WITH a, sum(m.imdbVotes) AS totalVotes
ORDER BY totalVotes DESC
LIMIT 3
RETURN a.name, totalVotes",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Action'})
WHERE size(m.languages) IS NOT NULL
RETURN m.title, size(m.languages) AS num_languages
ORDER BY num_languages DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.budget > 200000000
WITH d, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 3
RETURN d.name, moviesDirected",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'love'
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, AVG(r.rating) AS avgRating
WHERE avgRating < 3.0
RETURN u
ORDER BY avgRating ASC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (p:Person)-[:DIRECTED]->(m:Movie)
WHERE NOT (p:Director)
RETURN m.title AS MovieTitle, m.released AS ReleaseDate
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= ""2011-01-01"" AND m.released <= ""2016-12-31""
RETURN m.title, m.imdbVotes
ORDER BY m.imdbVotes DESC
LIMIT 3",Complex Aggregation Queries,recommendations,True,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH m, count(DISTINCT d) AS numDirectors
ORDER BY numDirectors DESC
LIMIT 5
RETURN m.title, numDirectors",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE a.died IS NOT NULL
WITH a, count(m) AS movies_count
WHERE movies_count > 2
RETURN a.name, a.died, movies_count
ORDER BY movies_count DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size(m.countries) = 1 AND size(m.languages) = 1
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.runtime > 120
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(:Movie)
WHERE d.born IS NOT NULL
RETURN d
ORDER BY d.born
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH a, count(DISTINCT g) AS genreCount
ORDER BY genreCount DESC
LIMIT 3
RETURN a.name, genreCount",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE NOT 'English' IN m.languages AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL AND m.budget IS NOT NULL AND m.budget > 0
RETURN m.title, m.revenue, m.budget, m.revenue / m.budget AS revenueToBudgetRatio
ORDER BY revenueToBudgetRatio DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,False
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
WHERE exists {
  MATCH (p)-[:DIRECTED]->(m)
}
RETURN m.title AS MovieTitle, collect(p.name) AS ActorDirectors
ORDER BY m.imdbRating DESC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor)
WITH d, count(DISTINCT a) AS distinctActors
ORDER BY distinctActors DESC
RETURN d.name, distinctActors
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WITH m, count(g) AS genreCount
ORDER BY genreCount DESC
LIMIT 5
RETURN m.title, genreCount",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating < 5.0 AND m.budget > 50000000
RETURN m
ORDER BY m.imdbRating ASC
LIMIT 5",Complex Aggregation Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.year IS NOT NULL
RETURN m
ORDER BY m.year ASC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Complex Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, count(DISTINCT m.languages) AS num_languages
WHERE num_languages > 5
RETURN d.name, num_languages
ORDER BY num_languages DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.born > date('1970-01-01')
RETURN d",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'English' IN m.languages AND 'Spanish' IN m.languages
RETURN m",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE r.rating < 3.0
RETURN u",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'English' IN m.languages AND m.budget > 50000000
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)
WITH g, count(m) AS movieCount
WHERE movieCount < 10
RETURN g.name AS Genre, movieCount",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie), (p)-[:DIRECTED]->(m)
RETURN m.title AS MovieTitle, p.name AS PersonName",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released < ""1990-01-01"" AND m.imdbRating IS NOT NULL
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor {bornIn: 'USA'})-[:ACTED_IN]->(m:Movie)
WITH a, count(m) AS movies_count
WHERE movies_count >= 2
RETURN a.name, movies_count",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.budget > 100000000
RETURN DISTINCT g.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, count(u) AS userCount
WHERE userCount > 1000
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, count(m) AS movieCount
WHERE movieCount > 50
RETURN u",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.imdbRating > 8.0 AND m.year >= 2000 AND m.year < 2010
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, count(m) AS moviesDirected
WHERE moviesDirected > 3
RETURN d.name, moviesDirected",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.revenue > 500000000
RETURN a.name, m.title, m.revenue",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= '2011-01-01' AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (d:Director {bornIn: 'France'})-[:DIRECTED]->(m:Movie)
RETURN m",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.runtime > 120 AND m.runtime < 180
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.runtime < 80
WITH d, count(m) AS moviesCount
ORDER BY moviesCount DESC
LIMIT 3
RETURN d.name, moviesCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'magic'
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, count(u) AS userCount
WHERE userCount > 1000
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name IN ['Animation', 'Adventure']
WITH a, count(DISTINCT g) AS genreCount
WHERE genreCount = 2
RETURN a.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.imdbRating IS NOT NULL
WITH g.name AS genre, avg(m.imdbRating) AS avgRating
RETURN genre, avgRating
ORDER BY avgRating ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > m.budget
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE m.released IS NOT NULL AND r.timestamp = datetime(m.released).epochMillis
RETURN u, r, m",Complex Retrieval Queries,recommendations,False,True,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE exists{(m)-[:WON]->(:Award {name: 'Oscar'})}
RETURN d",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size(m.countries) > 5
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)
WHERE m.budget > 200000000
RETURN a.name, collect(m.title) AS movies",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE count{(u:User)-[:RATED]->(m)} = 5
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime IS NOT NULL
RETURN m
ORDER BY m.runtime ASC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH d, count(DISTINCT g) AS genreCount
RETURN d.name AS Director, genreCount
ORDER BY genreCount DESC
LIMIT 1",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE NOT EXISTS {
    MATCH (a)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Action'})
}
RETURN a",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released ENDS WITH '-02-29'
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster CONTAINS 'face'
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (p:Person)-[:ACTED_IN]->(m:Movie), (p)-[:DIRECTED]->(m)
RETURN m.title AS MovieTitle, p.name AS PersonName",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE r.rating = 5.0
WITH m, count(u) AS userCount
WHERE userCount > 10
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue > 0
RETURN m.title, m.budget, m.revenue, (toFloat(m.budget) / m.revenue) AS budgetToRevenueRatio
ORDER BY budgetToRevenueRatio DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Sci-Fi'})
RETURN d",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
RETURN a.name, count(m) AS movies_count
ORDER BY movies_count DESC",Complex Retrieval Queries,recommendations,False,True,False
"MATCH (m:Movie)
WHERE m.runtime < 100 AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie {title: ""Toy Story""})-[:IN_GENRE]->(g:Genre)
RETURN g.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'war'
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (actor:Actor)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(director:Director)
WHERE actor.bornIn = director.bornIn
RETURN actor.name AS ActorName, movie.title AS MovieTitle, director.name AS DirectorName",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.languages, size(m.languages) AS language_count
ORDER BY language_count DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE exists {
    (d)-[:ACTED_IN]->(:Movie)
}
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.bio CONTAINS 'Academy Award'
RETURN d.name, d.bio",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime > 90 AND m.budget IS NOT NULL
RETURN m
ORDER BY m.budget ASC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u1:User)-[r1:RATED]->(m:Movie)<-[r2:RATED]-(u2:User)
WHERE u1 <> u2 AND r1.rating <> r2.rating
RETURN u1, u2, m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)
WHERE a.born <= date(datetime({epochMillis: apoc.date.parse(m.released, 'ms', 'yyyy-MM-dd')}) - duration({years: 50}))
RETURN m.title AS MovieTitle, m.released AS ReleaseDate, a.name AS ActorName, a.born AS ActorBirthDate
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, count(DISTINCT m.languages) AS languageDiversity
ORDER BY languageDiversity DESC
LIMIT 3
RETURN d.name, languageDiversity",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:DIRECTED]->(m:Movie)
RETURN m.title AS MovieTitle, m.released AS ReleaseDate
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH u, COUNT(DISTINCT g) AS genreCount
ORDER BY genreCount DESC
LIMIT 3
RETURN u, genreCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE ALL(lang IN m.languages WHERE lang <> 'English')
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.imdbRating IS NOT NULL
WITH a, avg(m.imdbRating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN a.name, avgRating",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.budget > 100000000
RETURN g.name, count(m) AS movie_count
ORDER BY movie_count DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'adventure'
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, count(DISTINCT m.countries) AS countriesCount
ORDER BY countriesCount DESC
LIMIT 3
RETURN d.name, countriesCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH m, AVG(u.age) AS avgAge
ORDER BY avgAge ASC
RETURN m.title AS MovieTitle, avgAge
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Sci-Fi'})
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.budget > 50000000
RETURN a.name, a.url
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Adventure'})
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH m, count(a) AS numActors
ORDER BY numActors DESC
RETURN m.title, numActors
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year % 4 = 0 AND (m.year % 100 <> 0 OR m.year % 400 = 0)
RETURN m
ORDER BY m.year DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(:Movie)<-[:ACTED_IN]-(a:Actor)
WITH u, count(DISTINCT a) AS num_actors
ORDER BY num_actors DESC
LIMIT 3
RETURN u.userId, u.name, num_actors",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'war'
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,True,False,False
"MATCH (m:Movie)
WHERE size(m.languages) > 1 AND size(m.countries) = 1
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)
WHERE m.runtime IS NOT NULL
WITH a, sum(m.runtime) AS totalScreenTime
ORDER BY totalScreenTime DESC
LIMIT 3
RETURN a.name, totalScreenTime",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE count{(u:User)-[:RATED]->(m)} = 5
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.revenue IS NOT NULL
RETURN d.name, sum(m.revenue) AS totalRevenue
ORDER BY totalRevenue DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.revenue IS NOT NULL
RETURN g.name AS Genre, AVG(m.revenue) AS AverageRevenue
ORDER BY AverageRevenue DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > m.budget
RETURN m
ORDER BY m.revenue DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'family'
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name = 'Superhero'
RETURN a.name
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE exists{ (m)-[:WON]->(:Award) }
RETURN d.name, collect(m.title) AS movies
ORDER BY count(m) DESC
LIMIT 3",Simple Retrieval Queries,recommendations,True,False,False
"MATCH (m:Movie)
WHERE m.title ENDS WITH 'End'
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster CONTAINS 'moon'
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH a, COUNT(DISTINCT g) AS genreCount
ORDER BY genreCount DESC
LIMIT 3
RETURN a.name, genreCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH u, count(DISTINCT g) AS genreCount
ORDER BY genreCount DESC
LIMIT 3
RETURN u, genreCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue < 1000
RETURN m
ORDER BY m.revenue ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS ""twist""
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,True,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.runtime IS NOT NULL
WITH d, avg(m.runtime) AS avgRuntime
ORDER BY avgRuntime DESC
LIMIT 3
RETURN d.name, avgRuntime",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released STARTS WITH '01-' 
RETURN m
ORDER BY m.released
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name IN ['Action', 'Romance']
WITH a, count(DISTINCT g) AS genresCount
WHERE genresCount = 2
RETURN a.name, count(DISTINCT m) AS moviesCount
ORDER BY moviesCount DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, avg(m.budget) AS avgBudget
ORDER BY avgBudget DESC
LIMIT 3
RETURN u.userId, u.name, avgBudget",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'natural disaster'
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor)
WITH d, count(DISTINCT a) AS actors_count
ORDER BY actors_count DESC
RETURN d.name, actors_count
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL AND m.budget IS NOT NULL
RETURN m.title, m.revenue, m.budget, (m.revenue - m.budget) AS profit
ORDER BY profit DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE a.born < date('1900-01-01')
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,False
"MATCH (u:User)-[:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH u, collect(DISTINCT g) AS genres
WHERE size(genres) = size((:Genre))
RETURN u
ORDER BY count(DISTINCT m) DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.runtime > 120
WITH g, count(m) AS movieCount
ORDER BY movieCount DESC
LIMIT 3
RETURN g.name, movieCount",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE a.bio CONTAINS 'model'
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size(m.countries) > 5
RETURN m
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, m.year AS year, count(m) AS movies_count
ORDER BY movies_count DESC
RETURN d.name, year, movies_count
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating > 7 AND m.imdbVotes > 100000
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released IS NOT NULL AND date(m.released).dayOfWeek = 5
RETURN m
ORDER BY m.released DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, avg(u.rating) AS avgUserRating
RETURN m.title, m.imdbRating, avgUserRating, abs(m.imdbRating - avgUserRating) AS ratingDifference
ORDER BY ratingDifference ASC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name = 'Historical'
RETURN a.name
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m
ORDER BY m.year ASC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, collect(DISTINCT m.languages) AS languages
WHERE size(languages) > 1
RETURN d.name, languages
ORDER BY size(languages) DESC
LIMIT 3",Simple Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'love'
RETURN m",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.countries IS NOT NULL
RETURN m.title, size(m.countries) AS num_countries
ORDER BY num_countries DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.year < 1950
RETURN a
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.budget > 50000000
WITH d, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 5
RETURN d.name, moviesDirected",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'friendship'
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.poster IS NOT NULL
RETURN a.name, a.poster
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director {bornIn: 'France'})-[:DIRECTED]->(m:Movie)
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes ASC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, AVG(r.rating) AS avgRating
ORDER BY avgRating DESC
LIMIT 3
RETURN u AS User, avgRating AS AverageRating",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'English' IN m.languages AND 'French' IN m.languages
RETURN m
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE d.born > date('1970-01-01')
RETURN m.title, m.released
ORDER BY m.released DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL AND m.budget IS NOT NULL AND m.revenue / m.budget > 2
RETURN m
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:ACTED_IN]->(m:Movie)
RETURN d.name, collect(m.title) AS movies
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.languages IS NOT NULL
RETURN m.title, m.languages, size(m.languages) AS num_languages
ORDER BY num_languages DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m.title, count(u) AS num_users
ORDER BY num_users DESC
LIMIT 3",Simple Aggregation Queries,recommendations,True,False,False
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH a, count(m) AS movies_count
WHERE movies_count > 10
RETURN a.name, movies_count
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
RETURN g.name AS Genre, count(m) AS NumberOfMovies
ORDER BY NumberOfMovies DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= '2011-01-01' AND m.budget > 100000000
RETURN m
LIMIT 5",Simple Aggregation Queries,recommendations,False,True,False
"MATCH (d:Director)
WHERE d.bornIn = ""USA""
RETURN d
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
RETURN m.title, m.runtime
ORDER BY m.runtime DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN u, count(m) AS movies_rated
ORDER BY movies_rated DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.imdbRating IS NOT NULL
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WHERE m.released IS NOT NULL AND r.timestamp = date(m.released).epochSeconds
RETURN u
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor {bornIn: ""France""})
RETURN a
LIMIT 3",Simple Aggregation Queries,recommendations,True,False,False
"MATCH (m:Movie)
WHERE m.plot IS NOT NULL
RETURN m
ORDER BY length(m.plot) DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(a)
RETURN DISTINCT a.name
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.tmdbId IS NOT NULL AND a.imdbId IS NULL
RETURN a
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE a.born < date('1950-01-01')
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot IS NOT NULL
RETURN m
ORDER BY size(m.plot) DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE size(m.languages) = 3
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, m ORDER BY m.year ASC
WITH d, collect(m)[0] AS firstMovie
MATCH (firstMovie)-[:IN_GENRE]->(g:Genre)
WHERE d.bornIn IS NOT NULL AND exists{(d)-[:DIRECTED]->(:Movie)-[:IN_GENRE]->(:Genre {name: d.bornIn})}
RETURN d.name, d.bornIn, firstMovie.title, g.name
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
RETURN m.title, avg(r.rating) AS average_rating
ORDER BY average_rating ASC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.died > date('2000-01-01')
RETURN d
ORDER BY d.died ASC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, avg(r.rating) AS avgRating, count(u) AS numUsers
WHERE numUsers >= 10
RETURN m.title, avgRating
ORDER BY avgRating DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue < 10000000 AND m.released IS NOT NULL
RETURN m
ORDER BY m.released DESC
LIMIT 3",Simple Aggregation Queries,recommendations,True,False,False
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH a, COUNT(DISTINCT g) AS genreCount
ORDER BY genreCount DESC
LIMIT 5
RETURN a.name, genreCount",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH u, count(DISTINCT g) AS genreCount
ORDER BY genreCount DESC
LIMIT 5
RETURN u, genreCount",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster IS NOT NULL
RETURN m
ORDER BY m.tmdbId
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH m, count(d) AS numDirectors
WHERE numDirectors > 1
RETURN m
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE count{(u:User)-[:RATED]->(m)} = 5
RETURN m
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.runtime < 90 AND m.imdbRating > 7
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE m.year >= 1990 AND m.year < 2000
WITH d, count(m) AS moviesDirected
ORDER BY moviesDirected DESC
LIMIT 5
RETURN d.name, moviesDirected",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH m, count(a) AS numActors
ORDER BY numActors DESC
LIMIT 5
RETURN m.title, numActors",Simple Aggregation Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.budget IS NOT NULL AND m.revenue IS NOT NULL AND m.revenue > 0
RETURN m.title, m.budget, m.revenue, (toFloat(m.budget) / m.revenue) AS budgetToRevenueRatio
ORDER BY budgetToRevenueRatio DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,False
"MATCH (d:Director)
WHERE d.bio IS NOT NULL
RETURN d.name, d.bio
ORDER BY length(d.bio) DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.imdbRating > 8.5
RETURN m
ORDER BY m.imdbRating DESC
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.year = 2014
RETURN m.title, m.revenue
ORDER BY m.revenue DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:ACTED_IN]->(m:Movie)
WHERE exists{ (d)-[:DIRECTED]->(m) }
RETURN m.title AS MovieTitle, m.movieId AS MovieID
LIMIT 3",Simple Aggregation Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m.title, m.imdbVotes
ORDER BY m.imdbVotes DESC
LIMIT 5",Simple Aggregation Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE exists {
  MATCH (d)-[:ACTED_IN]->(:Movie)
}
RETURN m",Complex Retrieval Queries,recommendations,True,False,False
"MATCH (m:Movie)
RETURN m
ORDER BY m.runtime DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)-[:DIRECTED_BY]->(d:Director {bornIn: 'UK'})
WHERE exists{(m)-[:WON_AWARD]->()}
RETURN m.title AS MovieTitle, d.name AS DirectorName",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.poster CONTAINS ""blue""
RETURN m.title, m.poster",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)
WHERE u.born > date('1980-01-01')
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released ENDS WITH ""-12-25""
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.plot CONTAINS 'adventure'
RETURN DISTINCT a.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:RATED]->(u:User)
WHERE m.movieId STARTS WITH '1' AND exists{(m)-[:RATED]->(:User)}
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, m ORDER BY m.imdbRating DESC
WITH d, collect(m) AS movies
WHERE size(movies) >= 2
RETURN d.name AS Director, movies[0..5] AS TopMovies",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE g.name = 'Comedy'
WITH d, collect(m) AS comedyMovies
WHERE exists {
    MATCH (d)-[:DIRECTED]->(m2:Movie)-[:IN_GENRE]->(g2:Genre)
    WHERE g2.name = 'Drama'
}
RETURN d, comedyMovies",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'English' NOT IN m.languages AND m.runtime > 120
RETURN m",Complex Retrieval Queries,recommendations,True,False,False
"MATCH (u:User {name: 'John Smith'})-[:RATED]->(m:Movie)
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor {bornIn: ""Canada""})-[:ACTED_IN]->(m:Movie)
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbRating IS NOT NULL AND m.year = 2000
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE exists {
    MATCH (a)-[:DIRECTED]->(:Movie)
}
RETURN DISTINCT m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE exists {
    MATCH (m)-[:IN_GENRE]->(g:Genre)
    WHERE d.bornIn IN m.countries
}
RETURN d, m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.countries IS NOT NULL
RETURN m.title, size(m.countries) AS countryCount
ORDER BY countryCount DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
RETURN m.title, size(m.languages) AS num_languages
ORDER BY num_languages DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.bio CONTAINS 'Broadway'
RETURN a.name, a.bio",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre)
WITH u, count(DISTINCT g) AS genreCount
WHERE genreCount > 3
RETURN u",Complex Retrieval Queries,recommendations,True,False,False
"MATCH (m:Movie)
WHERE m.revenue > 100000000 AND size((:User)-[:RATED]->(m)) > 500
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE d.died < date('2000-01-01')
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE m.imdbRating >= 9
RETURN a.name, m.title, m.imdbRating",Complex Retrieval Queries,recommendations,True,False,False
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'escape'
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.revenue > 1000000000
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.released >= '1990-01-01' AND m.released < '2000-01-01' AND m.revenue IS NOT NULL
RETURN m
ORDER BY m.revenue DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {released: ""2000-01-01""})
RETURN a.name, m.title",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)-[:IN_GENRE]->(g:Genre)
WHERE m.runtime < 80
RETURN g.name AS Genre",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE exists {
  MATCH (a)-[:DIRECTED]->(:Movie)
}
RETURN m",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.plot IS NOT NULL
RETURN m.title, m.plot, length(m.plot) AS plot_length
ORDER BY plot_length DESC
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:DIRECTED]-(d:Director)
WHERE m.imdbRating < 5 AND d.bornIn = 'USA'
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)<-[:RATED]-(u:User)
WITH m, count(DISTINCT u) AS userCount
WHERE userCount >= 5
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)
RETURN a.name AS ActorName, a.bio AS Biography
ORDER BY length(a.bio) DESC
LIMIT 1",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE NOT 'English' IN m.languages
RETURN d, m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.countries IS NOT NULL
RETURN m.title, size(m.countries) AS num_countries
ORDER BY num_countries DESC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)
WHERE a.poster CONTAINS 'smile'
RETURN a",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'monster'
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE 'Japanese' IN m.languages
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:RATED]-(u:User)
WHERE u.rating < 3.0
RETURN DISTINCT d.name",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(d:Director)
WHERE a.bornIn = d.bornIn AND a.bornIn IS NOT NULL
RETURN a.name AS ActorName, d.name AS DirectorName, m.title AS MovieTitle",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (m:Movie)
WHERE m.imdbVotes IS NOT NULL
RETURN m
ORDER BY m.imdbVotes ASC
LIMIT 3",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE exists {
    MATCH (d)-[:ACTED_IN]->(:Movie)
}
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WITH m, count(DISTINCT a) AS numActors
WHERE numActors > 10
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WITH d, count(m) AS directedMovies
WHERE directedMovies > 5
MATCH (m2:Movie)<-[:DIRECTED]-(d)
RETURN m2",Complex Retrieval Queries,recommendations,False,False,False
"MATCH (m:Movie)
WHERE m.plot CONTAINS 'hero'
RETURN m",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)-[r:RATED]->(m:Movie)
WITH u, count(r) AS ratingsCount
WHERE ratingsCount > 100
MATCH (u)-[r:RATED]->(m)
RETURN m.title AS MovieTitle, avg(r.rating) AS AverageRating
ORDER BY AverageRating DESC",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (d:Director)
WHERE d.born IS NOT NULL
RETURN d
ORDER BY d.born
LIMIT 5",Complex Retrieval Queries,recommendations,False,False,True
"MATCH (u:User)
WHERE u.status_expiration IS NOT NULL
RETURN u
ORDER BY u.status_expiration DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:IN_TIMEZONE]->(tz:TimeZone {id: 'Europe/Amsterdam'})
RETURN u.name
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (c:Channel)
WHERE c.is_archived = true
RETURN c
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-ruby'})
RETURN u.name
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:REACTED]->(r:Reaction)-[:REACTION_TYPE]->(e:Emoji {name: 'simple_smile'})
RETURN u.name
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)
RETURN u.name AS UserName, count(m) AS MessagesPosted
ORDER BY MessagesPosted DESC
LIMIT 3",Pathfinding Queries,slack,False,False,False
"MATCH (u:User {name: ""Michael Hunger""})-[:POSTED]->(m:Message)
MATCH (r:Reaction)-[:TO_MESSAGE]->(m)
RETURN r
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (u:User {real_name: ""Michael Hunger""})-[:POSTED]->(m:Message)
RETURN m
ORDER BY m.createdAt DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (c:Channel)
WITH c
ORDER BY c.pagerank DESC
LIMIT 3
MATCH (po:PrimaryOwner)-[:CREATED]->(c)
RETURN po.display_name_normalized AS PrimaryOwner, c.name AS ChannelName, c.pagerank AS PageRank",Pathfinding Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)
WITH b, count(m) AS messagesPosted
ORDER BY messagesPosted DESC
LIMIT 5
RETURN b.name AS BotName, messagesPosted",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.avatar_hash STARTS WITH 'g5'
RETURN u
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (o:Owner {real_name: ""Michael Hunger""})-[:CREATED]->(c:Channel)
RETURN c.name
ORDER BY c.createdAt DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (c:Channel)
RETURN c
ORDER BY c.createdAt DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.is_custom_image = true
RETURN u
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (c:Channel)
RETURN c.name AS ChannelName, c.pagerank AS PageRank
ORDER BY c.pagerank DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (b:Bot {name: 'communitygraph'})-[:MEMBER_OF]->(c:Channel)
RETURN c.name",Simple Aggregation Queries,slack,False,False,True
"MATCH (po:PrimaryOwner {name: 'michael.neo'})-[:POSTED]->(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN a",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:EDITED]->(tm:ThreadedMessage)
RETURN tm.text AS MessageText
ORDER BY tm.createdAt DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
WITH c, count{(m)-[:HAS_REACTION]->()} AS reactionCount
ORDER BY reactionCount DESC
LIMIT 5
RETURN c.name AS ChannelName, reactionCount AS Reactions",Pathfinding Queries,slack,False,False,True
"MATCH (o:Owner)-[:MEMBER_OF]->(c:Channel {name: 'neo4j-graphql'})
RETURN o
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.status_text IS NOT NULL
RETURN u.name, u.status_text, u.status_expiration
ORDER BY u.status_expiration DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (m:Message)-[:MENTIONS_CHANNEL]->(c:Channel)
RETURN c.name AS ChannelName, count(m) AS Mentions
ORDER BY Mentions DESC
LIMIT 5",Pathfinding Queries,slack,False,False,False
"MATCH (u:User)-[:POSTED]->(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN u.name AS UserName, count(a) AS NumberOfAttachments
ORDER BY NumberOfAttachments DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (m:Message {subtype: 'channel_join'})
RETURN m
LIMIT 3",Pathfinding Queries,slack,False,False,False
"MATCH (u:User)
WHERE u.status_emoji = ':graphaware:'
RETURN u
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-ruby'})
RETURN b.name
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (po:PrimaryOwner)-[:POSTED]->(tm:ThreadedMessage)
RETURN po
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (a:Admin)-[:EDITED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
RETURN a
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:CREATED]->(c:Channel)
RETURN u.name AS UserName, count(c) AS ChannelsCreated
ORDER BY ChannelsCreated DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (d:Deleted)-[:POSTED]->(m:Message)
RETURN d
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)
WITH u, count{(m)-[:REACTION_TYPE]->()} AS reactions
RETURN u.name AS UserName, reactions
ORDER BY reactions DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (b:Bot)-[:IN_TIMEZONE]->(tz:TimeZone)
WHERE tz.team = 'T08J10GA2'
RETURN b.name
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (c:Channel {name: 'neo4j-ruby'})<-[:IN_CHANNEL]-(m:Message)
WHERE NOT EXISTS {
  MATCH (m)-[:IN_REPLY_TO]->(:Message)
}
WITH m
MATCH (m)<-[:IN_REPLY_TO]-(reply:Message)
RETURN reply
ORDER BY reply.createdAt
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (b:Bot {name: 'community-graph'})-[:MEMBER_OF]->(c:Channel)
RETURN c.name
ORDER BY c.pagerank DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[e:EDITED]->(m:Message)
RETURN u, e
ORDER BY e.editedAt DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User {real_name: ""Michael Hunger""})-[:POSTED]->(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN m, a
ORDER BY m.createdAt DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.status_emoji = ':python:'
RETURN u
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (m:Message)-[:MENTIONS_CHANNEL]->(c:Channel {name: 'random'})
RETURN m.text AS MessageText
ORDER BY m.createdAt DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (e:Emoji)<-[:REACTION_TYPE]-(r:Reaction)
RETURN e.name AS EmojiName, max(r.createdAt) AS LastUsed
ORDER BY LastUsed DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (a:Attachment)
RETURN a.title AS Title
ORDER BY a.thumb_width ASC
LIMIT 3",Pathfinding Queries,slack,False,False,False
"MATCH (u:User)-[:REACTED]->(r:Reaction)-[:REACTION_TYPE]->(e:Emoji {name: 'neo4j'})
MATCH (r)-[:TO_MESSAGE]->(m:Message)-[:IN_CHANNEL]->(c:Channel)
RETURN DISTINCT c.name
LIMIT 3",Pathfinding Queries,slack,False,False,False
"MATCH (u:User {skype: 'technige'})-[:POSTED]->(m:Message)
MATCH (r:Reaction)-[:TO_MESSAGE]->(m)
RETURN r",Simple Aggregation Queries,slack,False,False,True
"MATCH (m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
WHERE EXISTS { (m)-[:HAS_ATTACHMENT]->(:Attachment) }
RETURN m",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)
WHERE m.createdAt >= datetime('2020-01-01T00:00:00Z') AND m.createdAt < datetime('2021-01-01T00:00:00Z')
RETURN DISTINCT u.last_name AS LastName",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User {first_name: 'Michael'})
RETURN u.image_72 AS profile_picture",Simple Aggregation Queries,slack,False,False,False
"MATCH (m:Message)-[:IN_CHANNEL]->(c:Channel)
WHERE m.createdAt >= datetime('2019-01-01T00:00:00Z') AND m.createdAt <= datetime('2019-12-31T23:59:59Z')
WITH c, max(m.createdAt) AS LastMessageDate
MATCH (m2:Message)-[:IN_CHANNEL]->(c)
WHERE m2.createdAt = LastMessageDate
RETURN c.topic AS Topic",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User {name: 'lee.freeman'})-[:EDITED]->(m)-[:IN_CHANNEL]->(c:Channel)
RETURN DISTINCT c",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(tm:ThreadedMessage)
RETURN u.name AS UserName, count(tm) AS ThreadedMessagesCount
ORDER BY ThreadedMessagesCount DESC",Simple Aggregation Queries,slack,False,False,True
"MATCH (a:Admin {id: 'U08J18KHB'})
RETURN a.status_text AS StatusText",Simple Aggregation Queries,slack,False,False,True
"MATCH (o:Owner)
WHERE o.skype IS NOT NULL
RETURN o.skype",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot)-[:IN_TIMEZONE]->(tz:TimeZone {id: 'Europe/Amsterdam'})
RETURN b.display_name AS DisplayName",Simple Aggregation Queries,slack,False,False,True
"MATCH (a:Admin {first_name: 'Michael'})-[:CREATED]->(c:Channel)
RETURN c",Simple Aggregation Queries,slack,False,False,True
"MATCH (d:Deleted)
RETURN d.image_512 AS Image512",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot {name: 'communitygraph'})
RETURN b.color AS Color",Simple Aggregation Queries,slack,False,True,False
"MATCH (u:User {name: 'ryguyrg.neo'})-[:MEMBER_OF]->(c:Channel)
RETURN c",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:REACTED]->(r:Reaction)-[:TO_MESSAGE]->(tm:ThreadedMessage {id: '1581274875.020900'})
RETURN u.last_name AS LastName",Simple Aggregation Queries,slack,False,False,True
"MATCH (m:Message)-[:MENTIONS_CHANNEL]->(c:Channel)
RETURN DISTINCT c",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User {title: 'Caretaker General Community Neo4j'})
RETURN u",Simple Aggregation Queries,slack,False,False,True
"MATCH (m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
WHERE m.createdAt >= datetime('2018-01-01T00:00:00Z') AND m.createdAt < datetime('2019-01-01T00:00:00Z')
RETURN a.title AS AttachmentTitle",Simple Aggregation Queries,slack,False,False,True
"MATCH (o:Owner)-[:POSTED]->(:Message)
RETURN DISTINCT o.first_name AS FirstName",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:Deleted)-[:POSTED]->(m:Message)
WITH u, m.createdAt AS lastPostDate
ORDER BY lastPostDate DESC
RETURN u.id AS UserId, u.display_name AS DisplayName, lastPostDate
LIMIT 5",Pathfinding Queries,slack,False,False,False
"MATCH (c:Channel)
WHERE c.createdAt <= datetime('2017-01-01T00:00:00Z')
RETURN c",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.status_emoji = ':neo4j:'
RETURN u",Simple Aggregation Queries,slack,False,False,False
"MATCH (m:Message {type: 'message', subtype: 'channel_join'})-[:IN_CHANNEL]->(c:Channel)
RETURN c",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(tm:ThreadedMessage {type: 'message'})
RETURN u",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)
RETURN DISTINCT b.title AS BotTitle",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User {display_name: 'michael.neo'})-[:POSTED]->(m:Message)
MATCH (r:Reaction)-[:TO_MESSAGE]->(m)
RETURN r",Simple Aggregation Queries,slack,False,False,True
"MATCH (m:Message {subtype: 'channel_join'})-[:IN_CHANNEL]->(c:Channel)
RETURN DISTINCT c",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User {skype: 'maxdemarzi'})
RETURN u",Simple Aggregation Queries,slack,False,False,False
"MATCH (po:PrimaryOwner {status_expiration: 0})
RETURN po.first_name",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot)-[:MEMBER_OF]->(c:Channel {name: 'neo4j-graphql'})
RETURN b.real_name AS BotRealName",Simple Aggregation Queries,slack,False,False,False
"MATCH (m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
WHERE a.thumb_url CONTAINS 'neo4j'
RETURN m",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
RETURN m",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:EDITED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'help-import'})
RETURN DISTINCT u.display_name AS DisplayName",Simple Aggregation Queries,slack,False,False,True
"MATCH (d:Deleted)-[:REACTED]->(:Reaction)-[:TO_MESSAGE]->(:Message)
RETURN d",Simple Aggregation Queries,slack,False,False,False
"MATCH (u:User)
WHERE u.status_text = ':neo4j:' AND u.skype IS NOT NULL
RETURN u.skype",Simple Aggregation Queries,slack,False,False,True
"MATCH (a:AppUser {name: 'github'})
RETURN a.color",Simple Aggregation Queries,slack,False,False,True
"MATCH (po:PrimaryOwner {name: 'michael.neo'})-[:REACTED]->(r:Reaction)-[:TO_MESSAGE]->(tm:ThreadedMessage {id: '1581274875.020900'})
RETURN r",Simple Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)
WHERE c.purpose CONTAINS 'Neo4j GraphQL integration'
RETURN c",Simple Aggregation Queries,slack,False,False,True
"MATCH (a:Admin)
RETURN a.image_1024 AS Image",Simple Aggregation Queries,slack,False,False,True
"MATCH (po:PrimaryOwner)-[:CREATED]->(c:Channel)
WHERE po.name <> 'michael.neo'
RETURN c.name AS ChannelName",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User {name: 'michael.neo'})-[:EDITED]->(m:Message)
RETURN m",Simple Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)
WHERE c.topic CONTAINS 'import-export'
RETURN c",Simple Aggregation Queries,slack,False,False,True
"MATCH (a:AppUser)
RETURN a.image_original AS ImageOriginalLinks",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot)-[:REACTED]->(r:Reaction)-[:TO_MESSAGE]->(m:Message)
RETURN DISTINCT b.name AS BotNames",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.color = '9f69e7'
RETURN u.name",Simple Aggregation Queries,slack,False,False,True
"MATCH (c:Channel {name: 'organize-meetups'})<-[:IN_CHANNEL]-(m:Message)
RETURN m.text AS messageText
ORDER BY m.createdAt DESC
LIMIT 1",Simple Aggregation Queries,slack,False,False,False
"MATCH (tm:ThreadedMessage)-[:MENTIONS_USER]->(u:User {real_name: ""Michael Hunger""})
RETURN tm.text AS ThreadedMessageText
ORDER BY tm.createdAt DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (d:Deleted)-[:POSTED]->(m:Message)
WITH d, count(m) AS messagesPosted
ORDER BY messagesPosted DESC
LIMIT 5
RETURN d.name AS DeletedUserName, messagesPosted",Complex Aggregation Queries,slack,False,False,True
"MATCH (m:Message)-[:MENTIONS_CHANNEL]->(c:Channel)
WITH c, count(m) AS mentions
ORDER BY mentions DESC
LIMIT 5
RETURN c.name, mentions",Pathfinding Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel)
RETURN b.name AS BotName
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (o:Owner)-[:EDITED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
RETURN DISTINCT o LIMIT 3",Verbose query,slack,False,False,True
"MATCH (u:User)-[:MEMBER_OF]->(c:Channel {name: 'help-cypher'})
RETURN u.name
LIMIT 5",Verbose query,slack,False,False,True
"MATCH (u:User {display_name: 'michael.neo'})-[:CREATED]->(c:Channel)
RETURN c.name
ORDER BY c.createdAt
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (p:PrimaryOwner)-[:CREATED]->(c:Channel)
WITH p, count(c) AS channels_created
ORDER BY channels_created DESC
LIMIT 3
RETURN p.display_name AS PrimaryOwner, channels_created",Complex Aggregation Queries,slack,True,False,False
"MATCH (m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
WITH m, count(a) AS attachment_count
ORDER BY attachment_count DESC
LIMIT 5
RETURN m, attachment_count",Complex Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)-[:IN_CHANNEL]-(m:Message)
WITH c, m
MATCH (m)-[:HAS_REACTION]->(r:Reaction)
RETURN c.name AS ChannelName, COUNT(DISTINCT r) AS UniqueReactions
ORDER BY UniqueReactions DESC
LIMIT 3",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:MEMBER_OF]->(c:Channel)
WITH c, count(DISTINCT u.title) AS diversity
ORDER BY diversity DESC
LIMIT 5
RETURN c.name AS ChannelName, diversity",Complex Aggregation Queries,slack,False,False,True
"MATCH (a:Admin {name: 'michael.neo'})-[:POSTED]->(tm:ThreadedMessage)
RETURN tm.title
ORDER BY tm.createdAt DESC
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (u:User)-[:IN_TIMEZONE]->(tz:TimeZone)
RETURN tz.id AS TimeZone, count(u) AS NumberOfUsers
ORDER BY NumberOfUsers DESC
LIMIT 3",Complex Aggregation Queries,slack,False,False,False
"MATCH (b:Bot)-[:MEMBER_OF]->(c:Channel)
WITH b, count(c) AS num_channels
ORDER BY num_channels DESC
LIMIT 3
RETURN b.name, num_channels",Complex Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)<-[:TO_MESSAGE]-(r:Reaction)
RETURN c.name AS ChannelName, count(r) AS NumberOfReactions
ORDER BY NumberOfReactions DESC
LIMIT 5",Complex Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)-[:MENTIONS_CHANNEL]->(other:Channel)
WITH c, count(other) AS mentions
ORDER BY mentions DESC
LIMIT 3
RETURN c.name AS channelName, mentions",Complex Aggregation Queries,slack,False,False,False
"MATCH (u:User)-[:EDITED]->(m:Message)
WITH u, count(m) AS edits
ORDER BY edits DESC
LIMIT 5
RETURN u.name AS UserName, edits",Complex Aggregation Queries,slack,False,False,False
"MATCH (m:Message)
WHERE m.text IS NOT NULL
RETURN m
ORDER BY length(m.text) DESC
LIMIT 3",Complex Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)<-[:MEMBER_OF]-(u)
RETURN c.name, count(u) AS memberCount
ORDER BY memberCount DESC
LIMIT 5",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.status_text IS NOT NULL
RETURN u.name, count(u.status_text) AS status_updates
ORDER BY status_updates DESC
LIMIT 3",Complex Aggregation Queries,slack,False,False,True
"MATCH (e:Emoji)<-[:REACTION_TYPE]-(r:Reaction)
RETURN e.name AS Emoji, count(r) AS UsageCount
ORDER BY UsageCount DESC
LIMIT 5",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.is_custom_image = true
RETURN u.name, count(u) AS customImageCount
ORDER BY customImageCount DESC
LIMIT 5",Complex Aggregation Queries,slack,False,False,False
"MATCH (u:User)-[:REACTED]->(r:Reaction)-[:TO_MESSAGE]->(m:Message {id: '1507313352.000514'})
RETURN u
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (u:User)-[:IN_TIMEZONE]->(tz:TimeZone {id: 'Europe/Amsterdam'})
RETURN u.first_name
LIMIT 5",Verbose query,slack,False,False,True
"MATCH (po:PrimaryOwner {real_name: 'Michael Hunger'})-[:MEMBER_OF]->(c:Channel)
RETURN c.name
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (b:Bot)-[:MEMBER_OF]->(c:Channel {name: 'neo4j-graphql'})
RETURN b.real_name AS BotRealName",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot {status_emoji: ':python:'})
RETURN b.name
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (a:Admin)-[:EDITED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
RETURN a.name
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (u:User)-[:REACTED]->(r:Reaction)-[:TO_MESSAGE]->(tm:ThreadedMessage {id: '1581274875.020900'})
RETURN u.display_name
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (tm:ThreadedMessage)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN tm.title AS Title
ORDER BY tm.createdAt DESC
LIMIT 5",Verbose query,slack,False,False,True
"MATCH (c:Channel)-[:IN_CHANNEL]-(m:Message)
WITH c, count{(m)-[:HAS_REACTION]->()} AS reactionCount
RETURN c.name AS ChannelName, reactionCount
ORDER BY reactionCount DESC
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (d:Deleted)-[:MEMBER_OF]->(c:Channel {name: 'help-cypher'})
RETURN d.first_name
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (m:Message)-[:MENTIONS_USER]->(u:User {display_name: 'michael.neo'})
RETURN m
ORDER BY m.createdAt DESC
LIMIT 5",Verbose query,slack,False,False,True
"MATCH (b:Bot)-[:MEMBER_OF]->(c:Channel)
WITH b, count(c) AS num_channels
ORDER BY num_channels DESC
LIMIT 3
RETURN b.name, num_channels",Verbose query,slack,False,False,True
"MATCH (po:PrimaryOwner)-[:POSTED]->(:Message)-[:IN_CHANNEL]->(:Channel)
RETURN po.real_name
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (o:Owner)-[:IN_TIMEZONE]->(tz:TimeZone {id: 'Europe/Amsterdam'})
RETURN o
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (a:Admin)-[:CREATED]->(c:Channel)
RETURN c.name
ORDER BY c.createdAt
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (u:User)-[:EDITED]->(m:Message)
WITH u, count(m) AS edits
ORDER BY edits DESC
LIMIT 5
RETURN u.name AS UserName, edits",Verbose query,slack,False,False,True
"MATCH (u:User)-[:MEMBER_OF]->(c:Channel {name: 'neo4j-graphql'})
WHERE u.is_custom_image = true
RETURN u
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (c:Channel {name: 'help-cypher'})<-[:IN_CHANNEL]-(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN a.text AS AttachmentText
ORDER BY a.createdAt DESC
LIMIT 5",Verbose query,slack,False,False,False
"MATCH (e:Emoji)<-[:REACTION_TYPE]-(r:Reaction)-[:TO_MESSAGE]->(m:Message)
RETURN e.name AS EmojiName
LIMIT 3",Verbose query,slack,False,False,False
"MATCH (u:User)-[:MEMBER_OF]->(c:Channel {name: 'neo4j-sdn-ogm'})
WHERE c.pagerank IS NOT NULL
RETURN u
ORDER BY c.pagerank DESC
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (d:Deleted)-[:POSTED]->(tm:ThreadedMessage)
RETURN d.id
LIMIT 3",Verbose query,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
RETURN c.name, count(m) AS message_count
ORDER BY message_count DESC
LIMIT 5",Verbose query,slack,False,False,True
"MATCH (a:Admin)-[:CREATED]->(c:Channel)
WITH a, count(c) AS channels_created
ORDER BY channels_created DESC
LIMIT 3
RETURN a.display_name AS AdminName, channels_created",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(tm:ThreadedMessage)
RETURN u.name AS UserName, count(tm) AS ThreadedMessagesCount
ORDER BY ThreadedMessagesCount DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:IN_TIMEZONE]->(tz:TimeZone)
WITH u, count(DISTINCT tz) AS num_timezones
ORDER BY num_timezones DESC
LIMIT 5
RETURN u.name AS user_name, num_timezones",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:REACTED]->(r:Reaction)-[:TO_MESSAGE]->(m:Message)
WITH u, COUNT(DISTINCT m) AS uniqueMessages
ORDER BY uniqueMessages DESC
LIMIT 5
RETURN u.name AS UserName, uniqueMessages",Complex Aggregation Queries,slack,False,False,True
"MATCH (c:Channel {name: 'neo4j-graphql'})<-[:IN_CHANNEL]-(m:Message)
MATCH (r:Reaction)-[:TO_MESSAGE]->(m)
MATCH (e:Emoji)<-[:REACTION_TYPE]-(r)
RETURN e.name
LIMIT 5",Pathfinding Queries,slack,False,False,False
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
WHERE exists{(m)-[:EDITED]->()}
RETURN c.name, count(m) AS editedMessages
ORDER BY editedMessages DESC
LIMIT 3",Pathfinding Queries,slack,False,False,False
"MATCH (u:User)-[:MEMBER_OF]->(c:Channel {name: 'random'})
RETURN u.name
ORDER BY u.createdAt DESC
LIMIT 5",Pathfinding Queries,slack,False,False,False
"MATCH (m:Message)-[:MENTIONS_CHANNEL]->(c:Channel {name: 'neo4j-ruby'})
RETURN m
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:MEMBER_OF]->(c:Channel)
RETURN c.name, count(u) AS memberCount
ORDER BY memberCount DESC
LIMIT 5",Pathfinding Queries,slack,True,False,False
"MATCH (u:User)
WHERE u.image_original IS NOT NULL
RETURN u.name
ORDER BY u.image_original DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (p:PrimaryOwner {real_name: 'Michael Hunger'})-[:CREATED]->(c:Channel)
RETURN c
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)<-[:MENTIONS_USER]-(tm:ThreadedMessage)
RETURN u.name, count(tm) AS mentions
ORDER BY mentions DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (m:Message {type: 'message'})
RETURN m.text AS MessageText
ORDER BY m.createdAt DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)
RETURN m.text AS message_text
ORDER BY m.createdAt DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:MENTIONS_USER]->(m:Message)
RETURN u.name, count(m) AS mentions
ORDER BY mentions DESC
LIMIT 5",Pathfinding Queries,slack,True,False,False
"MATCH (b:Bot)-[:MEMBER_OF]->(c:Channel {name: 'neo4j-graphql'})
RETURN b.name
ORDER BY b.createdAt DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (m:Message)-[:REACTION_TYPE]->(e:Emoji {name: 'simple_smile'})
RETURN m
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (po:PrimaryOwner)-[:EDITED]->(m:Message)
WITH po, count(m) AS edits
ORDER BY edits DESC
LIMIT 3
RETURN po.display_name AS PrimaryOwner, edits",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'random'})
RETURN u.name AS UserName
ORDER BY count(m) DESC
LIMIT 5",Pathfinding Queries,slack,False,False,False
"MATCH (a:Admin)-[:CREATED]->(c:Channel)
WHERE c.is_archived = false
RETURN c
ORDER BY c.createdAt
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:REACTED]->(r:Reaction)
WITH u, count(r) AS reactions_count
ORDER BY reactions_count DESC
LIMIT 5
RETURN u.name AS user_name, reactions_count",Pathfinding Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(tm:ThreadedMessage)
RETURN c.name AS ChannelName, count(tm) AS ThreadedMessagesCount
ORDER BY ThreadedMessagesCount DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
WITH c, count{(m)-[:HAS_REACTION]->()} AS reactionCount
ORDER BY reactionCount DESC
LIMIT 3
RETURN c.name AS ChannelName, reactionCount",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)-[:REACTED]->(r:Reaction)-[:REACTION_TYPE]->(e:Emoji {name: 'simple_smile'})
WITH u, count(r) AS reaction_count
ORDER BY reaction_count DESC
LIMIT 5
RETURN u, reaction_count",Pathfinding Queries,slack,False,False,True
"MATCH (c:Channel)
WHERE c.purpose IS NOT NULL
RETURN c.name, c.purpose
ORDER BY length(c.purpose) DESC
LIMIT 3",Pathfinding Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.status_emoji = ':neo4j:'
RETURN u.name
ORDER BY u.status_expiration DESC
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(tm:ThreadedMessage)
RETURN c.name, count(tm) AS threadedMessageCount
ORDER BY threadedMessageCount DESC
LIMIT 3",Complex Aggregation Queries,slack,False,False,True
"MATCH (o:Owner)-[:MEMBER_OF]->(c:Channel)
WITH o, count(c) AS channels_count
ORDER BY channels_count DESC
LIMIT 5
RETURN o.display_name AS OwnerDisplayName, channels_count",Complex Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
WHERE exists{(m)-[:EDITED]->()}
RETURN c.name, count(m) AS editedMessages
ORDER BY editedMessages DESC
LIMIT 3",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)<-[:MENTIONS_USER]-(m:Message)
RETURN u.name AS UserName, count(m) AS MentionsCount
ORDER BY MentionsCount DESC
LIMIT 5",Complex Aggregation Queries,slack,False,False,True
"MATCH (m:Message)
WITH m, count{(m)-[:REACTED]->(:Reaction)} AS reactionCount
ORDER BY reactionCount DESC
LIMIT 5
RETURN m, reactionCount",Complex Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN c.name, count(a) AS attachment_count
ORDER BY attachment_count DESC
LIMIT 3",Complex Aggregation Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)
RETURN b.name, count(m) AS messages_posted
ORDER BY messages_posted DESC
LIMIT 5",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(tm:ThreadedMessage)
RETURN u.name AS UserName, count(tm) AS ThreadedMessagesCount
ORDER BY ThreadedMessagesCount DESC
LIMIT 3",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel)
WITH u, count(DISTINCT c) AS uniqueChannels
ORDER BY uniqueChannels DESC
LIMIT 5
RETURN u, uniqueChannels",Complex Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)-[:IN_CHANNEL]-(m:Message)
WHERE c.is_archived = true
RETURN c.name, count(m) AS archived_messages
ORDER BY archived_messages DESC
LIMIT 5",Complex Aggregation Queries,slack,False,False,True
"MATCH (m:Message)-[:MENTIONS_USER]->(u:User)
WITH u, count(m) AS mentions
ORDER BY mentions DESC
LIMIT 3
RETURN u.name AS UserName, mentions",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:REACTED]->(r:Reaction)
WITH u, count(r) AS reactions_count
ORDER BY reactions_count DESC
LIMIT 3
RETURN u.name AS user_name, reactions_count",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel)
WITH c, count(DISTINCT u) AS uniqueUsers
ORDER BY uniqueUsers DESC
RETURN c.name AS ChannelName, uniqueUsers
LIMIT 5",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[e:EDITED]->(m:Message)
RETURN u.name AS UserName, count(e) AS Edits
ORDER BY Edits DESC
LIMIT 5",Complex Aggregation Queries,slack,False,False,False
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
RETURN c.name, count(m) AS message_count
ORDER BY message_count DESC
LIMIT 3",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:CREATED]->(c:Channel)
RETURN u.name AS UserName, count(c) AS ChannelsCreated
ORDER BY ChannelsCreated DESC
LIMIT 5",Complex Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(tm:ThreadedMessage)
RETURN u.name AS UserName
ORDER BY tm.createdAt DESC
LIMIT 3",Pathfinding Queries,slack,False,False,False
"MATCH (m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
WHERE a.title CONTAINS 'Neo4j'
RETURN m
LIMIT 5",Pathfinding Queries,slack,False,False,True
"MATCH (c:Channel)<-[:MENTIONS_CHANNEL]-(m:Message)
RETURN c.name, count(m) AS mentions
ORDER BY mentions DESC
LIMIT 3",Pathfinding Queries,slack,False,False,False
"MATCH (c:Channel)
RETURN c.name, c.pagerank
ORDER BY c.pagerank DESC
LIMIT 3",Complex Aggregation Queries,slack,False,False,True
"MATCH (po:PrimaryOwner)-[:MEMBER_OF]->(c:Channel)
WITH po, count(c) AS numChannels
WHERE numChannels > 1
RETURN po.display_name AS DisplayName",Simple Aggregation Queries,slack,False,False,False
"MATCH (o:Owner {name: 'markneedham'})-[:CREATED]->(c:Channel {is_archived: true})
RETURN c",Simple Retrieval Queries,slack,False,False,True
"MATCH (c:Channel {name: 'organize-meetups'})-[:IN_CHANNEL]-(m:Message)
RETURN DISTINCT m.type AS MessageType",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:MEMBER_OF]->(c:Channel {id: 'C08J10PT2'})
RETURN u",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {id: 'U08J18KHB'})-[:CREATED]->(c:Channel)
RETURN c",Complex Retrieval Queries,slack,False,False,False
"MATCH (c:Channel)<-[:MEMBER_OF]-(u)
WITH c, count(u) AS members
ORDER BY members DESC
LIMIT 3
RETURN c.name AS ChannelName, members AS NumberOfMembers",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(tm:ThreadedMessage)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
RETURN u.name AS UserName, count(tm) AS ThreadedMessagesCount
ORDER BY ThreadedMessagesCount DESC",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User {name: 'michael.neo'})-[:CREATED]->(c:Channel)
MATCH (m:Message)-[:IN_CHANNEL]->(c)
MATCH (m)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN a.title
ORDER BY a.createdAt DESC
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (m:Message)-[:MENTIONS_USER]->(u:User {name: ""Michael""})
WHERE m.createdAt >= datetime() - duration({days: 5})
WITH m
ORDER BY m.createdAt DESC
LIMIT 5
MATCH (m)-[:IN_CHANNEL]->(c:Channel)
RETURN DISTINCT c.name",Simple Retrieval Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)
WITH b, count(m) AS messages_posted
ORDER BY messages_posted DESC
LIMIT 5
RETURN b.first_name AS BotFirstName, messages_posted",Simple Retrieval Queries,slack,False,False,False
"MATCH (u:User)-[:REACTED]->(r:Reaction)-[:REACTION_TYPE]->(e:Emoji {name: ':neo4j:'})
RETURN u.name
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User {name: 'michael.neo'})-[:IN_TIMEZONE]->(tz:TimeZone)
RETURN tz;",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.display_name_normalized STARTS WITH 'm' AND u.team = 'T08J10GA2'
RETURN u",Simple Retrieval Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
WITH c, count{(m)-[:HAS_REACTION]->()} AS reactionCount
ORDER BY reactionCount DESC
LIMIT 3
RETURN c.name AS ChannelName, reactionCount AS NumberOfReactions",Simple Retrieval Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment),
      (m)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-python'})
RETURN b, m, a",Simple Retrieval Queries,slack,False,False,False
"MATCH (u:User)-[:IN_TIMEZONE]->(tz:TimeZone {id: 'Europe/Amsterdam'}),
      (u)-[:EDITED]->(tm:ThreadedMessage)
RETURN DISTINCT u.name",Simple Retrieval Queries,slack,False,False,True
"MATCH (o:Owner)-[:POSTED]->(m:Message)
WITH o, count(m) AS messages_posted
ORDER BY messages_posted DESC
LIMIT 3
RETURN o.first_name AS First_Name, messages_posted",Simple Retrieval Queries,slack,False,False,False
"MATCH (a:Admin {status_text: ':neo4j:'})
RETURN a",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-python'})
WITH u, count(m) AS posts
ORDER BY posts DESC
LIMIT 5
RETURN u.first_name AS FirstName",Simple Retrieval Queries,slack,False,False,True
"MATCH (c:Channel)
WHERE c.purpose CONTAINS 'Neo4j Ruby'
RETURN c",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User {name: 'michael.neo'})-[:REACTED]->(r:Reaction)-[:REACTION_TYPE]->(e:Emoji)
RETURN e.name AS Emoji, r.createdAt AS TimeUsed
ORDER BY r.createdAt DESC
LIMIT 5",Simple Retrieval Queries,slack,False,False,True
"MATCH (a:Admin)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
RETURN m.title
ORDER BY m.createdAt DESC
LIMIT 5",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(tm:ThreadedMessage)
RETURN u, count(tm) AS threadedMessageCount
ORDER BY threadedMessageCount DESC
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User {name: 'michael.neo'})-[:POSTED]->(m:Message)
RETURN m",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:REACTED]->(r:Reaction)-[:TO_MESSAGE]->(m:Message {id: '1507313352.000514'})
RETURN u",Complex Retrieval Queries,slack,False,False,False
"MATCH (d:Deleted)-[:CREATED]->(c:Channel)
RETURN c",Complex Retrieval Queries,slack,False,False,True
"MATCH (tm:ThreadedMessage {text: 'We’re super excited to share the *preview* release'})-[:MENTIONS_USER]->(u:User)
RETURN u",Complex Retrieval Queries,slack,False,False,True
"MATCH (m:Message {id: '1581274875.020900'})<-[:TO_MESSAGE]-(r:Reaction)
RETURN r",Complex Retrieval Queries,slack,False,False,True
"MATCH (c:Channel {name: 'neo4j-graphql'})<-[:IN_CHANNEL]-(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN a.thumb_url AS ThumbURL",Complex Retrieval Queries,slack,False,False,False
"MATCH (m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
WHERE a.thumb_width > 1000
RETURN m",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {avatar_hash: 'g522bc835d74'})-[:MEMBER_OF]->(c:Channel)
RETURN c",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {id: 'U08J18KHB'})
RETURN u.title AS Title",Complex Retrieval Queries,slack,False,False,False
"MATCH (u:User)-[:POSTED]->(m:Message)
RETURN u.name AS UserName, count(m) AS MessagesPosted
ORDER BY MessagesPosted DESC
LIMIT 5",Complex Retrieval Queries,slack,False,False,False
"MATCH (u:User {real_name: 'Michael Hunger'})-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel)
RETURN DISTINCT c.name",Complex Retrieval Queries,slack,False,False,True
"MATCH (c:Channel)
WHERE c.pagerank = 0.15 AND c.is_archived = FALSE
RETURN c",Complex Retrieval Queries,slack,False,False,True
"MATCH (c:Channel {topic: 'Technical Questions: <https://r.neo4j.com/newbies>'})<-[:CREATED]-(a:Admin)
RETURN a",Complex Retrieval Queries,slack,False,False,True
"MATCH (c:Channel {name: 'neo4j-ruby'})
RETURN c.purpose AS Purpose",Complex Retrieval Queries,slack,False,False,False
"MATCH (m:Message)-[:MENTIONS_USER]->(u:User {display_name: 'michael.neo'})
RETURN m",Complex Retrieval Queries,slack,False,False,True
"MATCH (b:Bot)-[:MEMBER_OF]->(c:Channel {name: 'random'})
RETURN b",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {real_name: 'Michael Hunger'})-[:POSTED]->(m:Message)
MATCH (r:Reaction)-[:TO_MESSAGE]->(m)
MATCH (e:Emoji)<-[:REACTION_TYPE]-(r)
RETURN DISTINCT e.name",Complex Retrieval Queries,slack,False,False,True
"MATCH (po:PrimaryOwner)-[:CREATED]->(c:Channel)
WHERE c.createdAt < datetime('2016-01-01T00:00:00Z')
RETURN po",Complex Retrieval Queries,slack,False,False,False
"MATCH (c:Channel {name: 'random'})<-[:IN_CHANNEL]-(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN a",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:EDITED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {id: 'C08J10PT2'})
RETURN DISTINCT u.first_name AS FirstName",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.status_emoji = ':python:'
RETURN u.real_name AS RealName",Complex Retrieval Queries,slack,False,False,True
"MATCH (m:Message)-[:MENTIONS_USER]->(u:User {real_name: 'Michael Hunger'})
WITH m ORDER BY m.createdAt DESC LIMIT 5
MATCH (m)-[:IN_CHANNEL]->(c:Channel)
RETURN DISTINCT c",Simple Retrieval Queries,slack,False,False,True
"MATCH (b:Bot)
WHERE b.is_custom_image = true
RETURN b.name",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
WHERE m.createdAt >= date({year: 2023, week: 11}) AND m.createdAt < date({year: 2023, week: 12})
RETURN u.name
LIMIT 3",Simple Retrieval Queries,slack,False,True,False
"MATCH (c:Channel)
WHERE c.is_archived = true
RETURN c
ORDER BY c.createdAt DESC
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (m:Message)-[:IN_CHANNEL]->(c:Channel)
WHERE m.text CONTAINS 'Google Drive'
WITH c, m ORDER BY m.createdAt DESC LIMIT 5
RETURN DISTINCT c",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User {name: 'michael.neo'})-[:REACTED]->(r:Reaction)-[:TO_MESSAGE]->(m)
RETURN r, m
ORDER BY m.createdAt DESC
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:IN_TIMEZONE]->(tz:TimeZone {id: 'Europe/Amsterdam'}),
      (u)-[e:EDITED]->(m:Message)
WHERE e.editedAt >= timestamp() - 31536000000
RETURN u",Simple Retrieval Queries,slack,False,False,True
"MATCH (d:Deleted)
RETURN d.first_name
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-python'})
RETURN b.name AS BotName",Simple Retrieval Queries,slack,False,False,True
"MATCH (o:Owner)-[:MEMBER_OF]->(c:Channel)
WHERE c.name = 'neo4j-graphql'
RETURN o",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.display_name_normalized STARTS WITH 'm'
RETURN u
LIMIT 5",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
RETURN u.name AS UserName, count(m) AS MessagesPosted
ORDER BY MessagesPosted DESC
LIMIT 5",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel)
WHERE exists {
  (u)-[:IN_TIMEZONE]->(:TimeZone {id: 'Europe/Amsterdam'})
}
RETURN u",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User {name: 'michael.neo'})-[:POSTED]->(m:Message)
RETURN m
ORDER BY m.createdAt DESC
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:REACTED]->(r:Reaction)
WITH u, count(r) AS reactions
ORDER BY reactions DESC
LIMIT 5
RETURN u.first_name AS FirstName, reactions",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:IN_TIMEZONE]->(tz:TimeZone {id: 'Europe/Amsterdam'})
WHERE u.status_expiration = 0
RETURN u",Simple Retrieval Queries,slack,False,False,True
"MATCH (po:PrimaryOwner)-[:CREATED]->(c:Channel)
WHERE c.createdAt < datetime('2016-01-01T00:00:00Z')
RETURN po",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:MEMBER_OF]->(c:Channel)
WITH u, count(c) AS num_channels
ORDER BY num_channels DESC
LIMIT 3
RETURN u, num_channels",Simple Retrieval Queries,slack,False,False,True
"MATCH (a:Admin)-[:CREATED]->(c:Channel)
RETURN c.name AS ChannelName, c.createdAt AS CreationDate
ORDER BY c.createdAt DESC
LIMIT 5",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:EDITED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-python'})
RETURN DISTINCT u",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User {name: 'michael.neo'})-[:CREATED]->(c:Channel)
RETURN c",Simple Retrieval Queries,slack,False,False,True
"MATCH (c:Channel)
WHERE c.purpose CONTAINS 'Neo4j GraphQL'
RETURN c",Simple Retrieval Queries,slack,False,False,True
"MATCH (c:Channel {name: 'neo4j-python'})<-[:IN_CHANNEL]-(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN a.title
ORDER BY m.createdAt DESC
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (c:Channel {name: 'neo4j-graphql'})<-[:IN_CHANNEL]-(m:Message)
MATCH (r:Reaction)-[:TO_MESSAGE]->(m)
MATCH (e:Emoji)<-[:REACTION_TYPE]-(r)
RETURN e.name AS EmojiName
LIMIT 5",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(tm:ThreadedMessage)-[:MENTIONS_USER]->(mentioned:User {name: 'michael.neo'})
RETURN DISTINCT u",Simple Retrieval Queries,slack,False,False,False
"MATCH (u:User)-[:IN_TIMEZONE]->(tz:TimeZone)
RETURN tz, count(u) AS userCount
ORDER BY userCount DESC
LIMIT 1",Simple Retrieval Queries,slack,False,False,True
"MATCH (o:Owner)-[:POSTED]->(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN a.title AS AttachmentTitle
ORDER BY m.createdAt DESC
LIMIT 5",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User {name: 'michael.neo'})-[:CREATED]->(c:Channel {is_archived: true})
RETURN c
ORDER BY c.createdAt
LIMIT 3",Simple Retrieval Queries,slack,False,False,False
"MATCH (c:Channel)
WHERE c.topic CONTAINS 'Graph'
RETURN c.name, c.topic",Simple Retrieval Queries,slack,False,False,False
"MATCH (m:Message)-[:MENTIONS_USER]->(u:User)
RETURN u.name AS UserName, count(m) AS Mentions
ORDER BY Mentions DESC
LIMIT 5",Simple Retrieval Queries,slack,False,False,True
"MATCH (m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
WHERE m.subtype = 'channel_join'
RETURN m
ORDER BY m.createdAt DESC
LIMIT 3",Simple Retrieval Queries,slack,False,False,False
"MATCH (d:Deleted)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {is_archived: true})
RETURN d.name, c.name",Simple Retrieval Queries,slack,False,False,True
"MATCH (a:Admin)-[:EDITED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-python'})
RETURN DISTINCT a.last_name AS LastName",Simple Retrieval Queries,slack,False,False,False
"MATCH (p:PrimaryOwner)-[:CREATED]->(:Channel)
RETURN p.first_name
LIMIT 3",Simple Retrieval Queries,slack,False,False,False
"MATCH (u:User)-[:REACTED]->(r:Reaction)-[:REACTION_TYPE]->(e:Emoji {name: ':python:'})
RETURN DISTINCT u",Simple Retrieval Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
RETURN c.name, count(m) AS message_count
ORDER BY message_count DESC
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (d:Deleted)
RETURN d.name AS Name, d.title AS Title
LIMIT 5",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User {name: 'michael.neo'})-[:CREATED]->(c:Channel)
WHERE c.topic CONTAINS 'Python'
RETURN c",Simple Retrieval Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
WHERE EXISTS {
    (m)-[:EDITED]->()
}
WITH c, m
ORDER BY m.createdAt DESC
RETURN c.name AS ChannelName, m.text AS MessageText, m.createdAt AS MessageCreatedAt
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.is_custom_image = true AND u.team = 'T08J10GA2'
RETURN u",Simple Retrieval Queries,slack,False,False,True
"MATCH (c:Channel {name: 'neo4j-graphql'})<-[:IN_CHANNEL]-(tm:ThreadedMessage)
RETURN tm.title
ORDER BY tm.createdAt DESC
LIMIT 5",Simple Retrieval Queries,slack,False,False,False
"MATCH (b:Bot)-[:MEMBER_OF]->(:Channel)
RETURN b.name
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (a:Admin)-[:POSTED]->(m:Message)-[:HAS_ATTACHMENT]->(att:Attachment)
WHERE m.createdAt >= date() - duration({months: 1})
RETURN a, m, att",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User {name: 'michael.neo'})-[:MEMBER_OF]->(c:Channel {is_archived: true})
RETURN c",Simple Retrieval Queries,slack,False,False,True
"MATCH (po:PrimaryOwner)-[:IN_TIMEZONE]->(tz:TimeZone {id: 'Europe/Amsterdam'})
RETURN po",Complex Retrieval Queries,slack,False,False,False
"MATCH (b:Bot)-[:MEMBER_OF]->(:Channel)
WHERE b.is_custom_image = true
RETURN b",Complex Retrieval Queries,slack,False,False,True
"MATCH (c:Channel)
RETURN c.name AS ChannelName, c.pagerank AS PageRank
ORDER BY c.pagerank DESC
LIMIT 3",Simple Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:REACTED]->(r:Reaction)-[:REACTION_TYPE]->(e:Emoji {name: 'simple_smile'})
RETURN u",Complex Retrieval Queries,slack,False,False,True
"MATCH (a:Admin {skype: 'technige'})
RETURN a",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.status_emoji = ':python:'
RETURN u",Simple Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)
WHERE c.topic CONTAINS 'Neo4j GraphQL integration'
RETURN c",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot {first_name: 'Google'})
RETURN b.display_name AS DisplayName",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[e:EDITED]->(m:Message)
RETURN u, count(e) AS edits
ORDER BY edits DESC
LIMIT 1",Simple Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
RETURN c.name AS ChannelName, count(m) AS MessagesCount
ORDER BY MessagesCount DESC
LIMIT 3",Simple Aggregation Queries,slack,False,False,False
"MATCH (m:Message {text: '<@U08J18KHB> has joined the channel'})<-[:TO_MESSAGE]-(r:Reaction)
MATCH (u:User)-[:REACTED]->(r)
RETURN u.name AS UserName",Simple Aggregation Queries,slack,False,False,False
"MATCH (c:Channel {name: 'help-import'})<-[:IN_CHANNEL]-(m:Message)
MATCH (r:Reaction)-[:TO_MESSAGE]->(m)
MATCH (e:Emoji)<-[:REACTION_TYPE]-(r)
RETURN DISTINCT e.name",Simple Aggregation Queries,slack,False,False,True
"MATCH (d:Deleted {skype: 'tvpind'})
RETURN d.title AS Title",Simple Aggregation Queries,slack,False,False,True
"MATCH (m:Message)-[:IN_CHANNEL]->(c:Channel)
WHERE m.createdAt < datetime('2020-01-01T00:00:00Z')
WITH c, max(m.createdAt) AS LatestMessageTime
RETURN c",Simple Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)-[:IN_CHANNEL]-(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN DISTINCT c.name AS ChannelName",Simple Aggregation Queries,slack,False,False,False
"MATCH (c:Channel {name: 'help-import'})
RETURN c.purpose AS Purpose",Simple Aggregation Queries,slack,False,False,True
"MATCH (a:AppUser)
WHERE a.is_custom_image = true AND a.image_original IS NOT NULL
RETURN a.image_original AS CustomImage",Simple Aggregation Queries,slack,False,False,False
"MATCH (u:Deleted)-[:POSTED]->(m:Message)
WHERE m.createdAt >= datetime('2017-01-01T00:00:00Z') AND m.createdAt < datetime('2018-01-01T00:00:00Z')
RETURN u",Simple Aggregation Queries,slack,False,False,False
"MATCH (o:Owner)-[:IN_TIMEZONE]->(tz:TimeZone {id: 'Europe/Amsterdam'})
RETURN o.first_name AS FirstName",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
RETURN DISTINCT b.name AS BotNames",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:EDITED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'organize-meetups'})
RETURN DISTINCT u",Simple Aggregation Queries,slack,False,False,False
"MATCH (a:Admin {name: 'michael.neo'})-[:REACTED]->(r:Reaction)
RETURN r",Simple Aggregation Queries,slack,False,False,True
"MATCH (c:Channel {name: 'neo4j-graphql'})<-[:IN_CHANNEL]-(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN a.thumb_width",Simple Aggregation Queries,slack,False,False,True
"MATCH (m:Message)-[:MENTIONS_USER]->(u:User {name: 'michael.neo'})
RETURN m",Simple Aggregation Queries,slack,False,False,True
"MATCH (c:Channel {name: 'neo4j-graphql'})<-[:IN_CHANNEL]-(tm:ThreadedMessage)
RETURN tm.title AS ThreadedMessageTitle",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:IN_TIMEZONE]->(tz:TimeZone {label: 'Central European Time'})
RETURN u",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot)-[:MEMBER_OF]->(c:Channel {id: 'C08J10PT2'})
RETURN b.title AS BotTitle",Complex Retrieval Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
WHERE EXISTS {
  MATCH (m)<-[:EDITED]-(a:Admin)
}
WITH c, max(m.createdAt) AS LatestMessageTime
MATCH (m2:Message {createdAt: LatestMessageTime})<-[:EDITED]-(a:Admin)
WHERE (m2)<-[:IN_CHANNEL]-(c)
RETURN c",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)
RETURN u, count(m) AS messages_posted
ORDER BY messages_posted DESC
LIMIT 5",Simple Aggregation Queries,slack,False,False,True
"MATCH (a:Admin {real_name: ""Michael Hunger""})-[:MEMBER_OF]->(c:Channel)
RETURN c.name, c.pagerank",Simple Aggregation Queries,slack,False,False,False
"MATCH (r:Reaction)-[:TO_MESSAGE]->(m:Message {id: '1507313352.000514'})
RETURN r",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot {color: '3c8c69'})
RETURN b",Simple Aggregation Queries,slack,False,False,False
"MATCH (po:PrimaryOwner {name: 'michael.neo'})-[:CREATED]->(c:Channel)
RETURN c.topic AS Topic",Simple Aggregation Queries,slack,False,False,False
"MATCH (a:Attachment)
WHERE a.thumb_height > 3000
RETURN a",Simple Aggregation Queries,slack,False,False,True
"MATCH (a:Admin {color: '9f69e7'})
RETURN a.status_text AS StatusText",Simple Aggregation Queries,slack,False,False,False
"MATCH (o:Owner {last_name: 'Needham'})
RETURN o",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.is_custom_image = true
RETURN u.name",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User {team: 'T08J10GA2'})-[:CREATED]->(c:Channel)
RETURN c.name AS ChannelName",Simple Aggregation Queries,slack,False,False,True
"MATCH (a:Admin)
RETURN a.image_512 AS ProfilePicture",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'neo4j-graphql'})
RETURN b.real_name AS BotRealName",Simple Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)
WHERE c.is_archived = true
RETURN c",Simple Aggregation Queries,slack,False,False,True
"MATCH (m:Message)-[:HAS_REACTION]->(r:Reaction)-[:REACTION_TYPE]->(e:Emoji {name: 'simple_smile'})
RETURN m",Simple Aggregation Queries,slack,False,False,True
"MATCH (tm:ThreadedMessage {id: '1581274875.020900'})-[:MENTIONS_USER]->(u:User)
RETURN u",Simple Aggregation Queries,slack,False,False,True
"MATCH (po:PrimaryOwner {display_name: 'michael.neo'})-[:CREATED]->(c:Channel)
RETURN c.name",Simple Aggregation Queries,slack,False,False,True
"MATCH (n)
WHERE n.status_expiration >= datetime('2020-01-01T00:00:00Z').epochMillis AND n.status_expiration < datetime('2021-01-01T00:00:00Z').epochMillis
RETURN n",Simple Aggregation Queries,slack,False,False,False
"MATCH (po:PrimaryOwner)-[:CREATED]->(c:Channel)
WHERE c.createdAt < datetime('2016-01-01T00:00:00Z')
RETURN po",Simple Aggregation Queries,slack,False,False,True
"MATCH (c:Channel {name: 'neo4j-graphql'})
RETURN c.createdAt AS CreationDate",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)-[:EDITED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'help-import'})
WITH m, u
ORDER BY m.createdAt DESC
LIMIT 1
RETURN u.image_24 AS UserImage",Simple Aggregation Queries,slack,False,False,True
"MATCH (c:Channel)
RETURN c.name, c.pagerank
ORDER BY c.pagerank DESC
LIMIT 5",Simple Aggregation Queries,slack,False,False,False
"MATCH (m:Message)-[:IN_CHANNEL]->(c:Channel)
WHERE m.createdAt < datetime('2018-01-01T00:00:00Z')
RETURN DISTINCT c.topic AS ChannelTopic",Complex Retrieval Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)
RETURN m",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:IN_TIMEZONE]->(tz:TimeZone {id: 'Europe/Amsterdam'})
WHERE exists {
  (u)-[:POSTED]->(m:Message)
}
WITH u, count{(u)-[:POSTED]->(m:Message)} AS messageCount
WHERE messageCount > 5
RETURN u",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {color: '9f69e7'})
RETURN u.display_name AS DisplayName",Complex Retrieval Queries,slack,False,False,True
"MATCH (po:PrimaryOwner {title: 'Caretaker General Community Neo4j'})-[:CREATED]->(c:Channel)
RETURN c",Complex Retrieval Queries,slack,False,False,True
"MATCH (m:Message)-[e:EDITED]->()
WHERE e.editedAt > datetime(m.createdAt).epochMillis
RETURN m
ORDER BY m.createdAt
LIMIT 5",Complex Retrieval Queries,slack,False,False,True
"MATCH (c:Channel)-[:IN_CHANNEL]-(m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
WHERE a.title_link CONTAINS 'neo4j.com'
RETURN DISTINCT c",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:MEMBER_OF]->(c:Channel)
WITH u, c, c.pagerank AS pr
ORDER BY pr DESC
LIMIT 1
RETURN u.status_text AS StatusText",Complex Retrieval Queries,slack,False,False,True
"MATCH (o:Owner)-[:CREATED]->(c:Channel {name: 'neo4j-graphql'})
RETURN o",Complex Retrieval Queries,slack,False,False,True
"MATCH (c:Channel {id: 'C08J10PT2'})<-[:IN_CHANNEL]-(m:Message)
MATCH (r:Reaction)-[:TO_MESSAGE]->(m)
RETURN r",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {skype: 'technige'})
RETURN u",Complex Retrieval Queries,slack,False,False,True
"MATCH (c:Channel)<-[:IN_CHANNEL]-(m:Message)
RETURN c.name, count(m) AS message_count
ORDER BY message_count DESC
LIMIT 3",Complex Retrieval Queries,slack,False,False,True
"MATCH (m:Message)-[:IN_CHANNEL]->(c:Channel {name: 'introduce-yourself'})
RETURN m.text AS LastMessageText
ORDER BY m.createdAt DESC
LIMIT 1",Complex Retrieval Queries,slack,False,False,True
"MATCH (a:Admin {real_name: 'Michael Hunger'})-[:EDITED]->(m:Message)
RETURN m",Complex Retrieval Queries,slack,False,False,False
"MATCH (c:Channel)
WHERE c.topic CONTAINS 'Neo4j'
RETURN c.name",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {real_name: 'Michael Hunger'})-[:POSTED]->(m:Message)-[:MENTIONS_CHANNEL]->(c:Channel)
RETURN DISTINCT c",Complex Retrieval Queries,slack,False,False,False
"MATCH (u:User)-[:MEMBER_OF]->(c:Channel {name: 'help-import'})
RETURN u.name",Simple Aggregation Queries,slack,False,False,True
"MATCH (u:User)
WHERE u.image_512 CONTAINS 'avatars.slack-edge'
RETURN u",Complex Retrieval Queries,slack,False,False,True
"MATCH (a:Admin)-[:CREATED]->(c:Channel)
WHERE c.is_general = true
RETURN c.name, c.id, c.createdAt",Complex Retrieval Queries,slack,False,False,True
"MATCH (tm:ThreadedMessage)-[:IN_REPLY_TO]->(m:Message {id: '1507313352.000514'})
RETURN tm",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {display_name_normalized: 'michael.neo'})-[:MEMBER_OF]->(c:Channel)
RETURN u, c",Complex Retrieval Queries,slack,False,False,False
"MATCH (u:User {real_name: 'Michael Hunger'})-[:POSTED]->(m:Message)
MATCH (r:Reaction)-[:TO_MESSAGE]->(m)
MATCH (e:Emoji)<-[:REACTION_TYPE]-(r)
RETURN DISTINCT e.name",Complex Retrieval Queries,slack,False,False,False
"MATCH (m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
RETURN MAX(a.thumb_height) AS max_thumb_height",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:POSTED]->(m:Message)-[:IN_CHANNEL]->(c:Channel {id: 'C08J10PT2'})
WHERE u.status_emoji = ':python:'
RETURN DISTINCT u",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {name: 'lee.freeman'})-[:POSTED]->(m:Message)
RETURN m",Simple Aggregation Queries,slack,False,False,True
"MATCH (b:Bot)-[:MEMBER_OF]->(c:Channel {name: 'random'})
RETURN b.real_name AS BotRealName",Complex Retrieval Queries,slack,False,False,True
"MATCH (m:Message)-[:HAS_ATTACHMENT]->(a:Attachment)
WHERE a.thumb_url CONTAINS 'neo4j'
RETURN m, a",Complex Retrieval Queries,slack,False,False,False
"MATCH (u:User)-[:MEMBER_OF]->(:Channel)
WHERE u.skype IS NOT NULL
RETURN u",Complex Retrieval Queries,slack,False,False,True
"MATCH (a:Admin)-[:CREATED]->(c:Channel)
WHERE c.is_archived = true
RETURN c.name",Complex Retrieval Queries,slack,False,False,False
"MATCH (po:PrimaryOwner {display_name: 'michael.neo'})-[:CREATED]->(c:Channel)
RETURN c",Complex Retrieval Queries,slack,False,False,False
"MATCH (m:Message)-[:REACTION_TYPE]->(e:Emoji {name: 'simple_smile'})
WHERE m.createdAt.year = 2015
RETURN m",Complex Retrieval Queries,slack,False,False,True
"MATCH (po:PrimaryOwner {status_emoji: ':palm_tree:'})
RETURN po",Complex Retrieval Queries,slack,False,False,True
"MATCH (b:Bot {name: 'archivebot'})
RETURN b.color AS Color",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User)-[:MEMBER_OF]->(c:Channel {id: 'C08LLJF16'})
WHERE u.status_expiration = 0
RETURN u",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {title: 'Caretaker General Community Neo4j'})-[:EDITED]->(m:Message)
RETURN u, m",Complex Retrieval Queries,slack,False,False,True
"MATCH (m:Message)-[:MENTIONS_CHANNEL]->(c:Channel {id: 'C08J10PT2'})
RETURN m",Complex Retrieval Queries,slack,False,False,True
"MATCH (p:PrimaryOwner)-[:CREATED]->(c:Channel)
WITH c, count(p) AS numOwners
WHERE numOwners > 1
RETURN c.name AS ChannelName, numOwners",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {display_name: 'michael.neo'})-[:CREATED]->(c:Channel)
RETURN c",Simple Aggregation Queries,slack,False,False,True
"MATCH (a:Admin)-[:MEMBER_OF]->(c:Channel {id: 'C08J10PT2'})
RETURN a.first_name AS FirstName",Complex Retrieval Queries,slack,False,False,True
"MATCH (b:Bot)-[:POSTED]->(m:Message)
WHERE m.text CONTAINS 'Google'
RETURN b",Complex Retrieval Queries,slack,False,False,True
"MATCH (d:Deleted)-[:POSTED]->(m:Message)
RETURN DISTINCT d.title AS Title",Complex Retrieval Queries,slack,False,False,False
"MATCH (u:User {last_name: 'Hunger'})-[:CREATED]->(c:Channel)
RETURN c",Complex Retrieval Queries,slack,False,False,True
"MATCH (u:User {display_name: 'DoubleMiP'})-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
RETURN q
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u.display_name, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 3",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
RETURN q",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q.title
ORDER BY q.view_count DESC
LIMIT 5",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.view_count >= 50 AND q.view_count <= 100
RETURN q
ORDER BY q.creation_date ASC
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (t:Tag)<-[:TAGGED]-(q:Question)
RETURN t.name, count(q) AS usage_count
ORDER BY usage_count DESC
LIMIT 3",Pathfinding Queries,stackoverflow2,True,False,False
"MATCH (u:User)-[:PROVIDED]->(a:Answer {link: 'https://stackoverflow.com/a/69272967'})
RETURN u.display_name AS user_who_provided_answer",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WHERE q.view_count > 100
RETURN u
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (u:User {uuid: 16922964})-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
RETURN q
ORDER BY q.creation_date DESC
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count > 2
RETURN q
ORDER BY q.creation_date
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question {title: 'even after null check why I am getting null value in neo4j?'})
RETURN u
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.creation_date < 1609459200
RETURN q
ORDER BY q.creation_date ASC
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u.display_name AS User, count(q) AS Questions_Asked
ORDER BY Questions_Asked DESC
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.creation_date DESC
LIMIT 5",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WHERE q.title = 'Neo4j- APOC trigger fires without any reason'
RETURN u.display_name",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q.title
ORDER BY length(q.body_markdown) DESC
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.view_count ASC
LIMIT 5",Pathfinding Queries,stackoverflow2,True,False,False
"MATCH (u:User)-[:PROVIDED]->(a:Answer)
WITH u, avg(a.score) AS avgScore
ORDER BY avgScore DESC
LIMIT 1
RETURN u.display_name AS UserWithHighestAvgScore, avgScore",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question {title: 'Create graph from recursive JSON data using apoc.load.json and use UNWIND and FOREACH for setting property'})
RETURN u.display_name AS UserName",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS questions_count
WHERE questions_count > 2
RETURN u
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (c:Comment)
WHERE c.score = 3
RETURN c
ORDER BY c.uuid DESC
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
RETURN q.title, q.link, q.view_count
ORDER BY q.view_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question {title: 'Specify a certain column as id values in Neo4j Spark connector'})
MATCH (c:Comment)-[:COMMENTED_ON]->(q)
RETURN c.uuid",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)
RETURN u.display_name AS user, count(c) AS comments_count
ORDER BY comments_count DESC
LIMIT 1",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentCount
ORDER BY commentCount DESC
LIMIT 3
RETURN q.creation_date AS CreationDate",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (t:Tag)
RETURN DISTINCT t.name;",Complex Aggregation Queries,stackoverflow2,False,False,False
"MATCH (:Answer {is_accepted: true})
RETURN uuid",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name AS Tag, max(q.view_count) AS MaxViewCount
ORDER BY MaxViewCount DESC",Complex Aggregation Queries,stackoverflow2,True,False,False
"MATCH (q:Question)
WHERE q.answer_count = 0
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(:Question)
RETURN a.body_markdown
ORDER BY a.score DESC
LIMIT 3",Complex Aggregation Queries,stackoverflow2,False,False,False
"MATCH (q:Question {title: 'Neo4j- APOC trigger fires without any reason'})
MATCH (u:User)-[:COMMENTED]->(:Comment)-[:COMMENTED_ON]->(q)
RETURN count(DISTINCT u) AS NumberOfCommentingUsers",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.creation_date >= 1609459200 AND q.creation_date <= 1640995199
RETURN q.title, q.view_count",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count > 1
RETURN q",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentsCount
ORDER BY commentsCount DESC
LIMIT 3
RETURN q.title, q.link, commentsCount",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'Anu'})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
RETURN t",Complex Aggregation Queries,stackoverflow2,True,False,False
"MATCH (u:User {display_name: 'Mohammed Faraz ali'})-[:ASKED]->(q:Question)
WHERE q.accepted_answer_id IS NOT NULL
MATCH (a:Answer {uuid: q.accepted_answer_id})
RETURN a.link AS AcceptedAnswerLink",Complex Aggregation Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(:Question)
RETURN a
ORDER BY a.score DESC
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WITH q, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentCount
ORDER BY commentCount DESC
LIMIT 1
WITH q
MATCH (u:User)-[:PROVIDED]->(:Answer)-[:ANSWERED]->(q)
RETURN u.display_name AS user, count(a) AS answersProvided
ORDER BY answersProvided DESC
LIMIT 1",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question {title: 'Neo.ClientError.Statement.ExternalResourceFailed error on loading CSV file from local'})
RETURN u.display_name AS asked_by",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q
ORDER BY q.view_count DESC
LIMIT 1
MATCH (a:Answer)-[:ANSWERED]->(q)
RETURN a
ORDER BY a.score ASC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WITH q, count(t) AS tags_count
ORDER BY tags_count DESC, q.view_count DESC
RETURN q.title, q.view_count
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u.display_name AS user, q.view_count AS views
ORDER BY q.view_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)<-[:ANSWERED]-(a:Answer)
WHERE a.is_accepted = false
RETURN q.title AS QuestionTitle, q.link AS QuestionLink, max(a.score) AS HighestUnacceptedAnswerScore
ORDER BY HighestUnacceptedAnswerScore DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count > 1
RETURN q
ORDER BY q.creation_date DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,True,False,False
"MATCH (q:Question)
WITH q, size((q)-[:TAGGED]->(:Tag)) AS tagCount
ORDER BY tagCount DESC
LIMIT 3
MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q)
RETURN u.display_name AS UserName, q.title AS QuestionTitle, q.link AS QuestionLink",Simple Aggregation Queries,stackoverflow2,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.accepted_answer_id IS NULL
RETURN q.title, count(t) AS tag_count
ORDER BY tag_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count > 0 AND q.accepted_answer_id IS NOT NULL
RETURN q
ORDER BY q.answer_count ASC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentCount
ORDER BY commentCount DESC
LIMIT 3
RETURN q.title AS QuestionTitle, q.accepted_answer_id AS AcceptedAnswerID, commentCount",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q.title, q.view_count
ORDER BY q.view_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:COMMENTED_ON]-(c:Comment)
WITH q, count(c) AS num_comments
ORDER BY num_comments DESC
LIMIT 5
MATCH (q)-[:TAGGED]->(t:Tag)
RETURN q.title, q.link, num_comments, collect(t.name) AS tags",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer {is_accepted: false})
WITH u, count(a) AS answersCount
ORDER BY answersCount DESC
LIMIT 3
RETURN u.display_name AS UserName, answersCount",Simple Aggregation Queries,stackoverflow2,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WITH q, count(t) AS tags_count
ORDER BY tags_count DESC
LIMIT 3
RETURN q.title, q.answer_count",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH q, u
ORDER BY q.view_count ASC
LIMIT 3
RETURN q, u",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WITH q, count(a) AS answers, q.view_count AS views
ORDER BY views DESC
RETURN u.display_name, answers
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'schernichkin'})-[:ASKED]->(q:Question)
WHERE q.view_count > 100
RETURN q",Verbose query,stackoverflow2,False,False,False
"MATCH (u:User)-[:PROVIDED]->(a:Answer)
WITH u, count(a) AS answersCount
ORDER BY answersCount ASC
LIMIT 3
RETURN u.display_name AS UserName, answersCount",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (a:Answer {is_accepted: true})
RETURN a
ORDER BY a.score DESC
LIMIT 5",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentsCount
ORDER BY commentsCount DESC
LIMIT 5
RETURN q.title AS Title, commentsCount AS NumberOfComments",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q.title, q.accepted_answer_id, q.answer_count
ORDER BY q.answer_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Pathfinding Queries,stackoverflow2,True,False,False
"MATCH (q:Question {title: 'Create graph from recursive JSON data using apoc.load.json'})-[:TAGGED]->(t:Tag)
RETURN t.name",Pathfinding Queries,stackoverflow2,True,False,False
"MATCH (q:Question)
RETURN q
ORDER BY q.answer_count DESC
LIMIT 5",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)
RETURN u.display_name, count(a) AS answers_provided
ORDER BY answers_provided DESC
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)
WITH u, count(c) AS commentsCount
ORDER BY commentsCount DESC
LIMIT 3
RETURN u.display_name AS UserName, commentsCount",Pathfinding Queries,stackoverflow2,False,False,False
"MATCH (q:Question)-[:ANSWERED]->(a:Answer {is_accepted: true})
RETURN q
ORDER BY q.view_count DESC
LIMIT 5",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (c:Comment)-[:COMMENTED_ON]->(q:Question)-[:TAGGED]->(t:Tag {name: 'cypher'})
RETURN c.link AS CommentLink, c.score AS CommentScore
ORDER BY c.score DESC
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
RETURN a
ORDER BY a.uuid DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count = 0
RETURN q
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
RETURN q
ORDER BY q.creation_date DESC
LIMIT 5",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WHERE exists {
  (c:Comment)-[:COMMENTED_ON]->(q)
}
WITH q, count(c) AS commentsCount, u
ORDER BY commentsCount DESC
RETURN u.display_name, count(DISTINCT q) AS answeredQuestionsCount
ORDER BY answeredQuestionsCount DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, size((q)-[:TAGGED]->(:Tag)) AS tagCount
ORDER BY tagCount DESC
RETURN q.title AS Title, tagCount AS NumberOfTags
LIMIT 1",Simple Aggregation Queries,stackoverflow2,True,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.answer_count > 0
RETURN t.name, t.link
ORDER BY q.creation_date DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN q.title, q.view_count, u.display_name
ORDER BY q.view_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:ANSWERED]->(a:Answer {is_accepted: true})
RETURN q.title AS QuestionTitle, q.score AS QuestionScore, a.link AS AcceptedAnswerLink
ORDER BY q.score DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WITH u, COUNT(DISTINCT q) AS questions_answered
ORDER BY questions_answered DESC
LIMIT 3
RETURN u.display_name AS user, questions_answered",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'schernichkin'})-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Pathfinding Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)
RETURN a
ORDER BY a.score DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)<-[:ANSWERED]-(a:Answer {is_accepted: true})
WHERE (u)-[:PROVIDED]->(a)
RETURN q
LIMIT 3",Verbose query,stackoverflow2,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.accepted_answer_id IS NOT NULL
RETURN t.name, count(q) AS usage
ORDER BY usage DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.creation_date >= 1577836800 AND q.creation_date <= 1609459199
RETURN q
ORDER BY q.answer_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WHERE a.is_accepted = true AND q.accepted_answer_id IS NOT NULL
WITH u, count{(u)-[:PROVIDED]->(:Answer)} AS answersCount
WHERE answersCount > 50
RETURN u, a, q
LIMIT 5",Verbose query,stackoverflow2,False,False,False
"MATCH (a:Answer)-[:ANSWERED]->(:Question)
RETURN a
ORDER BY a.score ASC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
WITH q, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentCount
ORDER BY commentCount DESC
LIMIT 5
RETURN q",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u.display_name, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WITH q, count(DISTINCT t) AS uniqueTags
ORDER BY uniqueTags DESC
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,False
"MATCH (a:Answer)-[:ANSWERED]->(q:Question)
RETURN a, q
ORDER BY a.uuid ASC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WITH q, count(t) AS tagCount
WHERE tagCount > 1
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:ANSWERED]->(a:Answer {is_accepted: true})
WHERE a.score < 0
RETURN q.title, q.link, a.score
ORDER BY a.score ASC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)
WHERE NOT exists{ (u)-[:ASKED]->(:Question) }
RETURN a
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.body_markdown CONTAINS 'index'
RETURN q
LIMIT 5",Verbose query,stackoverflow2,True,False,False
"MATCH (u:User)-[:PROVIDED]->(a:Answer)
WITH u, count(a) AS totalAnswers
WHERE totalAnswers > 1000
MATCH (u)-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.accepted_answer_id IS NOT NULL AND q.view_count > 500
RETURN q
ORDER BY q.creation_date
LIMIT 5",Verbose query,stackoverflow2,False,False,False
"MATCH (q:Question)
WHERE q.view_count IS NOT NULL AND q.answer_count IS NOT NULL
WITH q, toFloat(q.view_count) / q.answer_count AS score_to_comment_ratio
ORDER BY score_to_comment_ratio DESC
LIMIT 5
RETURN q.title, q.link, score_to_comment_ratio",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q, count{(q)-[:TAGGED]->(:Tag)} AS tagCount
ORDER BY tagCount DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE NOT EXISTS { (q)<-[:COMMENTED_ON]-(:Comment) }
RETURN q
ORDER BY q.view_count ASC
LIMIT 5",Verbose query,stackoverflow2,False,False,False
"MATCH (q:Question)-[:ANSWERED]->(a:Answer)
WHERE q.creation_date = a.creation_date
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WHERE NOT EXISTS {
  (u)-[:COMMENTED]->(:Comment)-[:COMMENTED_ON]->(q)
}
RETURN u.display_name, count(a) AS answers_provided
ORDER BY answers_provided DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'cypher'})
WHERE q.accepted_answer_id IS NOT NULL
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment)<-[:COMMENTED]-(u:User)
WITH q, COUNT(DISTINCT u) AS uniqueCommenters
ORDER BY uniqueCommenters DESC
LIMIT 3
RETURN q, uniqueCommenters",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question),
      (u)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q)
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY length(q.body_markdown) DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WHERE exists {
  (u)-[:ASKED]->(:Question)
}
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count > q.view_count
RETURN q
ORDER BY q.answer_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)
WITH u, count(a) AS answersCount
WHERE answersCount > 10
MATCH (u)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WITH q, count(c) AS commentsCount
RETURN q
ORDER BY commentsCount DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WITH q, count(c) AS commentsCount
ORDER BY commentsCount DESC
RETURN q.title, q.link, commentsCount
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (a:Answer)<-[:ANSWERED]-(q:Question)
WITH a, count{(a)<-[:COMMENTED_ON]-(:Comment)} AS commentsCount
ORDER BY commentsCount DESC
LIMIT 3
RETURN a, commentsCount",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
WHERE exists {
  MATCH (q)<-[:ANSWERED]-(a:Answer)<-[:PROVIDED]-(u:User)
  WITH q, count(DISTINCT u) AS distinctUsers
  WHERE distinctUsers > 1
}
RETURN q
ORDER BY q.creation_date
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WITH u, count(DISTINCT q) AS numQuestions
WHERE numQuestions > 100
MATCH (u)-[:ASKED]->(q2:Question)
RETURN q2
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(q:Question)
WHERE q.view_count IS NOT NULL AND a.score IS NOT NULL AND q.view_count > 0
WITH a, q, toFloat(q.view_count) / a.score AS ratio
ORDER BY ratio DESC
RETURN a.link AS AnswerLink, a.title AS AnswerTitle, ratio
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH q, count(u) AS num_users
ORDER BY num_users DESC
LIMIT 5
RETURN q",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH q, count{(u)-[:COMMENTED]->(:Comment)-[:COMMENTED_ON]->(q)} AS commentsCount
ORDER BY commentsCount DESC
LIMIT 3
RETURN q, commentsCount",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)
WHERE u.uuid IS NOT NULL
WITH u
ORDER BY u.uuid DESC
LIMIT 1
MATCH (u)-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.creation_date
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WITH u, count(a) AS totalAnswers, q
WHERE totalAnswers < 3
MATCH (q)
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'update'
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,False
"MATCH (q:Question)
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)<-[:ANSWERED]-(a:Answer)
WHERE a.is_accepted = true AND (u)-[:PROVIDED]->(a)
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.body_markdown CONTAINS 'neo4j'
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(:Answer)
WHERE NOT EXISTS { (u)-[:ASKED]->(:Question) }
RETURN u
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)
WITH u, avg(a.score) AS avgScore
ORDER BY avgScore DESC
LIMIT 5
RETURN u.display_name AS UserName, avgScore",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.view_count IS NOT NULL
WITH q ORDER BY q.view_count DESC LIMIT 1
MATCH (u:User)-[:COMMENTED]->(:Comment)-[:COMMENTED_ON]->(q)
RETURN u
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'cypher'})
WHERE q.answer_count > 1
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentCount
ORDER BY commentCount DESC
LIMIT 3
RETURN q",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WHERE a.is_accepted = true
RETURN u.display_name, COUNT(a) AS accepted_answers
ORDER BY accepted_answers DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.accepted_answer_id IS NOT NULL
RETURN t.name, count(q) AS question_count
ORDER BY question_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count IS NOT NULL AND q.view_count IS NOT NULL AND q.view_count > 0
RETURN q
ORDER BY toFloat(q.answer_count) / q.view_count DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE exists{ (q)-[:COMMENTED_ON]->(:Comment) }
WITH t, count{(q)-[:COMMENTED_ON]->(:Comment)} AS commentCount
ORDER BY commentCount DESC
RETURN t.name, commentCount
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.answer_count > 3
RETURN t.name, count(q) AS question_count
ORDER BY question_count DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,False
"MATCH (u:User)-[:COMMENTED]->(c:Comment)
RETURN u.display_name, count(c) AS comments_count
ORDER BY comments_count DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.view_count ASC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.creation_date DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE NOT exists{(q)<-[:ANSWERED]-(:Answer)}
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.answer_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,False
"MATCH (q:Question)
WHERE q.answer_count > 1 AND q.view_count < 50
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q, count{(u:User)-[:COMMENTED]->(:Comment)-[:COMMENTED_ON]->(q)} AS commentCount
ORDER BY commentCount DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE exists {
  MATCH (u)-[:COMMENTED]->(:Comment)-[:COMMENTED_ON]->(q)
}
RETURN q
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)
RETURN u.display_name, count(a) AS answers_provided
ORDER BY answers_provided DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question), (u)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q)
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE NOT exists{ (u)-[:PROVIDED]->(:Answer) }
RETURN u, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:ANSWERED]->(a:Answer {is_accepted: true})
RETURN q.title, a.score
ORDER BY a.score ASC
LIMIT 3",Verbose query,stackoverflow2,False,False,False
"MATCH (q:Question)
RETURN q
ORDER BY q.creation_date
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
WHERE q.answer_count > 2
RETURN q
ORDER BY q.creation_date
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (t:Tag)<-[:TAGGED]-(q:Question)<-[:COMMENTED_ON]-(c:Comment)
WITH t, count(c) AS commentsCount
ORDER BY commentsCount DESC
LIMIT 3
RETURN t.name AS Tag, commentsCount",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'error'
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)<-[:ANSWERED]-(a:Answer)
WHERE (a)-[:PROVIDED]->(u)
RETURN q.title, q.view_count
ORDER BY q.view_count DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE exists {
  (u)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q)
}
WITH u, q, count{(u)-[:COMMENTED]->(:Comment)-[:COMMENTED_ON]->(q)} AS ownComments
WHERE ownComments > 1
RETURN u
ORDER BY u.uuid
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WHERE exists {
  (u)-[:COMMENTED]->(:Comment)-[:COMMENTED_ON]->(q)
}
RETURN u.display_name, count(a) AS answers_provided
ORDER BY answers_provided DESC
LIMIT 3",Verbose query,stackoverflow2,True,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.answer_count = 0
RETURN t.name, count(t) AS frequency
ORDER BY frequency DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:COMMENTED_ON]-(:Comment)
WHERE q.view_count IS NOT NULL
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.creation_date >= 1609459200 AND q.creation_date < 1640995200
RETURN q
ORDER BY q.creation_date ASC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.creation_date DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (q:Question)-[:ANSWERED]->(a:Answer {is_accepted: true})
WHERE a.score <= 0
RETURN q
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(q:Question)
WHERE a.is_accepted = false
RETURN a
ORDER BY a.score DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)
WHERE NOT exists{ (u)-[:PROVIDED]->(:Answer) }
RETURN u.display_name, count(c) AS comments_count
ORDER BY comments_count DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
WHERE q.accepted_answer_id IS NULL
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Verbose query,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)<-[:ANSWERED]-(a:Answer)-[:PROVIDED]->(u)
RETURN u.display_name, COUNT(DISTINCT q) AS num_questions
ORDER BY num_questions DESC
LIMIT 5",Verbose query,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(q:Question)
WHERE a.is_accepted = true
RETURN a, q
ORDER BY a.score DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment)<-[:COMMENTED]-(u:User)
WITH q, count(DISTINCT u) AS uniqueCommenters
ORDER BY uniqueCommenters DESC
LIMIT 5
RETURN q, uniqueCommenters",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, q, size((u)-[:COMMENTED]->(:Comment)) AS commentsCount
ORDER BY commentsCount DESC
LIMIT 5
RETURN q",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.view_count > 100
RETURN t
LIMIT 5",Complex Retrieval Queries,stackoverflow2,True,False,False
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WITH q, u, count(c) AS numComments
WHERE numComments > 2
RETURN q
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'Anu'})-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
RETURN a.link AS AnswerLink, a.score AS Score, q.title AS QuestionTitle
ORDER BY a.score DESC
LIMIT 5",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH u, count(q) AS questions_count
WHERE questions_count > 1
RETURN u
ORDER BY u.uuid
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
RETURN q.title, q.link, q.view_count
ORDER BY q.view_count DESC
LIMIT 5",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.view_count >= 50 AND q.view_count <= 100
RETURN q
ORDER BY q.creation_date
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WITH q, count(DISTINCT u) AS userCount
ORDER BY userCount DESC
LIMIT 1
MATCH (a:Answer)-[:ANSWERED]->(q)
RETURN a
ORDER BY a.score DESC
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (c:Comment)
RETURN c
ORDER BY c.uuid DESC
LIMIT 5",Simple Retrieval Queries,stackoverflow2,True,False,False
"MATCH (q:Question)
WITH q, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentCount
ORDER BY commentCount DESC
RETURN q
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.accepted_answer_id IS NOT NULL
WITH u, count(q) AS num_accepted_questions
ORDER BY num_accepted_questions DESC
LIMIT 3
RETURN u.display_name, num_accepted_questions",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t1:Tag), (q)-[:TAGGED]->(t2:Tag)
WHERE t1.name = 'neo4j' AND t2.name = 'cypher'
RETURN q",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment)
WHERE c.score = 3
RETURN q
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE size{(q)-[:TAGGED]->(:Tag)} >= 3
WITH q
MATCH (a:Answer)-[:ANSWERED]->(q)
RETURN a
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.creation_date >= 1609459200 AND q.creation_date <= 1640995199
RETURN u.display_name, count(q) AS questions_asked
ORDER BY questions_asked DESC",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.answer_count = 0
RETURN t
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:ANSWERED]->(a:Answer {is_accepted: true})
WHERE a.score < 0
RETURN q.title
ORDER BY q.view_count DESC
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
WITH u, COUNT(c) AS comments_count
WHERE comments_count > 1
RETURN u
ORDER BY comments_count DESC
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'Mohammed Faraz ali'})-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.creation_date DESC
LIMIT 5",Complex Retrieval Queries,stackoverflow2,False,False,False
"MATCH (q:Question)
WHERE NOT exists{(q)-[:ANSWERED]->(:Answer)}
RETURN q
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, size((:Comment)-[:COMMENTED_ON]->(q)) AS commentCount
ORDER BY commentCount DESC
LIMIT 5
RETURN q, commentCount",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.display_name STARTS WITH 'A'
RETURN q
ORDER BY q.creation_date DESC
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'Mohammed Faraz ali'})-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
RETURN q
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)
RETURN u.display_name AS UserName, count(a) AS AnswersProvided
ORDER BY AnswersProvided DESC
LIMIT 5",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
WHERE q.accepted_answer_id IS NOT NULL
RETURN q
ORDER BY q.creation_date DESC
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.answer_count > 2
RETURN t.name, count(q) AS question_count
ORDER BY question_count DESC
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)<-[:ANSWERED]-(a:Answer)<-[:PROVIDED]-(u:User)
WITH q, count(DISTINCT u) AS distinctUsers
WHERE distinctUsers > 3
RETURN q
LIMIT 5",Complex Retrieval Queries,stackoverflow2,False,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.uuid < 500000
RETURN q
ORDER BY q.creation_date ASC
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q ORDER BY q.view_count DESC LIMIT 1
MATCH (c:Comment)-[:COMMENTED_ON]->(q)
RETURN c ORDER BY c.uuid DESC LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
WHERE q.answer_count = 0
RETURN q
ORDER BY q.creation_date
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question {title: 'Create graph from recursive JSON data using apoc.load.json and use UNWIND and FOREACH for setting property'})
RETURN u.display_name, count(c) AS comments_count
ORDER BY comments_count DESC
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.creation_date >= 1609459200 AND q.creation_date <= 1640995199
RETURN q
LIMIT 5",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'Anu'})-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WHERE q.view_count IS NOT NULL
RETURN q
ORDER BY q.view_count ASC
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (t:Tag)<-[:TAGGED]-(q:Question)
WHERE exists{(q)<-[:COMMENTED_ON]-(:Comment)}
RETURN t.name, count(q) AS frequency
ORDER BY frequency DESC
LIMIT 5",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(q:Question)
WHERE q.view_count > 80 AND a.is_accepted = true
RETURN a.link
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.accepted_answer_id IS NOT NULL
RETURN q
ORDER BY q.answer_count DESC
LIMIT 5",Complex Retrieval Queries,stackoverflow2,False,False,False
"MATCH (q:Question)
WHERE q.answer_count = 0 AND q.view_count IS NOT NULL
RETURN q
ORDER BY q.view_count DESC
LIMIT 5",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (c:Comment)
WHERE c.link CONTAINS 'neomodel'
RETURN c
ORDER BY c.score DESC
LIMIT 5",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'schernichkin'})-[:ASKED]->(q:Question)<-[:COMMENTED_ON]-(c:Comment)<-[:COMMENTED]-(commenter:User)
RETURN commenter.display_name, count(c) AS comments_count
ORDER BY comments_count DESC
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)
WHERE a.score < 0
RETURN a",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (t:Tag)<-[:TAGGED]-(q:Question)
WITH t, count(q) AS questionCount
ORDER BY questionCount DESC
LIMIT 3
RETURN t.name AS TagName, questionCount",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.view_count > 100
RETURN u",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count = 0
RETURN q
ORDER BY q.creation_date
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)
RETURN a
ORDER BY a.score ASC
LIMIT 3",Simple Retrieval Queries,stackoverflow2,True,False,False
"MATCH (q:Question)
RETURN q
ORDER BY q.view_count ASC
LIMIT 5",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (a:Answer {is_accepted: true})
RETURN a
ORDER BY a.uuid
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)
RETURN u.display_name, count(a) AS answers_provided
ORDER BY answers_provided DESC
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User {uuid: 16922964})-[:PROVIDED]->(a:Answer)
RETURN a",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
RETURN q
ORDER BY q.creation_date
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)
WITH u, count(c) AS commentsCount
ORDER BY commentsCount DESC
LIMIT 3
RETURN u.display_name AS UserName, commentsCount",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'Adrien Lemaire'})-[:ASKED]->(q:Question)
RETURN q",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (c:Comment)
WHERE c.score >= 2
RETURN c
ORDER BY c.uuid
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(:Question)
RETURN a
ORDER BY a.score DESC
LIMIT 5",Simple Retrieval Queries,stackoverflow2,True,False,False
"MATCH (u:User)
RETURN u
ORDER BY u.uuid
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.view_count DESC
LIMIT 5",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, size((:Comment)-[:COMMENTED_ON]->(q)) AS commentsCount
ORDER BY commentsCount DESC
LIMIT 3
MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q)
RETURN DISTINCT u.display_name AS commenter",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.answer_count DESC
LIMIT 5",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(q:Question)
WITH q, a.score AS score
ORDER BY score DESC
LIMIT 3
RETURN q.title AS QuestionTitle",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)
WHERE u.display_name STARTS WITH 'A'
RETURN u
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.creation_date DESC
LIMIT 5",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'cypher'})
WHERE q.answer_count > 1
RETURN q
ORDER BY q.creation_date
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.accepted_answer_id IS NOT NULL
RETURN q
ORDER BY q.view_count DESC
LIMIT 5",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WITH u, count(DISTINCT q) AS questions_answered
WHERE questions_answered > 3
RETURN u",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.title CONTAINS 'neo4j'
RETURN q
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, size((q)-[:TAGGED]->(:Tag)) AS tagCount
ORDER BY tagCount DESC
LIMIT 1
MATCH (a:Answer)-[:ANSWERED]->(q)
RETURN a
LIMIT 3",Simple Retrieval Queries,stackoverflow2,True,False,False
"MATCH (u:User)-[:COMMENTED]->(c:Comment)
WITH u, sum(c.score) AS totalScore
ORDER BY totalScore DESC
LIMIT 1
MATCH (u)-[:COMMENTED]->(highScoreComment:Comment)
RETURN highScoreComment",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'Adrien Lemaire'})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)<-[:COMMENTED_ON]-(c:Comment)
WHERE (u)-[:COMMENTED]->(c)
RETURN q
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.creation_date < 1600000000
RETURN q
ORDER BY q.creation_date DESC
LIMIT 5",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.creation_date >= 1609459200 AND q.creation_date < 1640995200
RETURN q
ORDER BY q.creation_date ASC
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count = 2
RETURN q
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WITH u, count(DISTINCT q) AS questionsCommented
WHERE questionsCommented > 5
RETURN u",Simple Retrieval Queries,stackoverflow2,False,False,False
"MATCH (a:Answer)-[:ANSWERED]->(q:Question)
WHERE a.is_accepted = false
RETURN a
LIMIT 3",Simple Retrieval Queries,stackoverflow2,False,False,True
"MATCH (t:Tag)<-[:TAGGED]-(q:Question)
WITH t, count(q) AS questionCount
ORDER BY questionCount ASC
LIMIT 3
RETURN t.name AS Tag, questionCount AS NumberOfQuestions",Simple Retrieval Queries,stackoverflow2,False,False,False
"MATCH (q:Question)
WITH q ORDER BY q.view_count DESC LIMIT 1
MATCH (c:Comment)-[:COMMENTED_ON]->(q)
RETURN c ORDER BY c.uuid ASC LIMIT 3",Simple Retrieval Queries,stackoverflow2,True,False,False
"MATCH (q:Question)
RETURN q
ORDER BY q.answer_count DESC
LIMIT 3",Simple Retrieval Queries,stackoverflow2,True,False,False
"MATCH (u:User)
WHERE u.display_name IS NOT NULL
RETURN u
ORDER BY length(u.display_name) DESC
LIMIT 3",Simple Retrieval Queries,stackoverflow2,True,False,False
"MATCH (q:Question)
WHERE q.view_count >= 50 AND q.view_count <= 100
RETURN q
ORDER BY q.creation_date
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (t:Tag)<-[:TAGGED]-(q:Question)
WITH t, count(q) AS questionCount
WHERE questionCount > 5
RETURN t.name, questionCount",Simple Retrieval Queries,stackoverflow2,False,False,False
"MATCH (q:Question)
RETURN q.title
ORDER BY q.view_count ASC
LIMIT 5",Complex Retrieval Queries,stackoverflow2,True,False,False
"MATCH (q:Question)
WITH q, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentsCount
ORDER BY commentsCount DESC
LIMIT 5
RETURN q AS MostCommentedQuestions, commentsCount",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.accepted_answer_id IS NOT NULL
WITH u, count(q) AS questionsWithAcceptedAnswers
ORDER BY questionsWithAcceptedAnswers DESC
LIMIT 3
RETURN u.display_name AS UserName, questionsWithAcceptedAnswers",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN t, q.answer_count AS answers
ORDER BY q.answer_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q
ORDER BY q.view_count DESC
LIMIT 1
MATCH (a:Answer)-[:ANSWERED]->(q)
RETURN a
ORDER BY a.score ASC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
RETURN q
ORDER BY q.creation_date DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(:Answer {score: 3})
WITH u, count(c) AS commentsCount
ORDER BY commentsCount DESC
LIMIT 3
RETURN u.display_name AS UserName, commentsCount",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, size((q)-[:TAGGED]->(:Tag)) AS numTags, q.answer_count AS numAnswers
ORDER BY numTags DESC, numAnswers DESC
RETURN q
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY length(q.body_markdown) DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WHERE size((q)-[:TAGGED]->(:Tag)) > 2
WITH u, count(c) AS commentsCount
ORDER BY commentsCount DESC
LIMIT 3
RETURN u.display_name AS UserName, commentsCount",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.accepted_answer_id IS NOT NULL
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.accepted_answer_id IS NULL AND exists{(q)-[:COMMENTED_ON]->(:Comment)}
RETURN t.name, count(q) AS question_count
ORDER BY question_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(:Answer {score: score})
WHERE score > 1
RETURN u.display_name, count(c) AS comment_count
ORDER BY comment_count DESC",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count = 0
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'Anu'})-[:ASKED]->(q:Question)
MATCH (c:Comment)-[:COMMENTED_ON]->(q)
RETURN c
ORDER BY c.score DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer {is_accepted: true})
WITH u, count(a) AS acceptedAnswers
ORDER BY acceptedAnswers DESC
LIMIT 3
RETURN u.display_name AS UserName, acceptedAnswers",Simple Aggregation Queries,stackoverflow2,True,False,False
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WITH q
ORDER BY q.creation_date DESC
LIMIT 3
MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q)
RETURN DISTINCT u.display_name AS UserName",Simple Aggregation Queries,stackoverflow2,False,False,False
"MATCH (t:Tag)<-[:TAGGED]-(q:Question)
WHERE exists {
  (q)<-[:COMMENTED_ON]-(:Comment)
}
RETURN t.name, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentCount
ORDER BY commentCount DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name, t.link, q.creation_date
ORDER BY q.creation_date DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,False
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WITH q, t
ORDER BY q.view_count ASC
LIMIT 3
RETURN q.title, collect(t.name) AS Tags",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
WHERE exists {
    (q)<-[:ANSWERED]-(a:Answer)
    WHERE a.score >= 3
}
RETURN q
LIMIT 3",Complex Retrieval Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN q.title, q.score, collect(t.name) AS tags
ORDER BY q.score DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,True,False,False
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WITH u, count(DISTINCT q) AS questions_answered
ORDER BY questions_answered DESC
LIMIT 3
RETURN u.display_name AS user, questions_answered",Simple Aggregation Queries,stackoverflow2,True,False,False
"MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment)
WITH q, sum(c.score) AS totalScore
ORDER BY totalScore DESC
LIMIT 3
RETURN q",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN q.title AS QuestionTitle, q.view_count AS Views, u.display_name AS UserName
ORDER BY q.view_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN q.title, q.answer_count, collect(t.name) AS tags
ORDER BY q.answer_count DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WHERE q.view_count IS NOT NULL
WITH q, u, count(c) AS comments_count
ORDER BY q.view_count DESC, comments_count DESC
LIMIT 3
RETURN u.display_name AS user, comments_count",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, size((q)-[:TAGGED]->(:Tag)) AS tagCount
ORDER BY tagCount DESC
LIMIT 3
RETURN q",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:ANSWERED]->(a:Answer {is_accepted: true})
RETURN q.title AS QuestionTitle, q.link AS QuestionLink, a.score AS AcceptedAnswerScore
ORDER BY a.score DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count > 0 AND exists{(q)<-[:COMMENTED_ON]-(:Comment)}
RETURN q
ORDER BY q.answer_count ASC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.answer_count IS NOT NULL
WITH q
ORDER BY q.answer_count DESC
LIMIT 3
MATCH (q)-[:ANSWERED]->(a:Answer {is_accepted: true})
RETURN q.title, q.link, a.title, a.link",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WITH q, count(DISTINCT t) AS numTags
ORDER BY numTags DESC
LIMIT 5
RETURN q.title, q.link, numTags",Simple Aggregation Queries,stackoverflow2,True,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE u.uuid > 15000000
RETURN q
ORDER BY q.creation_date DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)
RETURN a
ORDER BY length(a.body_markdown) DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WITH q, COUNT(c) AS comments
ORDER BY q.score DESC LIMIT 3
RETURN u.display_name AS UserWhoCommented, q.title AS QuestionTitle, comments",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q.title, q.view_count, q.answer_count
ORDER BY q.answer_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
WITH u, count(a) AS answersCount
ORDER BY answersCount DESC
RETURN u.display_name, answersCount",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(q:Question)
WHERE a.is_accepted = FALSE
RETURN a, q
ORDER BY a.score DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q
ORDER BY q.view_count ASC
LIMIT 3
MATCH (q)-[:TAGGED]->(t:Tag)
RETURN t.name",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.accepted_answer_id IS NOT NULL
RETURN q
ORDER BY q.view_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)
RETURN u.display_name AS UserName, count(a) AS AnswersProvided
ORDER BY AnswersProvided DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)
WITH u, count(c) AS total_comments
ORDER BY total_comments DESC
LIMIT 5
RETURN u.display_name, total_comments",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(q:Question)
RETURN a, q
ORDER BY a.score DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WITH q, COUNT(c) AS comments
ORDER BY q.view_count DESC
LIMIT 5
RETURN DISTINCT u.display_name AS UserWhoCommented",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.accepted_answer_id IS NOT NULL AND q.view_count IS NOT NULL
RETURN q
ORDER BY q.view_count ASC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.creation_date DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WHERE q.answer_count > 1
RETURN t.name, count(q) AS frequency
ORDER BY frequency DESC",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)
RETURN a
ORDER BY a.uuid DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u.display_name, count(q) AS questions_asked
ORDER BY questions_asked DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)-[:ANSWERED]->(:Question)
RETURN a
ORDER BY a.score DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (c:Comment)
RETURN c
ORDER BY c.score DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q
ORDER BY q.view_count DESC
LIMIT 5
MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q)
RETURN u.display_name AS UserName, q.title AS QuestionTitle, q.view_count AS Views",Simple Aggregation Queries,stackoverflow2,True,False,False
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u.display_name AS user, q.title AS question_title, q.answer_count AS answers
ORDER BY q.answer_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN t, q.view_count
ORDER BY q.view_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
RETURN q
ORDER BY q.view_count DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q
ORDER BY q.view_count DESC
LIMIT 3
MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q)
WHERE a.is_accepted = true
RETURN u.display_name AS User, q.title AS QuestionTitle, q.view_count AS Views",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q
ORDER BY q.answer_count DESC
LIMIT 3
MATCH (q)-[:TAGGED]->(t:Tag)
RETURN q.title, q.answer_count, collect(t.name) AS tags",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentCount
ORDER BY commentCount DESC
LIMIT 3
RETURN q",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'Anu'})-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)
WHERE q.accepted_answer_id IS NOT NULL
RETURN q
LIMIT 3",Complex Retrieval Queries,stackoverflow2,True,False,False
"MATCH (c:Comment)-[:COMMENTED_ON]->(q:Question)
WHERE q.view_count > 100
RETURN c
ORDER BY c.score DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
RETURN DISTINCT u.display_name",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)<-[:ANSWERED]-(a:Answer)
WITH q, sum(a.score) AS totalScore
ORDER BY totalScore DESC
LIMIT 3
RETURN q",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
RETURN u.display_name AS user, MIN(q.view_count) AS min_views
ORDER BY min_views ASC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WITH q, size((:Comment)-[:COMMENTED_ON]->(q)) AS commentCount
ORDER BY commentCount DESC
LIMIT 3
MATCH (q)-[:TAGGED]->(t:Tag)
RETURN t.name AS TagName",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
RETURN t.name, sum(q.view_count) AS total_views
ORDER BY total_views DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(:Question)
WITH c, u
ORDER BY c.score DESC
LIMIT 3
RETURN DISTINCT u",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)-[:TAGGED]->(t:Tag {name: 'neo4j'})
WITH u, count(c) AS commentsCount
RETURN u.display_name AS user, commentsCount
ORDER BY commentsCount DESC
LIMIT 1",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User {display_name: 'Mohammed Faraz ali'})-[:ASKED]->(q:Question)
RETURN q
ORDER BY q.creation_date DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,True,False,False
"MATCH (q:Question)<-[:ANSWERED]-(a:Answer)
RETURN q.title, q.link, sum(a.score) AS totalScore
ORDER BY totalScore DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (u:User)-[:ASKED]->(q:Question)
WHERE q.accepted_answer_id IS NOT NULL
RETURN u.display_name, count(q) AS questions_with_accepted_answers
ORDER BY questions_with_accepted_answers DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (a:Answer)
RETURN a.body_markdown, a.uuid
ORDER BY length(a.body_markdown) DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,False
"MATCH (q:Question)
RETURN q.creation_date
ORDER BY q.view_count DESC
LIMIT 5",Simple Aggregation Queries,stackoverflow2,False,False,False
"MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question)
WITH u, COUNT(DISTINCT q) AS numQuestions
ORDER BY numQuestions DESC
RETURN u.display_name, numQuestions",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)
WHERE q.accepted_answer_id IS NOT NULL
RETURN q
ORDER BY q.answer_count DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (c:Comment)-[:COMMENTED_ON]->(:Question)
RETURN c
ORDER BY c.uuid DESC
LIMIT 3",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (q:Question)-[:TAGGED]->(t:Tag)
WITH q, count(DISTINCT t) AS uniqueTags
ORDER BY uniqueTags DESC
LIMIT 5
RETURN q",Simple Aggregation Queries,stackoverflow2,False,True,False
"MATCH (q:Question)
WITH q, count{(q)<-[:COMMENTED_ON]-(:Comment)} AS commentCount
ORDER BY commentCount DESC
LIMIT 1
MATCH (q)-[:TAGGED]->(t:Tag)
RETURN q.title, q.link, collect(t.name) AS tags, commentCount",Simple Aggregation Queries,stackoverflow2,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
RETURN t
ORDER BY t.createdAt ASC
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s.url
ORDER BY s.createdAt DESC
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.description IS NOT NULL
RETURN s
ORDER BY length(s.description) DESC
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'VALORANT'})
WHERE s.total_view_count > 5000000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN g.name, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 5",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL
WITH s ORDER BY s.followers DESC LIMIT 1
MATCH (u:User)-[:VIP]->(s)
RETURN u",Pathfinding Queries,twitch,False,True,False
"MATCH (s:Stream)-[:MODERATOR]->(u:User {name: 'itsbigchase'})
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Just Chatting'})
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
WITH s, count(u) AS moderatorCount
ORDER BY moderatorCount DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, moderatorCount",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(m:User)
WHERE exists {
  MATCH (m)-[:VIP]->(:Stream)
}
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(DISTINCT s) AS distinct_streams_chatted
ORDER BY distinct_streams_chatted DESC
LIMIT 3
RETURN u.name AS user_name, distinct_streams_chatted",Pathfinding Queries,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
WITH t, count(s) AS streamCount
ORDER BY streamCount DESC
LIMIT 3
RETURN t.name, streamCount",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'})
RETURN s",Pathfinding Queries,twitch,True,False,False
"MATCH (s:Stream)
WITH s, count{(s)-[:CHATTER]->()} AS chatterCount
ORDER BY chatterCount DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, chatterCount",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:PLAYS]->(:Game)} AS gamesCount
WHERE gamesCount > 3
RETURN s",Pathfinding Queries,twitch,False,False,False
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE s.createdAt < datetime('2017-01-01T00:00:00Z')
RETURN t
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.createdAt DESC
LIMIT 3",Pathfinding Queries,twitch,False,False,False
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(DISTINCT s) AS streams_count
WHERE streams_count > 3
RETURN u.name, streams_count
ORDER BY streams_count DESC
LIMIT 5",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH s, COUNT(DISTINCT g) AS uniqueGames
ORDER BY uniqueGames DESC
RETURN s, uniqueGames",Pathfinding Queries,twitch,False,False,False
"MATCH (s:Stream)-[:VIP]->(:User)-[:PLAYS]->(g:Game)
WITH g, count(*) AS vipCount
ORDER BY vipCount DESC
LIMIT 3
RETURN g.name AS Game, vipCount",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[r:MODERATOR]->(u:User)
WITH s, count(r) AS timesModerated
WHERE timesModerated > 1
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:CHATTER]->()} AS chatterCount
ORDER BY chatterCount DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, chatterCount",Pathfinding Queries,twitch,True,False,False
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WHERE NOT EXISTS { (u)-[:STREAMER]->() }
RETURN s
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE exists {
  (s)-[:CHATTER]->(:Stream)
}
RETURN s, count{(s)-[:CHATTER]->(:Stream)} AS streamerChatters
ORDER BY streamerChatters DESC",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE size{(s)-[:HAS_LANGUAGE]->(:Language)} > 2
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.description CONTAINS 'hilarious moments'
RETURN g.name, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User {name: 'itsbigchase'})-[:VIP]->(s:Stream)
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS moderated_streams
ORDER BY moderated_streams DESC
LIMIT 5
RETURN u.name, moderated_streams",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User), (s)-[:VIP]->(u)
RETURN s, u",Pathfinding Queries,twitch,False,True,False
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
WHERE s.createdAt < datetime('2012-01-01T00:00:00Z')
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE s.followers > 1000000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:VIP]->()} AS vipCount
ORDER BY vipCount DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, vipCount",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH s, count(DISTINCT g) AS gamesCount
ORDER BY gamesCount DESC
RETURN s, gamesCount
LIMIT 1",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE size{(s)-[:HAS_LANGUAGE]->(:Language)} >= 3
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE exists {
  (s)-[:VIP]->(:User)
}
RETURN g.name, count(s) AS frequency
ORDER BY frequency DESC
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE t.createdAt >= datetime('2020-01-01T00:00:00Z') AND t.createdAt <= datetime('2020-12-31T23:59:59Z')
RETURN s.url AS StreamURL",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WHERE s.total_view_count > 1000000
RETURN u
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.name = 'itsbigchase'
RETURN s.id, g.name",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream {name: 'summit1g'})
RETURN s.followers",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.total_view_count > 500000000
RETURN s",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(DISTINCT s) AS streams_count
WHERE streams_count > 1
RETURN count(u) AS users_with_multiple_streams",Simple Aggregation Queries,twitch,False,False,True
"MATCH (t:Team)
WHERE t.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN t",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL
RETURN s.description
ORDER BY s.followers ASC
LIMIT 1",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.createdAt DESC
LIMIT 5",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(:Stream)
WHERE exists {
  (u)-[:VIP]->(:Stream)
}
RETURN DISTINCT u.name",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
RETURN l.name, sum(s.followers) AS total_followers
ORDER BY total_followers DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.createdAt IS NOT NULL
RETURN g.name AS Game, s.createdAt AS StreamCreationDate
ORDER BY s.createdAt ASC
LIMIT 1",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'})
RETURN count(s) AS NumberOfStreams",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream {name: 'itsbigchase'})<-[:VIP]-(u:User)
RETURN u",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.followers ASC
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Grand Theft Auto V'}),
      (s)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
RETURN s.name AS StreamName",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers > 5000000
RETURN s",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE exists{(s)-[:MODERATOR]->()}
RETURN sum(s.total_view_count) AS totalViewCountForModeratedStreams",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WITH u, count(s) AS vipCount
WHERE vipCount > 3
RETURN u.name AS UserName",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(chatter:Stream)
RETURN s, chatter",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers > 2000000
RETURN DISTINCT g.name",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'})
WHERE s.followers > 20000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.description CONTAINS 'game play'
RETURN g.name AS GameName",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(:Team)
WHERE s.total_view_count IS NOT NULL
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 5",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
WHERE u.followers < 10000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE t.createdAt > datetime('2015-01-01T00:00:00Z')
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt < datetime('2010-01-01T00:00:00Z')
RETURN s
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Pathfinding Queries,twitch,False,False,False
"MATCH (s:Stream)-[:MODERATOR]->(m)
WITH s, count(m) AS moderator_count
ORDER BY moderator_count DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, moderator_count",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS streams_count
WHERE streams_count > 1
RETURN u.name, streams_count
ORDER BY streams_count DESC
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
RETURN l.name AS Language, count(s) AS StreamCount
ORDER BY StreamCount DESC
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers > 100000
RETURN g.name, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.total_view_count > 10000000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
RETURN s.name AS StreamName, g.name AS GameName
ORDER BY s.createdAt ASC
LIMIT 1",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'de'})
WHERE s.followers > 10000
RETURN count(s) AS NumberOfStreams",Simple Aggregation Queries,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
WITH t, count(s) AS streamCount
ORDER BY streamCount DESC
LIMIT 3
RETURN t.name, streamCount",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
WHERE s.followers > 500000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(:User)
WITH s
MATCH (s)-[:HAS_LANGUAGE]->(l:Language)
RETURN l.name, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 5",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User {name: 'itsbigchase'})
MATCH (s:Stream)-[:MODERATOR]->(u)
WHERE exists{ (s)-[:VIP]->(u) }
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH s, COUNT(DISTINCT g) AS uniqueGames
RETURN s.id, s.name, uniqueGames
ORDER BY uniqueGames DESC",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WHERE s.total_view_count > 1000000
RETURN u.name
ORDER BY u.followers DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE exists {
  (s)-[:CHATTER]->(u:User)
  WHERE exists {
    (u)-[:VIP]->(s)
  }
}
RETURN DISTINCT g.name",Complex Aggregation Queries,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
WITH t, count(DISTINCT s) AS streamCount
WHERE streamCount > 3
RETURN t",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
WHERE s.followers > 50000
RETURN s.name",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WITH u, count(DISTINCT s) AS vipCount
ORDER BY vipCount DESC
LIMIT 5
RETURN u.name AS UserName, vipCount",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE s.createdAt > datetime('2018-01-01T00:00:00Z') AND t.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN s",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE s.followers > 100000
RETURN s.name",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS streams_count
WHERE streams_count > 1
RETURN u.name, streams_count
ORDER BY streams_count DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.total_view_count > 1000000
RETURN DISTINCT l.name",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers > 500000
RETURN g.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.total_view_count > 5000000 AND s.total_view_count < 10000000
RETURN s",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s.name AS StreamName, s.followers AS Followers
ORDER BY s.followers DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,False
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WITH s, count(DISTINCT t) AS teamCount
ORDER BY teamCount DESC
RETURN s.id, s.name, teamCount",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WITH s, COUNT(DISTINCT l) AS num_languages
ORDER BY num_languages DESC
RETURN s, num_languages
LIMIT 1",Pathfinding Queries,twitch,False,True,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH s, COUNT(DISTINCT g) AS gamesCount
ORDER BY gamesCount DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, gamesCount",Pathfinding Queries,twitch,False,False,False
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
WHERE s.total_view_count >= 1000000 AND s.total_view_count <= 2000000
WITH s, count(DISTINCT u) AS moderatorCount
WHERE moderatorCount >= 3
RETURN s",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:CHATTER]->(:User)} AS userChatters
ORDER BY userChatters DESC
RETURN s, userChatters",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:CHATTER]->()} AS chatterCount
ORDER BY chatterCount DESC
LIMIT 3
RETURN s.name AS StreamName, chatterCount",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WHERE exists {
  MATCH (u)-[:MODERATOR]->(:Stream)
}
RETURN s",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User)-[:VIP]->(s)
RETURN s",Complex Aggregation Queries,twitch,False,False,False
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS streams_count
WHERE streams_count > 1
RETURN u.name, streams_count",Simple Aggregation Queries,twitch,True,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Just Chatting'})
WHERE s.total_view_count > 1000000
MATCH (s)-[:HAS_TEAM]->(t:Team)
RETURN DISTINCT t.name",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL
WITH s
ORDER BY s.followers DESC
LIMIT 1
MATCH (u:User)-[:MODERATOR]->(s)
RETURN u.name
ORDER BY u.followers DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,False
"MATCH (s:Stream)-[:VIP]->(u:User {name: 'tranth'})
WHERE s.followers > 10000
RETURN s",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u1:User {name: 'itsbigchase'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(u2:User {name: '9linda'})
MATCH (s:Stream)-[:PLAYS]->(g)
RETURN s",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(DISTINCT s) AS streams_chatted_in
WHERE streams_chatted_in > 3
RETURN u.name AS user_name, streams_chatted_in
ORDER BY streams_chatted_in DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User), (s)-[:VIP]->(u)
WHERE s.createdAt >= datetime('2020-01-01T00:00:00Z') AND s.createdAt <= datetime('2020-12-31T23:59:59Z')
RETURN s, u",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User {name: 'itsbigchase'})
WHERE u.total_view_count > 100000
RETURN s",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE exists {
  MATCH (s)-[:CHATTER]->(u:User)-[:VIP]->(s)
}
RETURN g.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User {name: 'gonsabellla'})-[:VIP]->(s:Stream)
RETURN s",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE s.total_view_count > 500000
RETURN t.name
ORDER BY s.total_view_count DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream {name: 'itsbigchase'})-[:VIP]->(vipStream:Stream)
RETURN vipStream.name",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE size{(s)-[:HAS_LANGUAGE]->(:Language)} >= 2
RETURN DISTINCT g.name",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(:Team)
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User {name: 'itsbigchase'})
RETURN s.name",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH s, count(g) AS games_played
ORDER BY games_played DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, games_played",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
RETURN t
ORDER BY t.createdAt DESC
LIMIT 3",Pathfinding Queries,twitch,True,False,False
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE t.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN s
ORDER BY s.followers DESC",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
RETURN g.name AS Game, g.createdAt AS Introduced
ORDER BY g.createdAt DESC
LIMIT 3",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers > 2000000
RETURN s
ORDER BY s.followers DESC
LIMIT 3",Pathfinding Queries,twitch,True,False,False
"MATCH (s:Stream)-[:MODERATOR]->(m)
WITH s, count(DISTINCT m) AS moderator_count
ORDER BY moderator_count DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, moderator_count",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
WITH s, count(u) AS vipCount
WHERE vipCount > 3
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.createdAt ASC
LIMIT 5",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH s, count(g) AS gamesCount
ORDER BY gamesCount DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, gamesCount",Pathfinding Queries,twitch,False,False,False
"MATCH (u:User)-[:VIP]->(s:Stream)
WITH u, count(s) AS vipCount
ORDER BY vipCount DESC
LIMIT 5
RETURN u.name, vipCount",Pathfinding Queries,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
WITH t, count(s) AS streamCount
ORDER BY streamCount DESC
LIMIT 1
MATCH (s2:Stream)-[:HAS_TEAM]->(t)
RETURN s2",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Just Chatting'})
WHERE s.followers > 100000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE exists {
    (s)-[:VIP]->(u:User)
    AND exists {
        (s)-[:MODERATOR]->(u)
    }
}
RETURN s",Pathfinding Queries,twitch,False,False,False
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WITH s, count(DISTINCT l) AS num_languages
ORDER BY num_languages DESC
LIMIT 3
RETURN s.id, s.name, num_languages",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WITH s, count(u) AS userChatters
ORDER BY userChatters DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, userChatters",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt IS NOT NULL
RETURN s
ORDER BY s.createdAt
LIMIT 3",Pathfinding Queries,twitch,False,True,False
"MATCH (s:Stream)
WHERE exists {
  (u:User)-[:VIP]->(s) AND (u)-[:MODERATOR]->(s)
}
RETURN s
LIMIT 5",Pathfinding Queries,twitch,False,False,False
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WITH s, count(l) AS num_languages
ORDER BY num_languages DESC
RETURN s, num_languages",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
WHERE u.followers > 10000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WITH s, count(DISTINCT l) AS distinctLanguages
ORDER BY distinctLanguages DESC
LIMIT 3
RETURN s.id, s.name, distinctLanguages",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User {name: 'itsbigchase'})
WHERE exists {
  (s)-[:CHATTER]->(:User {name: 'itsbigchase'})
}
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
WITH s, count(DISTINCT u) AS uniqueVips
ORDER BY uniqueVips DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, uniqueVips",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(m)
WITH s, count(DISTINCT m) AS moderatorCount
ORDER BY moderatorCount DESC
RETURN s, moderatorCount",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WITH s, count(l) AS num_languages
ORDER BY num_languages DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, num_languages",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User {name: 'itsbigchase'}),
      (s)-[:VIP]->(u)
RETURN s",Pathfinding Queries,twitch,True,False,False
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WITH s, count(DISTINCT t) AS teamCount
ORDER BY teamCount DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, teamCount",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WITH s, count(t) AS teamCount
ORDER BY teamCount DESC
RETURN s, teamCount",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 3
RETURN u.name, streams_count",Pathfinding Queries,twitch,False,False,False
"MATCH (u:User {name: 'itsbigchase'})
MATCH (s:Stream)
WHERE exists{(u)-[:MODERATOR]->(s)} AND exists{(u)-[:CHATTER]->(s)}
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
WITH s, count(u) AS moderatorCount
ORDER BY moderatorCount DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, moderatorCount",Pathfinding Queries,twitch,False,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH s, COUNT(DISTINCT g) AS gamesCount
ORDER BY gamesCount DESC
LIMIT 3
RETURN s, gamesCount",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WITH t ORDER BY t.createdAt DESC LIMIT 1
MATCH (s:Stream)-[:HAS_TEAM]->(t)
RETURN s
ORDER BY s.followers DESC LIMIT 5",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:CHATTER]->(:User)} AS chatterCount
ORDER BY chatterCount DESC
LIMIT 3
RETURN s, chatterCount",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL AND s.total_view_count < 1000000
RETURN s
ORDER BY s.followers DESC",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 1",Pathfinding Queries,twitch,True,False,False
"MATCH (s:Stream)
WHERE s.followers > 1000000
RETURN s
ORDER BY s.followers DESC
LIMIT 3",Pathfinding Queries,twitch,False,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH g, count(DISTINCT (s)-[:HAS_LANGUAGE]->(:Language)) AS languageDiversity
ORDER BY languageDiversity DESC
LIMIT 5
RETURN g.name AS Game, languageDiversity",Pathfinding Queries,twitch,True,False,False
"MATCH (s:Stream)-[:VIP]->(u:User)
WITH s, count(u) AS vipCount
ORDER BY vipCount DESC
RETURN s, vipCount",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s.url
ORDER BY s.total_view_count DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[r:MODERATOR]->(s:Stream)
WHERE duration.between(r.startDate, COALESCE(r.endDate, date())) >= duration('P5Y')
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (t:Team)
RETURN t.name
ORDER BY t.createdAt DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.name = g.name
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,True,False
"MATCH (u:User)-[:VIP]->(s:Stream)
WHERE s.followers < 10000
RETURN u
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WHERE exists {
    MATCH (u)-[:MODERATOR]->(:Stream)
}
RETURN s
LIMIT 3",Simple Retrieval Queries,twitch,True,False,False
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WITH s, count(l) AS num_languages
ORDER BY num_languages DESC
RETURN s.id, s.name, num_languages
LIMIT 5",Simple Retrieval Queries,twitch,False,False,False
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WHERE u.followers IS NOT NULL
RETURN s, u
ORDER BY u.followers DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH g, LENGTH(g.name) AS nameLength
ORDER BY nameLength ASC
LIMIT 1
MATCH (s:Stream)-[:PLAYS]->(g)
RETURN s.name AS StreamName
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game), (s)-[:HAS_TEAM]->(t:Team)
WHERE t.followers > 1000
RETURN g.name AS GameName
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WHERE exists{ (s)-[:CHATTER]->(:Stream) OR (s)-[:CHATTER]->(:User) }
RETURN s.url
ORDER BY count{(s)-[:CHATTER]->()} DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'VALORANT'})
MATCH (s)-[:MODERATOR]->(m)
RETURN m
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game), (s)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.createdAt <= datetime('2018-01-01T00:00:00Z')
RETURN s.id AS StreamID, s.name AS StreamName, g.name AS Game, l.name AS Language
ORDER BY s.createdAt
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.description CONTAINS 'enjoy'
RETURN s
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(m:User), (s)-[:CHATTER]->(u:User)
WHERE m.name = u.name
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,True,False,False
"MATCH (u:User)-[:CHATTER]->(s:Stream)-[:PLAYS]->(g:Game)
WITH u, count(DISTINCT g) AS gamesCount
ORDER BY gamesCount DESC
RETURN u.name
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game), (s)-[:HAS_TEAM]->(t:Team)
WHERE g.name CONTAINS 'E' AND t.name CONTAINS 'E'
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, size((s)-[:HAS_LANGUAGE]->(:Language)) AS num_languages
ORDER BY num_languages DESC
LIMIT 1
MATCH (s)-[:VIP]->(vip:User)
RETURN vip
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[r:VIP]->(u:User)
WHERE duration.between(r.createdAt, datetime()).years >= 3
RETURN s
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt <= datetime('2018-01-01T00:00:00Z') AND s.followers > 100000
RETURN s
ORDER BY s.createdAt
LIMIT 5",Simple Retrieval Queries,twitch,False,True,False
"MATCH (u:User)-[:VIP]->(s:Stream)
WHERE s.description CONTAINS 'fun'
RETURN u.name
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s
ORDER BY s.createdAt ASC
LIMIT 1
MATCH (s)-[:MODERATOR]->(m)
RETURN m
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL
RETURN s
ORDER BY s.followers ASC
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
WITH t, count(s) AS streamCount
ORDER BY streamCount DESC
LIMIT 1
MATCH (t)<-[:HAS_TEAM]-(topStream:Stream)
RETURN topStream
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE duration.between(s.createdAt, datetime()).years > 10
RETURN g.name AS Game, count(s) AS StreamsCount
ORDER BY StreamsCount DESC
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN u
LIMIT 3",Simple Retrieval Queries,twitch,True,False,False
"MATCH (s:Stream)
WHERE size{(s)-[:HAS_LANGUAGE]->(:Language)} > 1
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,True,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game), (s)-[:HAS_TEAM]->(t:Team)
WHERE g.name STARTS WITH substring(t.name, 0, 1)
RETURN s.id AS StreamID, s.name AS StreamName, g.name AS GameName, t.name AS TeamName
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(:Team)
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(m)
WITH s, m, count{(s)-[:PLAYS]->(:Game)} AS gameChanges
WHERE gameChanges >= 2
RETURN m
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Dota 2'})
WITH s, count(s) AS streamCount
ORDER BY streamCount DESC
LIMIT 3
MATCH (s)-[:HAS_TEAM]->(t:Team)
RETURN t.name, streamCount",Simple Retrieval Queries,twitch,False,False,False
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 5
RETURN u.name, streams_count",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.createdAt = s.createdAt AND s.total_view_count > 5000000
RETURN s.name AS StreamName, g.name AS GameName
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.description CONTAINS 'channel'
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WHERE s.followers > 1000000
RETURN u
LIMIT 5",Simple Retrieval Queries,twitch,True,False,False
"MATCH (s:Stream)-[r1:HAS_LANGUAGE]->(l1:Language)
WITH s, COUNT(DISTINCT l1) AS num_languages
WHERE num_languages > 1
RETURN s
ORDER BY s.createdAt DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WHERE NOT EXISTS { (s)-[:HAS_TEAM]->(:Team) }
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH g, count{(s)-[:PLAYS]->(g)} AS gameCount
WHERE gameCount < 10
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH s, count{(s)-[:MODERATOR]->()} AS moderatorCount
ORDER BY moderatorCount DESC
LIMIT 3
RETURN g.name AS Game, moderatorCount",Simple Retrieval Queries,twitch,True,False,False
"MATCH (s:Stream)
WHERE s.followers >= 200000 AND s.followers <= 500000
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)<-[:VIP]-(u)
RETURN u
LIMIT 5",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
MATCH (s)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
RETURN s.name, s.followers",Complex Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL
WITH s ORDER BY s.followers DESC LIMIT 1
MATCH (u:User)-[:VIP]->(s)
RETURN u",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(m)
WITH s, count(m) AS moderatorCount
WHERE moderatorCount > 1
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(:User)
RETURN DISTINCT u.name AS ModeratorNames",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE NOT EXISTS { (s)-[:HAS_TEAM]->(:Team) }
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE size{(s)-[:MODERATOR]->()} > 3
RETURN s.id AS StreamID, s.name AS StreamName, s.followers AS Followers, s.total_view_count AS ViewCount",Complex Retrieval Queries,twitch,False,False,True
"MATCH (u:User {name: '9linda'})-[:CHATTER]->(s:Stream)
RETURN s.description AS StreamDescription",Complex Retrieval Queries,twitch,False,False,True
"MATCH (t:Team)
WHERE t.createdAt >= datetime('2020-01-01T00:00:00Z') AND t.createdAt <= datetime('2020-12-31T23:59:59Z')
RETURN t",Complex Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.total_view_count > 1000000
RETURN COUNT(DISTINCT l) AS NumberOfLanguages",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE size{(s)-[:VIP]->()} > 5
RETURN g.name AS Game, count(s) AS NumberOfStreams",Complex Retrieval Queries,twitch,False,False,False
"MATCH (u:User {name: 'itsbigchase'})-[:MODERATOR]->(s:Stream)
RETURN sum(s.total_view_count) AS totalViewCount",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User {name: 'creightonolsen'})
WHERE s.total_view_count > 100000
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (u:User {name: 'romandoduik'})-[:CHATTER]->(s:Stream)
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN u",Complex Retrieval Queries,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
RETURN t.name AS TeamName, count(s) AS NumberOfStreams",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE s.createdAt >= datetime('2018-01-01T00:00:00Z')
RETURN s, t",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt >= datetime('2015-01-01T00:00:00Z') AND s.createdAt <= datetime('2020-12-31T23:59:59Z')
  AND s.followers > 100000
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.followers > 10000
RETURN DISTINCT l.name
LIMIT 3",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream {name: 'itsbigchase'})-[:MODERATOR]->(u:User)
RETURN count(u) AS ModeratorCount",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(m:User)
WHERE m.name STARTS WITH 'G'
RETURN s
LIMIT 3",Simple Retrieval Queries,twitch,False,True,False
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WHERE s.description CONTAINS 'professional'
RETURN u
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
WHERE s.name = u.name
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.total_view_count > 10000000
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers > 100000
RETURN DISTINCT g.name",Complex Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WHERE s.total_view_count > 500000
RETURN u",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.description CONTAINS 'streaming' AND s.followers IS NOT NULL
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN s.description AS StreamDescription",Complex Retrieval Queries,twitch,False,False,True
"MATCH (t:Team)
WHERE t.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN t.name",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'})
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s.url
ORDER BY s.total_view_count DESC
LIMIT 3",Complex Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(DISTINCT s) AS distinctStreams
WHERE distinctStreams > 5
RETURN u",Complex Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WITH u, count(DISTINCT s) AS vipCount
WHERE vipCount >= 2
RETURN u",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE exists{(s)-[:MODERATOR]->()} AND exists{(s)-[:VIP]->()}
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.total_view_count > 500000
RETURN DISTINCT g.name",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
WHERE s.total_view_count > 1000000
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN count(s) AS RustStreamCount",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(vip:User)
WHERE s.total_view_count > 10000000
RETURN vip
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WITH s, count(l) AS num_languages
ORDER BY num_languages DESC
LIMIT 3
RETURN s.url AS StreamURL",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt < datetime('2010-01-01T00:00:00Z')
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.followers > 500000
RETURN l.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 1",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt < datetime('2010-01-01T00:00:00Z')
RETURN s.name
ORDER BY s.createdAt
LIMIT 5",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
RETURN g.name AS Game, count(s) AS StreamCount
ORDER BY StreamCount DESC
LIMIT 3",Simple Retrieval Queries,twitch,True,False,False
"MATCH (s:Stream)
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS streams_count
WHERE streams_count > 1
RETURN u.name AS user_name, streams_count
ORDER BY streams_count DESC
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.total_view_count > 1000000
RETURN l.name AS Language
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE t.createdAt > datetime('2015-01-01T00:00:00Z')
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers < 100000 AND s.description IS NOT NULL
RETURN s.description
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
RETURN t.name AS TeamName, count(s) AS NumberOfStreams
ORDER BY NumberOfStreams DESC
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s
ORDER BY s.followers DESC
LIMIT 5
MATCH (u:User)-[:VIP]->(s)
RETURN u.name AS UserName, s.name AS StreamName, s.followers AS Followers",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
RETURN s
ORDER BY s.followers DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Dota 2'})
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.total_view_count > 5000000
RETURN g.name AS Game
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WITH s
ORDER BY s.total_view_count DESC
LIMIT 1
MATCH (s)-[:MODERATOR]->(m)
RETURN m
LIMIT 5",Simple Retrieval Queries,twitch,True,False,False
"MATCH (s:Stream)
WHERE exists {
    (s)-[:VIP]->(u:User)
    AND exists {
        (s)-[:MODERATOR]->(u)
    }
}
RETURN s",Complex Retrieval Queries,twitch,False,True,False
"MATCH (s:Stream)
WHERE NOT exists{(s)-[:CHATTER]->()}
RETURN s.url
LIMIT 3",Simple Retrieval Queries,twitch,True,False,False
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS moderated_streams
ORDER BY moderated_streams DESC
LIMIT 5
RETURN u.name, moderated_streams",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE exists {
    (s)-[:HAS_TEAM]->(t:Team)
    WHERE t.createdAt > datetime('2017-01-01T00:00:00Z')
}
RETURN g.name AS Game",Complex Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
RETURN s, u",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: ""en""})
RETURN s.name
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.total_view_count > 1000000
RETURN DISTINCT g.name",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s.name AS StreamName, s.followers AS Followers
ORDER BY s.followers DESC
LIMIT 5",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User {name: '9linda'})-[:VIP]->(s:Stream)
RETURN s.id, s.createdAt, s.description, s.url, s.name, s.followers, s.total_view_count",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE count{(s)-[:VIP]->()} > 10
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (u:User {name: 'itsbigchase'})-[:MODERATOR]->(s:Stream)
RETURN s.url AS StreamURL",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE exists {
  (s)-[:VIP]->(:User) OR (s)-[:VIP]->(:Stream)
}
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream {name: 'itsbigchase'})<-[:CHATTER]-(u:User)
RETURN u",Complex Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WHERE size{(s)-[:HAS_TEAM]->(:Team)} > 2
RETURN s",Complex Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'})
RETURN s.id AS StreamID, s.followers AS Followers",Complex Retrieval Queries,twitch,False,False,True
"MATCH (u:User {name: 'itsbigchase'})-[:MODERATOR]->(s:Stream)
RETURN s",Complex Retrieval Queries,twitch,False,False,False
"MATCH (u:User)-[:VIP]->(s:Stream)
WHERE s.total_view_count > 5000000
RETURN u",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:CHATTER]->()} AS chatterCount
ORDER BY chatterCount DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, chatterCount",Complex Retrieval Queries,twitch,True,False,False
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
RETURN l.name AS Language, count(s) AS NumberOfStreams",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s.description
ORDER BY s.createdAt ASC
LIMIT 1",Complex Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WHERE NOT EXISTS { (s)-[:MODERATOR]->() }
  AND NOT EXISTS { (s)-[:VIP]->() }
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,True,False,False
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS moderated_streams
ORDER BY moderated_streams DESC
LIMIT 3
RETURN u.name AS user_name, moderated_streams",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s1:Stream), (u)-[:VIP]->(s2:Stream)
WHERE s1 <> s2
RETURN u
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:MODERATOR]->()} AS moderatorCount
ORDER BY moderatorCount DESC
LIMIT 1
MATCH (s)-[:VIP]->(u:User)
RETURN u
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers = 100000
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,True,False
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE s.createdAt = t.createdAt
WITH s, t
ORDER BY s.createdAt ASC
LIMIT 3
RETURN s, t",Simple Retrieval Queries,twitch,True,False,False
"MATCH (u:User)-[r]->(s:Stream)
WITH u, s, collect(type(r)) AS roles
WHERE size([x IN roles WHERE x IN ['VIP', 'MODERATOR', 'CHATTER'] | x]) > 1
RETURN u.name
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(c)
WHERE s.createdAt >= datetime('2023-02-01T00:00:00Z') AND s.createdAt < datetime('2023-03-01T00:00:00Z')
RETURN s.id, s.name, count(c) AS chatterCount
ORDER BY chatterCount DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE l.name <> 'en'
RETURN u
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE length(s.description) > 50
RETURN g.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
WHERE u.followers > 500000
RETURN s
ORDER BY s.createdAt
LIMIT 3",Simple Retrieval Queries,twitch,True,False,False
"MATCH (s:Stream)-[:MODERATOR]->(u:User), (s)-[:VIP]->(u)
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH g, count(DISTINCT (s)-[:HAS_TEAM]->(:Team)) AS teamCount
ORDER BY teamCount DESC
LIMIT 1
MATCH (s:Stream)-[:PLAYS]->(g)
WHERE exists{ (s)-[:HAS_TEAM]->(:Team) }
WITH g, s
MATCH (s)-[:HAS_TEAM]->(t:Team)
RETURN g.name AS Game, collect(t.name)[..3] AS Teams",Simple Retrieval Queries,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
WITH t, count(s) AS streamCount
WHERE streamCount > 5
WITH t
MATCH (s:Stream)-[:HAS_TEAM]->(t)
RETURN s
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL
WITH s
ORDER BY s.followers DESC
LIMIT 1
MATCH (s)-[:CHATTER]->(u:User)
RETURN u.name AS ChatterName
LIMIT 5",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WITH s, t
ORDER BY t.createdAt
RETURN s
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(s) AS streams_chatted_in
ORDER BY streams_chatted_in DESC
LIMIT 3
RETURN u.name AS user_name, streams_chatted_in",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE NOT exists{ (:Stream)-[:HAS_TEAM]->(t) WHERE s <> (:Stream) }
RETURN s.name
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE EXISTS { (s)-[:HAS_LANGUAGE]->(:Language {name: 'ja'}) }
RETURN g.name AS Game
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game), (s)-[:HAS_LANGUAGE]->(l:Language)
WHERE g.name STARTS WITH substring(l.name, 0, 1)
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.total_view_count > 10000000
RETURN DISTINCT l.name
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)-[:PLAYS]->(g:Game {name: 'Dota 2'})
RETURN u.name
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE l.name NOT IN ['en', 'ja']
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,False
"MATCH (g:Game)<-[:PLAYS]-(s:Stream)
WITH g, count(s) AS streamCount
ORDER BY streamCount ASC
LIMIT 1
MATCH (g)<-[:PLAYS]-(s:Stream)
RETURN g.name AS game, collect(s)[..3] AS streams",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WHERE s.followers > 500000
RETURN u.name
LIMIT 5",Simple Retrieval Queries,twitch,False,False,False
"MATCH (g:Game)<-[:PLAYS]-(s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WITH g, count(DISTINCT l) AS num_languages
ORDER BY num_languages DESC
LIMIT 5
RETURN g.name AS game, num_languages",Simple Retrieval Queries,twitch,False,False,True
"MATCH (t:Team)-[:HAS_TEAM]->(s:Stream)
WITH t, s
ORDER BY t.createdAt DESC
RETURN t.name, collect(s.name) AS streams
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[p:PLAYS]->(g:Game)
WHERE NOT exists {
    (s)-[:PLAYS]->(g2:Game)
    WHERE g2 <> g AND s.createdAt < g2.createdAt
}
RETURN s
ORDER BY s.createdAt
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers >= 10000 AND s.followers <= 50000
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.followers DESC
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL
WITH s
ORDER BY s.followers DESC
LIMIT 1
MATCH (u:User)-[:VIP]->(s)
RETURN u.name
ORDER BY u.followers DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN u
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE t.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN s
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'VALORANT'})
WHERE s.total_view_count > 1000000
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[r:MODERATOR]->(m)
WHERE r.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN s, m
ORDER BY r.createdAt
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[r:PLAYS]->(g:Game)
WITH s, count(DISTINCT g) AS gamesCount
WHERE gamesCount > 1
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE s.followers > 1000000
WITH s
MATCH (s)-[:HAS_TEAM]->(t:Team)
RETURN t.name
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WHERE s.description CONTAINS 'professional'
RETURN s
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE NOT EXISTS {
  (s)-[:VIP]->(:User)
}
WITH s
LIMIT 3
MATCH (s)-[r:VIP]->(other:Stream)
RETURN s, r, other",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.total_view_count > 1000000
RETURN s.id, s.name, s.total_view_count, g.name AS game_playing",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game), (s)-[:VIP]->(u:User)
RETURN s, g, u
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS streams_count
WHERE streams_count > 1
RETURN u.name, streams_count",Verbose query,twitch,False,False,True
"MATCH (u:User)
WITH u, count{(u)-[:CHATTER]->()} AS chatterCount
ORDER BY chatterCount DESC
LIMIT 3
RETURN u.name, chatterCount",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.createdAt ASC
LIMIT 5",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE exists{(s)-[:HAS_TEAM]->(:Team)}
RETURN g.name AS Game, sum(s.total_view_count) AS TotalViews
ORDER BY TotalViews DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:MODERATOR]->()} AS moderatorCount
ORDER BY moderatorCount DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, moderatorCount",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WITH l, count(s) AS streamCount
ORDER BY streamCount ASC
LIMIT 3
RETURN l.name, streamCount",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->()
WITH u, count(*) AS total_moderations
ORDER BY total_moderations DESC
LIMIT 3
RETURN u.name, total_moderations",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:VIP]->()} AS vipCount
ORDER BY vipCount DESC
LIMIT 3
RETURN s, vipCount",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE exists {
  (s)-[:CHATTER]->(:Stream)
}
RETURN g.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 5",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers > 1000000
RETURN s
ORDER BY s.createdAt DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WITH u, count(DISTINCT s) AS diversity
ORDER BY diversity DESC
LIMIT 3
RETURN u.name, diversity",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.total_view_count > 1000000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH g, count(DISTINCT s) AS streamCount
WHERE streamCount > 5
RETURN g.name AS Game, streamCount",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS moderatedStreams
WHERE moderatedStreams > 3
RETURN u.name",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(m)
WHERE exists{(m)-[:VIP]->(s)}
RETURN s, m",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE t.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH g, count(s) AS streamCount
ORDER BY streamCount ASC
LIMIT 1
MATCH (s2:Stream)-[:PLAYS]->(g)
RETURN s2
ORDER BY s2.followers DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.followers > 10000
RETURN l.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 5",Pathfinding Queries,twitch,False,False,True
"MATCH (t:Team)
RETURN t
ORDER BY t.createdAt DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.createdAt > datetime('2015-01-01T00:00:00Z')
RETURN l.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers > 1000000
RETURN g.name, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: ""en""})
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 5",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS streams_moderated
ORDER BY streams_moderated DESC
LIMIT 3
RETURN u.name, streams_moderated",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.createdAt < datetime('2010-01-01T00:00:00Z')
RETURN g.name, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
WITH t, count(s) AS streamCount
ORDER BY streamCount DESC
LIMIT 3
RETURN t.name, streamCount",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
WITH s, count(u) AS vipCount
ORDER BY vipCount DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, vipCount",Simple Aggregation Queries,twitch,False,False,True
"MATCH (t:Team)
RETURN t.name
ORDER BY t.createdAt
LIMIT 5",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.followers > 10000
RETURN l.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(other:User)
WITH u, count(other) AS chatter_count
ORDER BY chatter_count DESC
LIMIT 3
RETURN u.name, chatter_count",Simple Aggregation Queries,twitch,False,True,False
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL AND s.total_view_count > 1000000
RETURN s
ORDER BY s.followers ASC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE exists{(s)-[:MODERATOR]->(:User)}
RETURN g.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WITH u, count(s) AS vipCount
ORDER BY vipCount DESC
LIMIT 3
RETURN u.name, vipCount",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:CHATTER]->()} AS chatterCount
ORDER BY chatterCount DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, chatterCount",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.total_view_count > 100000000
RETURN g.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Simple Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(moderated:User)
WITH u, count(moderated) AS moderatedCount
ORDER BY moderatedCount DESC
LIMIT 5
RETURN u.name, moderatedCount",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s, count{(s)-[:CHATTER]->()} AS chatterCount
ORDER BY chatterCount DESC
LIMIT 5",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WHERE exists {
    MATCH (u)-[:MODERATOR]->(s)
}
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN count(s) AS NumberOfStreams",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE s.followers > 50000
RETURN t",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE s.followers > 10000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
RETURN g.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.followers > 100000
RETURN l.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (t:Team)
RETURN t
ORDER BY t.createdAt ASC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS streamsModerated
ORDER BY streamsModerated DESC
LIMIT 3
RETURN u.name, streamsModerated",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
RETURN s.name AS StreamName
ORDER BY s.followers DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE s.followers > 5000
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s, count{(s)-[:CHATTER]->()} AS chatterCount
ORDER BY chatterCount DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WITH u, count(s) AS vipCount
ORDER BY vipCount DESC
LIMIT 3
RETURN u.name, vipCount",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.createdAt ASC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
RETURN l.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.description IS NOT NULL
RETURN s
ORDER BY length(s.description) DESC
LIMIT 5",Complex Aggregation Queries,twitch,True,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.total_view_count > 1000000
RETURN g.name, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WITH u, count(DISTINCT s) AS streams_count
WHERE streams_count > 1
RETURN count(u) AS users_with_multiple_vip_status",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WHERE u.followers < 1000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream), (u)-[:MODERATOR]->(s)
RETURN s, u",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 5
RETURN u.name, streams_count",Pathfinding Queries,twitch,False,True,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Call of Duty: Warzone'})
RETURN s.description AS StreamDescription",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WITH u, count(DISTINCT s) AS streams_count
WHERE streams_count >= 2
RETURN u.name, streams_count",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers >= 1000 AND s.followers <= 5000
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE exists { (s)-[:HAS_LANGUAGE]->(:Language {name: 'en'}) }
RETURN g.name AS Game",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
WHERE exists {
  MATCH (u)-[:CHATTER]->(:Stream)
}
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s.url AS StreamURL
ORDER BY s.total_view_count DESC
LIMIT 1",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Simple Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.total_view_count > 500000
RETURN DISTINCT l.name",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
WITH s, count(u) AS vipCount
WHERE vipCount > 3
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE s.createdAt > datetime('2018-01-01T00:00:00Z')
RETURN DISTINCT t.name",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.description CONTAINS 'strategy'
RETURN count(s) AS NumberOfStreams",Pathfinding Queries,twitch,False,False,True
"MATCH path=(s:Stream)-[:MODERATOR*]->(u:User)
WHERE ALL(node IN nodes(path) WHERE node:Stream OR node:User)
RETURN s AS Stream, length(path) AS ModeratorChainLength
ORDER BY ModeratorChainLength DESC",Pathfinding Queries,twitch,False,True,False
"MATCH (s:Stream)
WITH s, count{(s)-[:MODERATOR]->()} AS moderatorCount
RETURN s, moderatorCount
ORDER BY moderatorCount DESC
LIMIT 1",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers IS NOT NULL
RETURN g.name AS Game, s.followers AS Followers
ORDER BY s.followers ASC
LIMIT 1",Pathfinding Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'})
RETURN s",Pathfinding Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(DISTINCT s) AS streams_count
WHERE streams_count > 5
RETURN u",Pathfinding Queries,twitch,False,True,False
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(DISTINCT s) AS num_streams
ORDER BY num_streams DESC
LIMIT 3
RETURN u.name, num_streams",Complex Aggregation Queries,twitch,False,True,False
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE l.name = 'en'
WITH s
MATCH (s)-[:HAS_LANGUAGE]->(l2:Language)
WHERE l2.name = 'ru'
RETURN s.name",Complex Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.total_view_count < 500000
RETURN g.name, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 3",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.total_view_count > 10000000
RETURN l.name
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers > 500000
RETURN COUNT(DISTINCT g) AS unique_games_count",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.createdAt >= datetime('2019-01-01T00:00:00Z') AND s.createdAt <= datetime('2019-12-31T23:59:59Z')
RETURN g.name AS Game
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User {name: 'itsbigchase'})-[:MODERATOR]->(s:Stream)
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream {name: 'summit1g'})<-[:CHATTER]-(u:User)
RETURN u.name, count(*) AS messages
ORDER BY messages DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers < 1000
RETURN g.name
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'})
RETURN s",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE exists {
  MATCH (u:User)-[:PLAYS]->(s)
  WITH s, count(u) AS userCount
  WHERE userCount > 5
  RETURN s
}
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WITH s
ORDER BY s.total_view_count DESC
LIMIT 1
MATCH (u:User)-[:CHATTER]->(s)
RETURN u.name AS UserName, u.followers AS UserFollowers
ORDER BY u.followers DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.url CONTAINS 'twitch.tv'
RETURN g.name AS Game
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream {name: '9linda'})-[:MODERATOR]->(u:User)
RETURN u.name
LIMIT 5",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WHERE s.followers >= 10000 AND s.followers <= 50000
RETURN count(s) AS StreamCount",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.description CONTAINS 'game'
RETURN s
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User {name: 'itsbigchase'})-[:VIP]->(s:Stream)
RETURN s",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.createdAt >= datetime('2020-01-01T00:00:00Z') AND s.createdAt <= datetime('2020-06-30T23:59:59Z')
RETURN g.name, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.followers = 33366
RETURN l.name
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.description CONTAINS 'hilarious'
RETURN s
ORDER BY s.createdAt
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream {name: 'itsbigchase'})-[:VIP]->(u:User)
RETURN u
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream {name: 'itsbigchase'})-[:PLAYS]->(g:Game)
RETURN g.name
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.total_view_count > 5000000
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream {name: '9linda'})<-[:MODERATOR]-(u:User)
RETURN u",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.followers > 1000000
RETURN l.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers >= 20000 AND s.followers <= 50000
RETURN s
ORDER BY s.createdAt ASC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN s.name
ORDER BY s.createdAt
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream {name: 'summit1g'})-[:VIP]->(vip)
RETURN vip
ORDER BY vip.followers DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream {name: 'itsbigchase'})-[:HAS_TEAM]->(t:Team)
RETURN t
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream {name: '9linda'})<-[:CHATTER]-(chatterStream:Stream)
RETURN chatterStream",Simple Retrieval Queries,twitch,False,False,False
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(DISTINCT s) AS streams_count
WHERE streams_count > 1
RETURN u
LIMIT 5",Simple Retrieval Queries,twitch,False,True,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
RETURN g.name AS Game, count(s) AS StreamsCount
ORDER BY s.followers DESC
LIMIT 5",Simple Retrieval Queries,twitch,True,False,False
"MATCH (u:User)-[:MODERATOR]->(:Stream), (u)-[:VIP]->(:Stream)
RETURN DISTINCT u.name
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL
WITH s
ORDER BY s.followers DESC
LIMIT 1
MATCH (s)-[:MODERATOR]->(m)
RETURN m.name AS ModeratorName, m.id AS ModeratorID
ORDER BY m.followers DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WHERE s.createdAt >= datetime('2021-01-01T00:00:00Z') AND s.createdAt < datetime('2022-01-01T00:00:00Z')
RETURN s
ORDER BY s.createdAt ASC
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS moderated_streams
RETURN u.name AS user_name, moderated_streams
ORDER BY moderated_streams DESC
LIMIT 1",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(vip)
WHERE s.createdAt >= datetime('2018-01-01T00:00:00Z') AND s.createdAt <= datetime('2018-12-31T23:59:59Z')
RETURN vip
ORDER BY vip.followers DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE s.total_view_count IS NOT NULL
RETURN t
ORDER BY s.total_view_count DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt > datetime('2015-01-01T00:00:00Z')
AND exists {
  (s)-[:CHATTER]->(:User)
}
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers >= 1000 AND s.followers <= 5000
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE s.createdAt < datetime('2018-01-01T00:00:00Z')
RETURN DISTINCT t.name",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
RETURN g.name AS Game, s.followers AS Followers
ORDER BY s.followers DESC
LIMIT 3",Complex Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(DISTINCT s) AS streams_count
WHERE streams_count >= 2
RETURN u",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE s.followers > 5000
RETURN s.name",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(mod:Stream)
RETURN count(DISTINCT s) AS NumberOfStreams",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.total_view_count > 10000000
RETURN DISTINCT l.name",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream {name: 'summit1g'})-[:MODERATOR]->(m)
RETURN m",Complex Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WHERE size{(s)-[:HAS_LANGUAGE]->(:Language)} > 1
RETURN s",Complex Retrieval Queries,twitch,True,False,False
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(s) AS streams_count
WHERE streams_count > 3
RETURN u.name, streams_count",Complex Retrieval Queries,twitch,False,True,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Grand Theft Auto V'})
WHERE s.followers IS NOT NULL
RETURN s
ORDER BY s.followers DESC",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt >= datetime('2019-01-01T00:00:00Z') AND s.createdAt < datetime('2020-01-01T00:00:00Z')
  AND length(s.description) > 50
RETURN s",Complex Retrieval Queries,twitch,True,False,False
"MATCH (s:Stream)-[:MODERATOR]->(u:User {name: 'itsbigchase'})
RETURN s",Complex Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.followers > 10000
RETURN DISTINCT l.name",Complex Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WITH u, count(s) AS streams_count
WHERE streams_count > 1
RETURN u.name, streams_count",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'})
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
RETURN s, u",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User {name: 'itsbigchase'})
RETURN s
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream {name: 'summit1g'})<-[:CHATTER]-(u:User)
RETURN u.name
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL
WITH s ORDER BY s.followers DESC LIMIT 1
MATCH (s)-[:CHATTER]->(chatterStream:Stream)
RETURN chatterStream",Simple Retrieval Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game {name: 'Grand Theft Auto V'})
RETURN u
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.url ENDS WITH 'itsbigchase'
RETURN g.name
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream {name: '9linda'})<-[:VIP]-(u:User)
RETURN u
ORDER BY u.followers DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(other:Stream)
WITH s, count{(s)-[:VIP]->(other)} AS vipCount
WHERE vipCount > 1
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)-[:VIP]->(u:User)
WHERE s.followers > 1000000
RETURN u.name AS VIPUserName, u.id AS VIPUserId",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
RETURN s",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:CHATTER]->()} AS chatterCount
ORDER BY chatterCount DESC
LIMIT 5
RETURN s",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL
WITH s
ORDER BY s.followers ASC
LIMIT 1
MATCH (s)-[:MODERATOR]->(m:User)
RETURN m.name, m.id
ORDER BY m.followers DESC
LIMIT 3",Simple Retrieval Queries,twitch,False,False,False
"MATCH (s:Stream)
WHERE s.followers = 5898590
RETURN s
LIMIT 5",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream {name: ""itsbigchase""})-[:HAS_LANGUAGE]->(l:Language)
RETURN l.name
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers > 5000000
RETURN s",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 5",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.total_view_count > 1000000
RETURN DISTINCT g.name",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt <= datetime('2010-01-01T00:00:00Z')
RETURN s
ORDER BY s.createdAt
LIMIT 3",Simple Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.followers > 10000
RETURN l.name AS Language
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
RETURN t.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt > datetime('2019-01-01T00:00:00Z')
RETURN s
ORDER BY s.createdAt DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
WHERE s.total_view_count < 10000
RETURN s",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User {name: 'itsbigchase'})
RETURN s
LIMIT 3",Verbose query,twitch,False,False,False
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
WHERE u.followers > 2000
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(c:Stream)
WHERE c.createdAt < datetime('2017-01-01T00:00:00Z')
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User {name: 'creightonolsen'})
WHERE s.total_view_count > 1000000
RETURN s",Verbose query,twitch,False,False,False
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE t.createdAt > datetime('2015-01-01T00:00:00Z')
RETURN s
ORDER BY s.createdAt
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE exists {
  (s)-[:CHATTER]->(:User)
}
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'})
WHERE exists {
  (s)-[:MODERATOR]->(m:User) WHERE m.followers > 5000
}
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:PLAYS]->(s:Stream)
WHERE u.name CONTAINS 'doduik' AND u.total_view_count > 3000
RETURN s",Verbose query,twitch,False,False,False
"MATCH (s:Stream)-[:MODERATOR]->(u:User {name: 'itsbigchase'})
RETURN s
LIMIT 3",Verbose query,twitch,False,False,False
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE t.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WHERE u.followers < 3000
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.description CONTAINS 'premiere' AND s.followers >= 5000
RETURN s",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
WHERE s.total_view_count IS NOT NULL
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:MODERATOR]->()} AS moderatorCount
ORDER BY moderatorCount DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, moderatorCount",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.followers DESC
LIMIT 1",Complex Retrieval Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE s.followers > 10000
RETURN s",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WHERE u.total_view_count > 10000
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WHERE s.name CONTAINS 'big'
RETURN u
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User {name: 'itsbigchase'})
RETURN s",Verbose query,twitch,False,False,True
"MATCH (s:Stream)
WITH s, count{(s)-[:VIP]->(:User)} AS vipCount
ORDER BY vipCount DESC
LIMIT 3
RETURN s",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN s
ORDER BY s.followers ASC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User {name: 'itsbigchase'})
RETURN s
LIMIT 3",Verbose query,twitch,False,False,False
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WHERE s.description CONTAINS 'inclusive'
RETURN u",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
WHERE u.name CONTAINS 'chase'
RETURN s
LIMIT 3",Verbose query,twitch,False,False,False
"MATCH (s:Stream)
WHERE s.createdAt < datetime('2010-01-01T00:00:00Z')
RETURN s
ORDER BY s.createdAt
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE s.followers > 10000
RETURN t
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE exists {
  (s)-[:VIP]->(:User)
}
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User {name: 'itsbigchase'})
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt > datetime('2015-01-01T00:00:00Z') AND s.followers > 1000
RETURN s
ORDER BY s.createdAt ASC
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE s.followers > 2000
RETURN s",Verbose query,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt >= datetime('2018-01-01T00:00:00Z') AND s.followers IS NOT NULL
RETURN s.name
ORDER BY s.followers DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers >= 5000
RETURN g.name AS GameName
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.total_view_count IS NOT NULL
RETURN s, l
ORDER BY s.total_view_count ASC
LIMIT 1",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(DISTINCT s) AS streams_count
WHERE streams_count > 1
RETURN u.name, streams_count
ORDER BY streams_count DESC
LIMIT 3",Verbose query,twitch,False,True,False
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE t.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN s.name, s.url
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(vip:User)
RETURN s.id AS StreamID, vip.name AS VIPName",Verbose query,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
RETURN t.name, count(s) AS NumberOfStreams
ORDER BY NumberOfStreams DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN u
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s1:Stream {name: 'itsbigchase'})
MATCH (u)-[:VIP]->(s2:Stream)
WHERE s1 <> s2
RETURN DISTINCT u",Verbose query,twitch,False,False,False
"MATCH (s:Stream)-[:MODERATOR]->(:User)
WHERE s.followers IS NOT NULL
RETURN s
ORDER BY s.followers ASC
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE exists {
    (s)-[:HAS_LANGUAGE]->(:Language {name: 'en'}) 
    AND 
    (s)-[:HAS_LANGUAGE]->(:Language {name: 'de'})
}
RETURN DISTINCT g.name",Verbose query,twitch,True,False,False
"MATCH (s:Stream)
WITH s, count{(s)-[:CHATTER]->()} AS chatterCount
ORDER BY chatterCount DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, chatterCount",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WHERE s.total_view_count > 10000
RETURN u",Verbose query,twitch,False,True,False
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'})
WHERE s.total_view_count < 50000
RETURN s",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.description CONTAINS 'strategy'
RETURN l.name
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
WHERE u.name STARTS WITH 'c'
RETURN s.description",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(vipUser:User), (s)-[:MODERATOR]->(modUser:User)
RETURN s.id AS StreamID, collect(DISTINCT vipUser.name) AS VIPUserNames, collect(DISTINCT modUser.name) AS ModeratorUserNames",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH g.name AS GameName, count(s) AS StreamCount
ORDER BY StreamCount DESC
LIMIT 5
RETURN GameName, StreamCount",Verbose query,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt > datetime('2019-01-01T00:00:00Z')
RETURN s.id, s.createdAt, s.total_view_count
ORDER BY s.createdAt ASC
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE t.createdAt > datetime('2018-01-01T00:00:00Z')
RETURN s.id AS StreamID, t.name AS TeamName",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS moderated_streams
ORDER BY moderated_streams DESC
LIMIT 3
RETURN u.name, moderated_streams",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'})
WHERE s.total_view_count < 10000
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User {name: 'itsbigchase'})
WHERE s.createdAt < datetime('2018-01-01T00:00:00Z')
RETURN s
ORDER BY s.createdAt DESC
LIMIT 5",Verbose query,twitch,False,False,False
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'})
WHERE s.followers < 5000
RETURN s
LIMIT 3",Verbose query,twitch,False,False,False
"MATCH (s:Stream)
WHERE s.description CONTAINS 'casual play' AND s.total_view_count > 100000
RETURN s",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
WHERE exists {
  (s)-[:VIP]->(:User)
}
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WITH s, count(u) AS userChatters
ORDER BY userChatters DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, userChatters",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WHERE s.total_view_count > 500000
RETURN u
ORDER BY s.createdAt
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: ""DayZ""})
RETURN s.id, s.name, s.followers
ORDER BY s.createdAt ASC
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(c:Stream)
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE s.createdAt > datetime('2018-01-01T00:00:00Z')
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'})
WHERE s.total_view_count IS NOT NULL
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.description IS NOT NULL
RETURN s, size(split(s.description, ' ')) AS WordCount
ORDER BY WordCount DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE l.name NOT IN ['en', 'ru']
RETURN s
LIMIT 3",Complex Aggregation Queries,twitch,True,False,False
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WHERE u.followers > 5000
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(:User)
WITH u, count(*) AS moderator_count
ORDER BY moderator_count DESC
LIMIT 3
RETURN u.name, moderator_count",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(:Stream)
WITH s, count{(s)-[:VIP]->(:Stream)} AS vipCount
ORDER BY vipCount DESC
LIMIT 5
RETURN s",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers IS NOT NULL
RETURN g.name AS Game, s.followers AS Followers
ORDER BY s.followers DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.description CONTAINS 'coverage'
RETURN l.name
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WITH s, count(u) AS chatterCount
ORDER BY chatterCount DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, chatterCount",Complex Aggregation Queries,twitch,False,False,True
"MATCH (t:Team)
RETURN t
ORDER BY t.createdAt ASC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WHERE s.total_view_count > 10000
RETURN u
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WITH s, count(DISTINCT l) AS num_languages
WHERE num_languages > 3
RETURN s
ORDER BY s.total_view_count DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WITH s, COUNT(DISTINCT g) AS uniqueGames
ORDER BY uniqueGames DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, uniqueGames",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
WHERE u.followers > 5000
RETURN s.name
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.total_view_count > 10000
RETURN g.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WHERE t.createdAt < datetime('2015-01-01T00:00:00Z')
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE s.total_view_count > 100000
RETURN s
ORDER BY s.createdAt ASC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
WITH s, count(t) AS teamsCount
ORDER BY teamsCount DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, teamsCount",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
WITH s, count(DISTINCT u) AS vipCount
WHERE vipCount > 3
RETURN s",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team)
RETURN t.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:CHATTER]->(s:Stream)
WITH u, count(DISTINCT s) AS chatterCount
ORDER BY chatterCount DESC
LIMIT 5
RETURN u.name, chatterCount",Complex Aggregation Queries,twitch,False,True,False
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WHERE s.followers > 10000
WITH l, count(s) AS stream_count
ORDER BY stream_count ASC
LIMIT 3
RETURN l.name, stream_count",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.createdAt ASC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.followers IS NOT NULL AND s.total_view_count IS NOT NULL AND s.total_view_count > 0
RETURN s.id, s.name, s.followers, s.total_view_count, s.followers * 1.0 / s.total_view_count AS ratio
ORDER BY ratio DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game), (s)-[:HAS_LANGUAGE]->(l:Language {name: ""en""})
RETURN g.name, count(s) AS stream_count
ORDER BY stream_count DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User {name: 'itsbigchase'})-[:MODERATOR]->(s:Stream)
RETURN s.name
LIMIT 3",Complex Aggregation Queries,twitch,False,False,False
"MATCH (s:Stream)-[:VIP]->(u:User)
RETURN s.id AS StreamID, s.name AS StreamName, count(u) AS NumberOfVIPUsers
ORDER BY NumberOfVIPUsers DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
RETURN s
ORDER BY s.followers DESC, s.total_view_count ASC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game), (s)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'})
RETURN g.name AS Game, count(s) AS StreamCount
ORDER BY StreamCount DESC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH s, u ORDER BY s.createdAt ASC
LIMIT 3
RETURN u.name AS UserName, s.createdAt AS StreamCreationDate",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WITH u, count(DISTINCT s) AS vipCount
ORDER BY vipCount DESC
LIMIT 3
RETURN u.name, vipCount",Complex Aggregation Queries,twitch,False,False,True
"MATCH (t:Team {name: 'ESO Stream Team'})<-[:HAS_TEAM]-(s:Stream)-[:PLAYS]->(g:Game)
RETURN DISTINCT g.name AS GameName",Complex Retrieval Queries,twitch,False,False,True
"MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)
WHERE s.followers > 10000
WITH t, count(s) AS streamCount
ORDER BY streamCount DESC
LIMIT 5
RETURN t.name, streamCount",Complex Aggregation Queries,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
WITH u, count(s) AS moderated_streams
ORDER BY moderated_streams DESC
LIMIT 5
RETURN u.name, moderated_streams",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt > datetime('2020-01-01T00:00:00Z')
RETURN s
ORDER BY s.createdAt ASC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt IS NOT NULL
RETURN s
ORDER BY s.createdAt ASC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers IS NOT NULL AND s.total_view_count IS NOT NULL AND s.total_view_count > 0
WITH g, s.followers * 1.0 / s.total_view_count AS ratio
ORDER BY ratio DESC
RETURN g.name, COLLECT(ratio)[..3] AS top_ratios
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.createdAt >= datetime('2018-01-01T00:00:00Z') AND s.createdAt < datetime('2019-01-01T00:00:00Z')
RETURN s
ORDER BY s.createdAt ASC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->()
WITH s, count{(s)-[:MODERATOR]->()} AS moderatorCount
ORDER BY moderatorCount DESC
LIMIT 5
MATCH (s)-[:HAS_LANGUAGE]->(l:Language)
RETURN l.name, count(l) AS languageCount
ORDER BY languageCount DESC",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
WITH s, count(u) AS vipCount
ORDER BY vipCount DESC
LIMIT 3
RETURN s.id AS StreamID, s.name AS StreamName, vipCount",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(:Team)
WHERE s.followers > 10000
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WHERE exists {
  MATCH (u)-[:MODERATOR]->(s)
}
RETURN s
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers > 5000
RETURN g.name, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'})
WHERE s.total_view_count > 1000000
RETURN s",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WHERE s.description CONTAINS 'Belarus'
RETURN u
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
WHERE exists{ (s)-[:VIP]->(:User) }
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:VIP]->(s:Stream)
WHERE s.total_view_count > 500000
RETURN u",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:VIP]->(u:User)
WHERE u.followers > 5000
WITH s, count(u) AS vipCount
ORDER BY vipCount DESC
LIMIT 3
RETURN s",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.createdAt > datetime('2015-01-01T00:00:00Z')
RETURN g.name, count(s) AS streams_count
ORDER BY streams_count DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:MODERATOR]->(u:User)
WHERE u.followers > 1000
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'})
WHERE s.followers IS NOT NULL
RETURN s
ORDER BY s.followers DESC
LIMIT 5",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'})
WHERE s.followers >= 1000 AND s.followers <= 5000
RETURN s",Verbose query,twitch,False,False,True
"MATCH (u:User)-[:MODERATOR]->(s:Stream)
WITH u, count(s) AS streams_count
WHERE streams_count > 1
RETURN u
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'})
RETURN s
LIMIT 3",Verbose query,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'})
RETURN s
ORDER BY s.createdAt
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)
WHERE s.url IS NOT NULL
RETURN s
ORDER BY length(s.url) DESC
LIMIT 5",Complex Aggregation Queries,twitch,True,False,False
"MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE s.followers IS NOT NULL AND g.total_view_count > 100000
RETURN s
ORDER BY s.followers ASC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,False
"MATCH (s:Stream)-[:CHATTER]->(u:User)
WHERE size(split(u.description, ' ')) > 50
RETURN s
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
WITH s, count(l) AS num_languages
ORDER BY num_languages DESC
LIMIT 5
RETURN s.id AS StreamID, s.name AS StreamName, num_languages",Complex Aggregation Queries,twitch,False,False,True
"MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language)
RETURN l.name, s.followers
ORDER BY s.followers ASC
LIMIT 3",Complex Aggregation Queries,twitch,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweeted:Tweet)
RETURN retweeted
ORDER BY retweeted.created_at DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.screen_name CONTAINS 'Neo4j'
RETURN u
ORDER BY u.screen_name
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag)
WHERE t.favorites > 100
RETURN h.name AS Hashtag
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:Me)
RETURN t",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'})
WHERE u.profile_image_url CONTAINS 'horned_reaper'
RETURN u",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
MATCH (t)-[:TAGS]->(h:Hashtag)
RETURN h.name AS Hashtag
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(f:User)
RETURN f
ORDER BY f.betweenness DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
WHERE l.url CONTAINS 'https://twitter.com'
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)
WHERE date(t.created_at) = date('2021-03-16')
RETURN rt
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User {location: 'Sweden'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source)
RETURN s.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN t, h",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.followers > 10000
RETURN f
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:USING]->(s:Source {name: 'Buffer'})
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
MATCH (t)-[:TAGS]->(h:Hashtag)
RETURN h.name AS Hashtag
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
WHERE exists {
  (m:Me)-[:AMPLIFIES]->(t)
}
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:REPLY_TO]->(other:Tweet)
RETURN t, other",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
RETURN l.url
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:SIMILAR_TO]->(similar:User)
RETURN similar
ORDER BY similar.score DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(:Tweet)
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'}), (t)-[:CONTAINS]->(l:Link)
RETURN t, l",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j', location: 'Graphs Are Everywhere'})
RETURN u
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (me:Me)-[:FOLLOWS]->(user:User)
RETURN user
ORDER BY user.betweenness DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User)
WHERE m.followers >= 5000
RETURN t",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source)
RETURN s.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:INTERACTS_WITH]->(other:User)
RETURN other, count(*) AS interactions
ORDER BY interactions DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.betweenness DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
WHERE t.favorites > 200
RETURN t
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(n:User {name: 'Neo4j'})
WHERE u.location = n.location AND u.location IS NOT NULL
RETURN u
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(f:User)-[:POSTS]->(t:Tweet)
WHERE t.favorites > 50
RETURN f
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(:Link)
WHERE exists{(t)-[:RETWEETS]->(:Tweet)}
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)<-[:AMPLIFIES]-(amplifier:User)
RETURN amplifier
LIMIT 3",Pathfinding Queries,twitter,False,False,False
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
MATCH (t)-[:USING]->(s:Source)
RETURN s.name, count(t) AS mentions
ORDER BY mentions DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:REPLY_TO]->(:Tweet), (t)-[:TAGS]->(:Hashtag)
RETURN t",Pathfinding Queries,twitter,False,False,False
"MATCH (neo4j:User {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:MENTIONS]->(mentioned:User)
WHERE mentioned.following > neo4j.following
RETURN mentioned",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
WHERE exists {
  (m:Me)-[:AMPLIFIES]->(t)
}
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(:User)
WHERE exists{(t)-[:RETWEETS]->(:Tweet)}
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.location = 'Graphs Are Everywhere'
RETURN f
ORDER BY f.followers DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,False
"MATCH (neo4j:User {screen_name: 'neo4j'})-[:FOLLOWS]->(follower:User)
WHERE exists {
    MATCH (neo4j)-[:POSTS]->(:Tweet)-[:MENTIONS]->(follower)
}
RETURN follower
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet),
      (t)-[:TAGS]->(h:Hashtag)
RETURN t, rt, h
ORDER BY t.favorites DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
WHERE t.favorites > 50
RETURN t",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(rt:Tweet)-[:RETWEETS]->(t:Tweet)<-[:POSTS]-(other:User {location: 'Graphs Are Everywhere'})
RETURN t
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
RETURN t, l.url
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u.name
ORDER BY u.followers DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.followers > 1000
RETURN f",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.betweenness DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:INTERACTS_WITH]->(other:User)
RETURN other.name, count(*) AS interactions
ORDER BY interactions DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:USING]->(s:Source)
RETURN s.name AS SourceName, t.favorites AS Favorites
ORDER BY t.favorites DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
WHERE t.favorites > 100
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u.location AS Location, u.statuses AS Statuses
ORDER BY u.statuses DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (neo:User {name: 'Neo4j'})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweetedTweet:Tweet)-[:POSTS]-(retweetedUser:User)
WHERE neo.name IS NOT NULL
RETURN retweetedUser.name, count(retweetedTweet) AS retweets
ORDER BY retweets DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(followed:User)-[:POSTS]->(t:Tweet)-[:USING]->(s:Source {name: 'Buffer'})
RETURN followed.name, followed.screen_name, t.text
ORDER BY t.created_at DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
RETURN u, t",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:MENTIONS]->(t:Tweet)
WHERE t.favorites > 100
RETURN t",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)-[:POSTS]-(retweeter:User)
RETURN retweeter.screen_name, count(rt) AS retweet_count
ORDER BY retweet_count DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:REPLY_TO]->(:Tweet), (t)-[:CONTAINS]->(:Link)
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'})
WHERE u.betweenness > 100000000
RETURN u
LIMIT 3",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(:Hashtag),
      (t)-[:MENTIONS]->(:User)
RETURN t
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(followed:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(mentioned:User {screen_name: 'neo4j'})
RETURN followed, t",Pathfinding Queries,twitter,False,False,True
"MATCH (neo4j:User {screen_name: 'neo4j'})-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet)<-[:POSTS]-(otherUser:User)
WHERE neo4j.followers > otherUser.followers
RETURN original AS TweetRetweeted, otherUser AS OriginalPoster",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:INTERACTS_WITH]->(other:User)
WHERE other.location IS NOT NULL
RETURN other.location AS Location, count(other) AS InteractionCount
ORDER BY InteractionCount DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
WHERE exists {
    (u)-[:AMPLIFIES]->(:User)-[:POSTS]->(t)
}
RETURN t
LIMIT 5",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)<-[:RETWEETS]-(rt:Tweet)<-[:POSTS]-(ru:User)
RETURN ru
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(mentioned:User)
WHERE mentioned.followers > u.followers
RETURN t",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source {name: 'Buffer'})
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.betweenness IS NOT NULL
RETURN f
ORDER BY f.betweenness DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {screen_name: 'neo4j'})
WHERE t.favorites > 50
RETURN t
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name, count(h) AS hashtag_count
ORDER BY hashtag_count DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'})
MATCH (u)-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (n:User {screen_name: 'neo4j'})-[:FOLLOWS]->(u:User)
WHERE u.statuses > n.statuses
RETURN u",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User)-[:INTERACTS_WITH]->(neo4j:User {screen_name: 'neo4j'})
MATCH (u)-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:SIMILAR_TO]->(similar:User)
WHERE similar.score < 0.5
RETURN similar
LIMIT 3",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:RETWEETS]->(t:Tweet)-[:CONTAINS]->(l:Link)
RETURN t, l
ORDER BY t.favorites DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:REPLY_TO]->(:Tweet)
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(mentioned:User)
RETURN mentioned.name, count(t) AS mentions_count
ORDER BY mentions_count DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.followers = 663
RETURN u
ORDER BY u.betweenness DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (me:Me {screen_name: 'neo4j'})-[:AMPLIFIES]->(user:User)
RETURN user, count(*) AS amplification_count
ORDER BY amplification_count DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(neo:User {screen_name: 'neo4j'}),
      (u)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(neo)
RETURN u
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
WHERE exists{(t)-[:RETWEETS]->(:Tweet)} AND exists{(t)-[:MENTIONS]->(:User)}
RETURN t
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
RETURN t.id, t.text, t.favorites
ORDER BY t.favorites DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)
WITH u, count(t) AS tweetsCount
ORDER BY tweetsCount DESC
LIMIT 3
RETURN u.screen_name AS screen_name",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag)
WHERE t.favorites > 200
RETURN h.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,False
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'})
RETURN u
ORDER BY u.following ASC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:MENTIONS]->(user:User)
RETURN user, count(tweet) AS mentions
ORDER BY mentions DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:CONTAINS]->(link:Link)
RETURN link.url
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:REPLY_TO]->(:Tweet)
RETURN tweet
ORDER BY tweet.created_at ASC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:USING]->(source:Source {name: 'Buffer'})
RETURN tweet
ORDER BY tweet.created_at DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.location = 'Graphs Are Everywhere'
RETURN f",Verbose query,twitter,False,False,False
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:INTERACTS_WITH]->(other:User)
WHERE exists{(u)-[:FOLLOWS]->(other)}
RETURN other
ORDER BY other.followers DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(original:Tweet)-[:RETWEETS]->(retweet:Tweet)
RETURN retweet
ORDER BY retweet.favorites DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:FOLLOWS]->(user:User)
WHERE user.profile_image_url ENDS WITH 'normal.jpg'
RETURN user
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
WHERE t.favorites > 100
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.url STARTS WITH 'https'
RETURN f",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:TAGS]->(hashtag:Hashtag)
RETURN hashtag.name
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweetedTweet:Tweet)-[:MENTIONS]->(mentionedUser:User)
RETURN mentionedUser.name, count(mentionedUser) AS mentionsCount
ORDER BY mentionsCount DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:AMPLIFIES]->(user:User)-[:POSTS]->(tweet:Tweet)-[:USING]->(source:Source)
RETURN DISTINCT source
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
WHERE l.url CONTAINS 'https://twitter.com'
RETURN t
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:FOLLOWS]->(user:User)-[sim:SIMILAR_TO]->(neo4j:User {name: 'Neo4j'})
WHERE sim.score > 0.8
RETURN user",Verbose query,twitter,False,False,False
"MATCH (me:Me)-[:INTERACTS_WITH]->(user:User)
WHERE user.betweenness > 100000000
RETURN user
LIMIT 3",Verbose query,twitter,False,False,False
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j', location: 'Graphs Are Everywhere'})
RETURN u
ORDER BY u.followers DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:TAGS]->(hashtag:Hashtag {name: 'education'})
RETURN tweet
ORDER BY tweet.created_at ASC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:MENTIONS]->(user:User)
RETURN user, count(tweet) AS mentions
ORDER BY mentions DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)-[:POSTS]-(retweetUser:User)
RETURN retweetUser.name AS UserName, COUNT(rt) AS RetweetCount
ORDER BY RetweetCount DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
WHERE l.url CONTAINS 'gov'
RETURN l.url
LIMIT 3",Verbose query,twitter,False,False,False
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)
WHERE tweet.created_at >= datetime('2021-01-01T00:00:00Z') AND tweet.created_at <= datetime('2021-02-28T23:59:59Z')
RETURN tweet
ORDER BY tweet.favorites DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.profile_image_url IS NOT NULL AND NOT f.profile_image_url ENDS WITH 'normal.jpg'
RETURN f",Verbose query,twitter,False,False,True
"MATCH (me:Me {name: 'Neo4j'})-[:AMPLIFIES]->(tweet:Tweet)-[:TAGS]->(hashtag:Hashtag)
RETURN hashtag.name
LIMIT 3",Verbose query,twitter,False,False,False
"MATCH (u:User)-[:FOLLOWS]->(me:Me)
WHERE u.following > 10000
RETURN u
ORDER BY u.following DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
WHERE exists{(t)-[:RETWEETS]->(:Tweet)}
RETURN t",Pathfinding Queries,twitter,False,False,True
"MATCH (me:Me)-[:AMPLIFIES]->(user:User)
RETURN user",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:SIMILAR_TO {score: score}]->(similar:User)
WHERE score > 0.5
RETURN similar",Verbose query,twitter,True,False,False
"MATCH (u:User)-[s:SIMILAR_TO]->(m:Me {name: 'Neo4j'})
WHERE s.score > 0.5
RETURN u.name, s.score
ORDER BY s.score DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,False
"MATCH (me:Me {name: 'Neo4j'})-[:AMPLIFIES]->(user:User)
RETURN user
ORDER BY user.followers DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
RETURN u.profile_image_url
ORDER BY t.created_at DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
RETURN t.id AS TweetID, l.url AS LinkURL, t.favorites AS Favorites
ORDER BY t.favorites DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'})
RETURN u.name, u.betweenness
ORDER BY u.betweenness DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:REPLY_TO]->(:Tweet)
WHERE t.favorites > 50
RETURN t.text AS TweetName
ORDER BY t.favorites DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(m:Me {name: 'Neo4j'})
WHERE u.location IS NOT NULL
RETURN u.location AS Location, count(u) AS UserCount
ORDER BY UserCount DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:FOLLOWS]->(followed:User)-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
WHERE h.name = 'specificHashtag'
WITH followed, count(t) AS tweetsCount
ORDER BY tweetsCount DESC
LIMIT 3
RETURN followed.name, tweetsCount",Complex Aggregation Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name, count(h) AS usage
ORDER BY usage DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
WHERE t.favorites > 100
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
WITH u, count(t) AS mentions
ORDER BY mentions DESC
LIMIT 3
RETURN u.name, mentions",Complex Aggregation Queries,twitter,False,False,True
"MATCH (me:Me {name: 'Neo4j'})
MATCH (user:User)-[:FOLLOWS]->(me)
WHERE user.location = me.location
RETURN user
ORDER BY user.followers DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,False
"MATCH (neo:User {name: ""Neo4j""})-[:POSTS]->(tweet:Tweet)<-[:RETWEETS]-(user:User)
RETURN user.profile_image_url AS ProfileURL
ORDER BY tweet.created_at DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,False
"MATCH (u:User)-[s:SIMILAR_TO]->(m:Me {name: 'Neo4j'})
RETURN u.name AS UserName, s.score AS SimilarityScore
ORDER BY s.score DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:FOLLOWS]->(followed:User)
WHERE followed.statuses > 500
RETURN followed
ORDER BY followed.statuses DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:FOLLOWS]->(followed:User)
RETURN followed
ORDER BY followed.followers DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {screen_name: 'thobe'})-[:FOLLOWS]->(followed:User)
RETURN followed
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)
WHERE u.betweenness > 300000000
RETURN u",Verbose query,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.followers > 500
RETURN f
ORDER BY f.followers DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {screen_name: 'neo4j'})
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source)
RETURN DISTINCT s.name
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(m:User {name: 'Neo4j'})
RETURN u
ORDER BY u.followers DESC
LIMIT 5",Verbose query,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)
RETURN rt
ORDER BY rt.created_at DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
WHERE EXISTS {
    (m)-[:POSTS]->(:Tweet)-[:MENTIONS]->(u)
}
RETURN u",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j', location: 'Graphs Are Everywhere'})
WHERE u.location = 'Graphs Are Everywhere'
RETURN u",Pathfinding Queries,twitter,False,False,False
"MATCH (u1:User {screen_name: 'neo4j'})-[:FOLLOWS]->(u2:User)-[:FOLLOWS]->(u3:User {screen_name: 'neo4j'})
RETURN u2
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(followed:User)
RETURN followed
ORDER BY followed.followers DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name AS Hashtag, count(*) AS UsageCount
ORDER BY UsageCount DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
WHERE t.favorites > 100
RETURN t, l",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:SIMILAR_TO]->(similar:User)
RETURN similar.name, similar.screen_name, similar.location, similar.followers
ORDER BY similar.score DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source)
RETURN s.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.betweenness > 1000000
RETURN u",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)
RETURN u.name, count(t) AS num_statuses
ORDER BY num_statuses DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User)
RETURN u
ORDER BY t.favorites DESC
LIMIT 1",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'})
WHERE u.followers > 500
RETURN u",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)<-[:RETWEETS]-(other:User)
RETURN t, count(other) AS retweet_count
ORDER BY retweet_count DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,False
"MATCH (u:User)
WHERE u.followers > 0
RETURN u, (toFloat(u.following) / u.followers) AS ratio
ORDER BY ratio DESC",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.betweenness DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)
WHERE u.location IS NOT NULL
RETURN u.location AS Location, count(t) AS TweetCount
ORDER BY TweetCount DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(other:User)
RETURN t, other.screen_name",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(n:User {name: 'Neo4j'})
RETURN u.name, count(*) AS interactions
ORDER BY interactions DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,False
"MATCH (u:User)-[f:FOLLOWS]->(m:Me {screen_name: 'neo4j'})
RETURN u
ORDER BY f.date DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag)
WHERE t.favorites > 50
RETURN h.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:REPLY_TO]->(:Tweet)
WHERE t.favorites > 50
RETURN t",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'})
RETURN u
ORDER BY u.followers ASC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.favorites ASC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'})
RETURN u.name, u.screen_name, u.statuses
ORDER BY u.statuses DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.followers DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(n:User {screen_name: 'neo4j'})
RETURN u.name, u.screen_name, u.statuses
ORDER BY u.statuses DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(:User),
      (t)-[:TAGS]->(:Hashtag)
RETURN t",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: ""Neo4j""})-[:POSTS]->(t:Tweet)
WHERE u.location IS NOT NULL AND u.location <> ""Graphs Are Everywhere""
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,False
"MATCH (me:Me {name: 'Neo4j'})-[:AMPLIFIES]->(user:User)
RETURN user, count(*) AS amplification_count
ORDER BY amplification_count DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:CONTAINS]->(link:Link)
RETURN tweet, link
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
WHERE t.created_at >= datetime('2021-01-01T00:00:00Z')
RETURN t",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(neo:User {name: 'Neo4j'}),
      (u)-[:FOLLOWS]->(me:Me)
RETURN u
LIMIT 5",Complex Retrieval Queries,twitter,False,False,False
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)
WHERE exists {
    (tweet)-[:MENTIONS]->(:User)
}
RETURN tweet
ORDER BY tweet.created_at ASC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (h:Hashtag)<-[:TAGS]-(t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
WITH h, count(t) AS tweetCount
WHERE tweetCount > 5
RETURN h.name, tweetCount",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})
MATCH (other:User)
WHERE abs(u.betweenness - other.betweenness) < 0.1 AND u.name <> other.name
RETURN other
ORDER BY abs(u.betweenness - other.betweenness) ASC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
WHERE t.favorites > 300
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
WHERE exists {
  MATCH (t)-[:MENTIONS]->(m:User)
  WITH t, count(DISTINCT m) AS mentionCount
  WHERE mentionCount >= 2
  RETURN t
}
RETURN t",Complex Retrieval Queries,twitter,False,False,True
"MATCH (me:Me)-[:FOLLOWS]->(user:User)
WHERE me.location = user.location
RETURN user
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:REPLY_TO]->(repliedTweet:Tweet)
RETURN repliedTweet
ORDER BY repliedTweet.created_at DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (neo:User {name: 'Neo4j'})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweetedTweet:Tweet)<-[:POSTS]-(user:User)
WITH user, count(retweetedTweet) AS retweetCount
WHERE retweetCount >= 2
RETURN user",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
WHERE u.profile_image_url = 'http://pbs.twimg.com/profile_images/11837552737537'
RETURN u
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source)
WHERE NOT s.name = 'Buffer'
RETURN t",Complex Retrieval Queries,twitter,False,False,True
"MATCH (me:Me {name: 'Neo4j'})-[:RETWEETS]->(tweet:Tweet)-[:MENTIONS]->(user:User {name: 'Neo4j'})
RETURN tweet
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (u:User)-[:INTERACTS_WITH]->(neo:User {name: 'Neo4j'}),
      (u)-[:INTERACTS_WITH]->(me:Me)
WITH u, count{(u)-[:INTERACTS_WITH]->(neo)} AS interactions_with_neo, count{(u)-[:INTERACTS_WITH]->(me)} AS interactions_with_me
ORDER BY interactions_with_neo + interactions_with_me DESC
LIMIT 5
RETURN u.name, interactions_with_neo, interactions_with_me",Complex Retrieval Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag),
      (t)-[:MENTIONS]->(m:User)
RETURN t, h, m",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(me:Me {name: 'Neo4j'})
RETURN u
ORDER BY u.following DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(f:User)
RETURN f
ORDER BY f.followers DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
WHERE NOT l.url STARTS WITH 'https://twitter.com'
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (me:Me)-[:AMPLIFIES]->(user:User)-[:POSTS]->(tweet:Tweet)
RETURN tweet",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
WITH t
ORDER BY t.created_at DESC
LIMIT 3
MATCH (t)-[:TAGS]->(h:Hashtag)
RETURN h.name",Complex Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(other:User)
WITH u, count(DISTINCT other) AS interactions
ORDER BY interactions DESC
LIMIT 3
RETURN u.name, interactions",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:SIMILAR_TO {score: score}]->(similar:User)
WHERE score > 0.5
RETURN similar",Simple Aggregation Queries,twitter,True,False,False
"MATCH (me:Me {name: 'Neo4j'})-[:AMPLIFIES]->(user:User)
RETURN user
ORDER BY user.followers DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)
WHERE u.location IS NOT NULL
RETURN u.location AS Location, count(t) AS TweetsCount
ORDER BY TweetsCount DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
WHERE l.url CONTAINS 'twitter.com'
RETURN t",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(neo:User {screen_name: 'neo4j'})
WITH u, count(*) AS interactions
ORDER BY interactions DESC
LIMIT 5
RETURN u.screen_name, interactions",Pathfinding Queries,twitter,False,False,False
"MATCH (neo4j:User {screen_name: 'neo4j'})-[:POSTS]->(originalTweet:Tweet)<-[:REPLY_TO]-(replyTweet:Tweet)
RETURN replyTweet
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet)
RETURN t
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:SIMILAR_TO]->(similar:User)
RETURN similar
ORDER BY similar.score DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
RETURN l.url AS LinkURL",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User)
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source)
RETURN s.name, count(t) AS tweets_count
ORDER BY tweets_count DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(:Hashtag)
RETURN t
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)-[:POSTS]-(ru:User)
RETURN ru
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u.name, u.screen_name, u.statuses
ORDER BY u.statuses DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
RETURN t, l.url AS LinkURL",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.betweenness = 0
RETURN f
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)
WHERE t.favorites >= 50 AND t.favorites <= 100
RETURN t
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet)
RETURN u.name, count(t) AS tweets_count
ORDER BY tweets_count DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (neo4j:User {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:MENTIONS]->(mentioned:User)
WHERE mentioned.followers > neo4j.followers
RETURN mentioned",Pathfinding Queries,twitter,False,False,True
"MATCH (me:Me {screen_name: 'neo4j'})-[:AMPLIFIES]->(tweet:Tweet)
RETURN tweet
ORDER BY tweet.created_at ASC
LIMIT 3",Pathfinding Queries,twitter,False,False,False
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {screen_name: 'neo4j'})
WHERE EXISTS {
  (t)-[:RETWEETS]->(:Tweet)
}
RETURN t
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:INTERACTS_WITH]->(other:User)
RETURN other, count(*) AS interactions
ORDER BY interactions DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:SIMILAR_TO {score: score}]->(similar:User)
WHERE score > 0.5
RETURN similar
ORDER BY score DESC
LIMIT 3",Pathfinding Queries,twitter,True,False,False
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:USING]->(s:Source {name: 'Buffer'})
RETURN u
ORDER BY count(t) DESC
LIMIT 5",Pathfinding Queries,twitter,True,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)
WHERE EXISTS { (rt)-[:TAGS]->(:Hashtag) }
RETURN t, rt",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)
WHERE u.following > 10000
RETURN t
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(neo4j:User {screen_name: 'neo4j'})
WHERE u.followers > neo4j.followers
RETURN u",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
WITH t, size((t)-[:REPLY_TO]->(:Tweet)) AS replies
ORDER BY replies DESC
LIMIT 5
RETURN t",Pathfinding Queries,twitter,True,False,False
"MATCH (t:Tweet)-[:MENTIONS]->(u:User)
WHERE u.name = 'Neo4j'
RETURN t
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)
RETURN rt
ORDER BY rt.favorites DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
RETURN u, count(t) AS mentions
ORDER BY mentions DESC",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j', location: 'Graphs Are Everywhere'})
RETURN u",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
WHERE EXISTS { (t)-[:CONTAINS]->(:Link) }
RETURN t
ORDER BY t.created_at DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)-[:MENTIONS]->(mentioned:User)
RETURN mentioned.name, count(rt) AS retweet_mentions
ORDER BY retweet_mentions DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:REPLY_TO]->(:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (me:Me {name: 'Neo4j'})-[:AMPLIFIES]->(tweet:Tweet)
WHERE tweet.favorites > 100
RETURN tweet",Simple Aggregation Queries,twitter,False,False,False
"MATCH (me:Me {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweeted:Tweet)
MATCH (retweeted)-[:USING]->(source:Source)
RETURN source.name, count(retweeted) AS retweets
ORDER BY retweets DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
WITH u, count(t) AS tweetCount
ORDER BY tweetCount DESC
LIMIT 3
RETURN u",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:REPLY_TO]->(rt:Tweet)
RETURN rt
ORDER BY rt.created_at DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
WHERE exists{(t)-[:RETWEETS]->(:Tweet)}
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,False
"MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet)
RETURN u.name, count(t) AS tweets_count
ORDER BY tweets_count DESC",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.betweenness > 300000000
RETURN u",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.followers DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(followed:User)
RETURN followed
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(mentioned:User)
RETURN DISTINCT mentioned",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)
WHERE t.favorites > 100
RETURN u",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:USING]->(s:Source)
RETURN DISTINCT s.name
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)-[:POSTS]-(ru:User)
RETURN DISTINCT ru",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.betweenness IS NOT NULL
RETURN u
ORDER BY u.betweenness DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source {name: 'Buffer'})
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (n:User {name: 'Neo4j'})-[:FOLLOWS]->(u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
RETURN u.name AS UserName, count(t) AS TweetsCount
ORDER BY TweetsCount DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag)
WHERE t.text CONTAINS 'education'
RETURN h.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'})
RETURN u",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.betweenness > 300000000
RETURN u",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)-[:POSTS]-(ru:User)
RETURN ru.name AS RetweetedUser
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
RETURN t.id AS TweetID, t.text AS TweetText, t.favorites AS Favorites
ORDER BY t.favorites DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN u.name AS UserName, count(t) AS TweetCount
ORDER BY TweetCount DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)
OPTIONAL MATCH (t)-[:RETWEETS]->(rt:Tweet)
WITH t, coalesce(sum(rt.favorites), 0) AS retweet_favorites
RETURN t.id AS TweetID, t.text AS Text, t.favorites + retweet_favorites AS TotalFavorites
ORDER BY TotalFavorites DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (me:Me {name: 'Neo4j'})
MATCH (user:User)
WHERE user.betweenness = me.betweenness AND user.following = me.following
RETURN user
ORDER BY user.followers DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source)
RETURN s.name, count(t) AS tweets_count
ORDER BY tweets_count DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(followed:User)
RETURN followed
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)
WITH t, count{(t)-[:MENTIONS]->()} + count{(t)-[:RETWEETS]->()} + count{(t)-[:REPLY_TO]->()} AS totalInteractions
ORDER BY totalInteractions DESC
LIMIT 5
RETURN t, totalInteractions",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
WHERE l.url STARTS WITH 'https://twitter.com'
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {screen_name: 'neo4j'})
RETURN t",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(other:User)
WITH u, count(other) AS interactions
ORDER BY interactions DESC
LIMIT 5
RETURN u.name AS UserName, interactions",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)<-[:MENTIONS]-(t:Tweet)
WITH u, count(t) AS mentions
ORDER BY mentions DESC
LIMIT 5
RETURN u.name, mentions",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:AMPLIFIES]->(t:Tweet)
WITH u, count(t) AS amplified_count
ORDER BY amplified_count DESC
LIMIT 3
RETURN u, amplified_count",Simple Aggregation Queries,twitter,False,False,False
"MATCH (t:Tweet)
WITH t, size((t)<-[:REPLY_TO]-(:Tweet)) AS repliesCount
ORDER BY repliesCount DESC
LIMIT 5
RETURN t, repliesCount",Simple Aggregation Queries,twitter,True,False,False
"MATCH (t:Tweet)
WITH t, size{(t)-[:RETWEETS]->(:Tweet)} AS retweetCount
ORDER BY retweetCount DESC
LIMIT 5
RETURN t, retweetCount",Simple Aggregation Queries,twitter,True,False,False
"MATCH (u:User)
WHERE u.location IS NOT NULL
RETURN u.location AS Location, count(u) AS UserCount
ORDER BY UserCount DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:SIMILAR_TO]->(similar:User)
RETURN similar.name AS UserName, similar.screen_name AS ScreenName, similar.location AS Location
ORDER BY similar.score DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,False
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
RETURN t.id AS TweetID, l.url AS LinkURL
ORDER BY t.favorites DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (:Tweet)-[r:TAGS]->(h:Hashtag)
RETURN h.name, count(r) AS usage
ORDER BY usage DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)
RETURN u, count(t) AS TweetsCount
ORDER BY TweetsCount DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:USING]->(s:Source)
RETURN s.name AS SourceName, count(t) AS TweetCount
ORDER BY TweetCount DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)<-[:MENTIONS]-(t:Tweet)
WITH u, count(t) AS mentions
ORDER BY mentions DESC
LIMIT 3
RETURN u.name, mentions",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
WITH u ORDER BY u.betweenness DESC LIMIT 1
MATCH (t:Tweet)-[:MENTIONS]->(u)
RETURN t
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name, count(t) AS usage
ORDER BY usage DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})<-[:FOLLOWS]-(follower:User)
RETURN follower
ORDER BY follower.followers DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:MENTIONS]->(m:User {screen_name: 'neo4j'})
WHERE u.followers > 10000
MATCH (u)-[:POSTS]->(t:Tweet)
RETURN t",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(other:User)-[:FOLLOWS]->(me:Me)
RETURN other",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {screen_name: 'neo4j'})
MATCH (t)-[:TAGS]->(h:Hashtag)
RETURN DISTINCT h.name",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source {name: 'Buffer'})
RETURN t",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User)
WHERE u.name = 'Neo4j'
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:INTERACTS_WITH]->(other:User)
RETURN other.location AS Location
ORDER BY other.followers DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {screen_name: 'neo4j'})
RETURN u.name AS UserName, count(t) AS MentionsCount
ORDER BY MentionsCount DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
WHERE exists {
    (t)<-[:RETWEETS]-(other:User)
    WHERE other.followers > 10000
}
RETURN t",Pathfinding Queries,twitter,False,False,False
"MATCH (me:Me {screen_name: 'neo4j'})-[:AMPLIFIES]->(user:User)
RETURN count(user) AS AmplifiedUsersCount",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
WITH t, size((t)-[:RETWEETS]->()) AS retweet_count
ORDER BY retweet_count DESC
LIMIT 3
RETURN t, retweet_count",Pathfinding Queries,twitter,True,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(f:User)
RETURN f
ORDER BY f.betweenness DESC",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'})
RETURN u.profile_image_url",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
RETURN l.url AS LinkURL",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:INTERACTS_WITH]->(other:User)
WITH other, count(*) AS interactions
ORDER BY interactions DESC
LIMIT 3
RETURN other.name, other.screen_name, interactions",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(neo:User {screen_name: 'neo4j'}),
      (u)-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN u.name AS UserName, t.text AS TweetText",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN t, COLLECT(h.name) AS hashtags
ORDER BY t.favorites DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(mentioned:User)
RETURN mentioned.name, mentioned.betweenness
ORDER BY mentioned.betweenness DESC",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(followed:User)
RETURN followed.profile_image_url
ORDER BY followed.followers DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j', location: 'Graphs Are Everywhere'})
RETURN u",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:REPLY_TO]->(rt:Tweet)
RETURN rt",Pathfinding Queries,twitter,False,False,True
"MATCH (me:Me)-[:AMPLIFIES]->(user:User)
RETURN user
ORDER BY user.followers DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)<-[:RETWEETS]-(rt:Tweet)<-[:POSTS]-(ru:User)
WHERE u.screen_name = 'neo4j'
RETURN ru.screen_name AS Retweeter, count(rt) AS Retweets
ORDER BY Retweets DESC",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:SIMILAR_TO]->(similar:User)
RETURN similar
ORDER BY similar.score DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:INTERACTS_WITH]->(other:User)
RETURN other, count(*) AS interactions
ORDER BY interactions DESC
LIMIT 1",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
RETURN t, l",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.followers > 10000
RETURN f",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source)
RETURN s.name AS SourceName",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u.name, u.screen_name, count{(u)-[:FOLLOWS]->(:User)} AS followingCount
ORDER BY followingCount DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
RETURN t.id AS TweetID, l.url AS LinkURL",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u.name, u.screen_name, u.statuses
ORDER BY u.statuses DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u.name
ORDER BY u.betweenness DESC
LIMIT 5",Simple Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'}),
      (t)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t",Simple Retrieval Queries,twitter,False,False,False
"MATCH (u:User)-[:MENTIONS]->(t:Tweet)-[:RETWEETS]->(t2:Tweet)
RETURN DISTINCT u",Simple Retrieval Queries,twitter,False,False,False
"MATCH (u:User)
RETURN u
ORDER BY u.following DESC
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link {url: 'https://twitter.com/i/web/status/13718150212657479'})
RETURN u",Simple Retrieval Queries,twitter,False,False,False
"MATCH (u:User)
WHERE size((u)-[:FOLLOWS]->()) >= 100
RETURN u.screen_name",Simple Retrieval Queries,twitter,True,False,False
"MATCH (u:User)
RETURN u.location AS Location
ORDER BY u.betweenness DESC
LIMIT 1",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})
RETURN u.followers AS followers",Simple Retrieval Queries,twitter,False,False,True
"MATCH (me:Me)-[:FOLLOWS]->(user:User)
WHERE user.followers > 10000
RETURN user",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (me:Me)-[:AMPLIFIES]->(user:User)
RETURN user",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:REPLY_TO]->(original:Tweet {id_str: ""1371815021265747970""})
RETURN t",Simple Retrieval Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
WHERE t.created_at >= datetime('2021-01-01T00:00:00Z') AND t.created_at <= datetime('2021-02-28T23:59:59Z')
RETURN t",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
MATCH (t)-[:USING]->(s:Source)
RETURN DISTINCT s.name",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:USING]->(s:Source {name: 'Buffer'})
RETURN t",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(m:User {name: 'Neo4j'})
RETURN u.name",Simple Retrieval Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:SIMILAR_TO {score: score}]->(similar:User)
WHERE score > 0.5
RETURN similar",Simple Retrieval Queries,twitter,True,False,False
"MATCH (original:Tweet {id: 690028662083612672})<-[:RETWEETS]-(retweet:Tweet)
RETURN retweet",Simple Retrieval Queries,twitter,False,False,False
"MATCH (u:User)
RETURN u.name, u.screen_name, u.statuses
ORDER BY u.statuses DESC
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
RETURN l.url",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'})
WHERE u.betweenness > 1000000
RETURN u",Simple Retrieval Queries,twitter,False,False,False
"MATCH (t:Tweet {id: 1371846247913512966})-[:MENTIONS]->(u:User)
RETURN u",Simple Retrieval Queries,twitter,False,False,False
"MATCH (t:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User {location: 'Graphs Are Everywhere'})
RETURN u.profile_image_url",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.followers > 30000
RETURN u",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'})
RETURN u",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(mentioned:User)
RETURN mentioned.name, count(*) AS mentions
ORDER BY mentions DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:FOLLOWS]->(followed)
RETURN count(followed) AS followingCount",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t.text AS text
ORDER BY t.favorites DESC
LIMIT 1",Simple Retrieval Queries,twitter,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweetedTweet:Tweet)-[:POSTS]-(user:User)
WHERE me.name = 'Neo4j'
RETURN user",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.followers DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: ""Neo4j""})-[:POSTS]->(t:Tweet)
WHERE exists {
  (t)<-[:RETWEETS]-(other:User)
  WHERE other.followers > 10000
}
RETURN t
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (u:User {name: ""Neo4j""})-[:POSTS]->(t:Tweet)
WHERE t.created_at >= datetime('2020-01-01T00:00:00Z') AND t.created_at <= datetime('2020-12-31T23:59:59Z')
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (me:Me {name: ""Neo4j""})-[:POSTS]->(tweet:Tweet)<-[:AMPLIFIES]-(user:User)
WHERE user.betweenness IS NOT NULL
RETURN user
ORDER BY user.betweenness DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (n:User {name: ""Neo4j""})-[:FOLLOWS]->(u:User)
WHERE u.statuses > 1000
RETURN u
ORDER BY u.statuses DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
WHERE exists{(t)-[:TAGS]->(:Hashtag)}
MATCH (t)-[:USING]->(s:Source)
RETURN s.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
WHERE u.betweenness IS NOT NULL
RETURN u
ORDER BY u.betweenness DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: ""Neo4j""})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)
WHERE t.text CONTAINS 'education'
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(neo4j:User {screen_name: 'neo4j'})
RETURN u.name, u.followers
ORDER BY u.followers DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link {url: 'https://twitter.com/i/web/status/13718150212657479'})
WHERE t.created_at >= datetime('2021-03-01T00:00:00Z') AND t.created_at <= datetime('2021-03-31T23:59:59Z')
RETURN t",Complex Retrieval Queries,twitter,False,False,False
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag)
WHERE t.favorites > 100
RETURN h.name, count(h) AS hashtag_count
ORDER BY hashtag_count DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: ""Neo4j""})
WHERE EXISTS {
  (t)-[:CONTAINS]->(:Link)
}
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: ""Neo4j""})-[:POSTS]->(t:Tweet)
WITH t, size((t)-[:REPLY_TO]->(:Tweet)) AS replies
ORDER BY replies DESC
LIMIT 3
RETURN t",Complex Retrieval Queries,twitter,True,False,False
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN u
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (neo4j:User {name: ""Neo4j""})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweet:Tweet)-[:MENTIONS]->(mentioned:User)
RETURN mentioned.name, COUNT(*) AS mentions_count
ORDER BY mentions_count DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: ""Neo4j""})-[:POSTS]->(t:Tweet)
WHERE exists{(t)-[:RETWEETS]->(:Tweet)} AND exists{(t)-[:MENTIONS]->(:User)}
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:AMPLIFIES]->(m:Me {name: ""Neo4j""})
RETURN u, count(*) AS amplification_count
ORDER BY amplification_count DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (neo:User {name: ""Neo4j""})-[:POSTS]->(originalTweet:Tweet)
MATCH (tweet:Tweet)-[:RETWEETS]->(originalTweet)
RETURN tweet
ORDER BY tweet.favorites DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(other:User)
WITH u, count(other) AS interactions
ORDER BY interactions DESC
LIMIT 5
RETURN u.name, interactions",Complex Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: ""Neo4j""})
MATCH (t)-[:USING]->(s:Source)
RETURN s.name, count(t) AS mentions
ORDER BY mentions DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: ""Neo4j""})-[:SIMILAR_TO]->(similar:User)
RETURN similar
ORDER BY similar.score DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,False
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
WHERE t.created_at >= datetime('2021-01-01T00:00:00Z') AND t.created_at <= datetime('2021-12-31T23:59:59Z')
RETURN t
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.following > 5000 AND u.followers < 10000
RETURN u
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u.name AS UserName
ORDER BY u.betweenness DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j', location: 'Graphs Are Everywhere'})
WHERE u.location = 'Graphs Are Everywhere'
RETURN u
LIMIT 3",Complex Retrieval Queries,twitter,False,False,False
"MATCH (me:Me {screen_name: 'neo4j'})-[:FOLLOWS]->(user:User)
RETURN user
ORDER BY user.followers DESC
LIMIT 5",Complex Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.followers > 10000 AND u.statuses < 15000
RETURN u",Complex Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u.screen_name
ORDER BY u.followers DESC
LIMIT 3",Simple Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'})
RETURN u.name AS UserName, u.followers AS Followers
ORDER BY u.followers DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)<-[:RETWEETS]-(rt:Tweet)<-[:POSTS]-(retweeter:User)
RETURN retweeter, count(rt) AS retweets
ORDER BY retweets DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:REPLY_TO]->(other:Tweet)
RETURN t, other",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'})
WHERE u.profile_image_url IS NOT NULL
RETURN u
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (neo:User {screen_name: 'neo4j'})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweet:Tweet)-[:POSTS]-(retweetedUser:User)
WHERE retweetedUser.following > 10000
RETURN retweetedUser
ORDER BY retweetedUser.following DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (me:Me {name: 'Neo4j'})-[:AMPLIFIES]->(user:User)-[:POSTS]->(tweet:Tweet)
WHERE tweet.created_at >= datetime('2021-01-01T00:00:00Z') AND tweet.created_at < datetime('2022-01-01T00:00:00Z')
RETURN tweet
ORDER BY tweet.created_at ASC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
WHERE t.created_at >= datetime('2021-01-01T00:00:00Z') AND t.created_at <= datetime('2021-12-31T23:59:59Z')
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'})
WHERE u.betweenness = 349332601.0
RETURN u
LIMIT 3",Verbose query,twitter,False,False,False
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag)
WHERE t.created_at >= datetime('2021-01-01T00:00:00Z') AND t.created_at <= datetime('2021-12-31T23:59:59Z')
  AND exists{(t)-[:MENTIONS]->(:User {name: 'Neo4j'})}
RETURN h.name, count(t) AS mentions
ORDER BY mentions DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:USING]->(s:Source {name: 'Buffer'})
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(n:User {name: 'Neo4j', location: 'Graphs Are Everywhere'})
WHERE u.location IS NOT NULL
RETURN u
ORDER BY u.followers DESC
LIMIT 5",Verbose query,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN rt
ORDER BY rt.created_at ASC
LIMIT 3",Verbose query,twitter,False,False,False
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'})
WHERE u.statuses > 500
RETURN u
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.screen_name STARTS WITH 'n'
RETURN f
ORDER BY f.followers DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'}), (t)-[:TAGS]->(h:Hashtag)
WHERE t.created_at >= datetime('2021-01-01T00:00:00Z') AND t.created_at <= datetime('2021-12-31T23:59:59Z')
RETURN t
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
WHERE l.url CONTAINS 'https://twitter.com' AND t.favorites > 100
RETURN t
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
WHERE l.url STARTS WITH 'https://'
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:FOLLOWS]->(f:User)
RETURN f
ORDER BY f.statuses DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: ""Neo4j""})-[:POSTS]->(:Tweet)-[:RETWEETS]->(rt:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name, count(h) AS usage
ORDER BY usage DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
WHERE exists {
  (t)-[:RETWEETS]->(rt:Tweet)<-[:POSTS]-(other:User)
  WHERE other.followers > 10000
}
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)<-[:REPLY_TO]-(rt:Tweet)-[:TAGS]->(h:Hashtag)
RETURN rt, h
ORDER BY rt.favorites DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:RETWEETS]->(:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
WHERE u.profile_image_url IS NOT NULL
RETURN u
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(n:User {name: 'Neo4j'})
WHERE u.following >= 5000 AND u.following <= 15000
RETURN u
ORDER BY u.following DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(:User)
WHERE t.created_at >= datetime('2021-01-01T00:00:00Z') AND t.created_at < datetime('2022-01-01T00:00:00Z')
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:MENTIONS]->(m:Me {name: 'Neo4j', location: 'Graphs Are Everywhere'})
RETURN u
LIMIT 3",Verbose query,twitter,False,False,False
"MATCH (me:Me {name: 'Neo4j'})-[:AMPLIFIES]->(tweet:Tweet)
RETURN tweet
ORDER BY tweet.favorites DESC
LIMIT 5",Verbose query,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
WHERE t.created_at >= datetime('2021-01-01T00:00:00Z') AND t.created_at < datetime('2021-02-01T00:00:00Z')
RETURN t, l
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (me:User {name: 'Neo4j'})-[:POSTS]->(:Tweet)-[:RETWEETS]->(tweet:Tweet)-[:MENTIONS]->(user:User)
WHERE user.followers > 500
RETURN user
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:POSTS]->(tweet:Tweet)
RETURN tweet
ORDER BY tweet.favorites DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
WHERE u.following > 20000
RETURN u.name, u.screen_name, u.following
ORDER BY u.following DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:AMPLIFIES]->(m:Me {name: 'Neo4j'})
WHERE u.following > 5000
RETURN u
ORDER BY u.following DESC
LIMIT 5",Verbose query,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)<-[:POSTS]-(ou:User)
WHERE ou.profile_image_url ENDS WITH 'normal.jpg'
RETURN rt
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(:User)
WHERE t.created_at > datetime('2021-01-01T00:00:00Z')
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User)
WHERE u.betweenness IS NOT NULL
RETURN u.profile_image_url
ORDER BY u.betweenness DESC
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)
WHERE t.text CONTAINS 'critical service'
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(mentioned:User)
RETURN DISTINCT mentioned",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:RETWEETS]->(original:Tweet)
WHERE original.created_at = datetime('2020-12-06T00:00:00Z')
RETURN t
LIMIT 3",Simple Retrieval Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
WHERE exists {
    (t)-[:MENTIONS]->(:User)
}
RETURN t",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
WHERE u.followers < 100
RETURN l.url, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.betweenness IS NOT NULL AND u.name STARTS WITH 'N'
RETURN u
ORDER BY u.betweenness DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)
WHERE t.created_at = datetime('2021-03-16T00:00:00Z')
RETURN t
LIMIT 3",Simple Retrieval Queries,twitter,False,False,False
"MATCH (u:User {location: 'Sweden'})
WHERE size{(u)-[:FOLLOWS]->(:User)} > 10
RETURN u",Simple Retrieval Queries,twitter,True,False,False
"MATCH (u:User)
WHERE u.followers IS NOT NULL
RETURN u.profile_image_url
ORDER BY u.followers DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
WHERE l.url STARTS WITH 'https://twitter.com'
RETURN t
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag)
WHERE t.created_at = date('2020-12-06')
RETURN h.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,False
"MATCH (me:Me {name: 'Neo4j'})-[:POSTS]->(tweet:Tweet)-[:REPLY_TO]->(originalTweet:Tweet)
RETURN originalTweet
ORDER BY originalTweet.created_at DESC
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (me:Me {name: 'Neo4j'})-[:AMPLIFIES]->(user:User)
RETURN user
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User)
WHERE u.name = 'Neo4j' AND t.created_at > datetime('2021-01-01T00:00:00Z')
RETURN t",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(m:Me {name: 'Neo4j'})
RETURN u.name, count(u) AS interactions
ORDER BY interactions DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,False
"MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)
RETURN rt
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(f:User)
WHERE f.followers > 500
RETURN f",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:RETWEETS]->(rt:Tweet)
WITH rt, count{(t)-[:RETWEETS]->(rt)} AS retweet_count
ORDER BY retweet_count DESC
LIMIT 1
MATCH (rt)-[:CONTAINS]->(l:Link)
RETURN l.url
LIMIT 3",Simple Retrieval Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:SIMILAR_TO]->(similar:User)
RETURN similar.name, similar.screen_name, similar.location, similar.followers
ORDER BY similar.score DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,False
"MATCH (t:Tweet)-[:USING]->(s:Source)
WHERE t.favorites >= 394
RETURN s.name, count(t) AS usage_count
ORDER BY usage_count DESC
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User)
WHERE t.created_at = date('2021-03-16')
RETURN u
LIMIT 3",Simple Retrieval Queries,twitter,False,False,False
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'})
RETURN u",Simple Retrieval Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u.name
ORDER BY u.following DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.followers ASC
LIMIT 3",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.betweenness DESC
LIMIT 5",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
RETURN u
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'})
WHERE u.betweenness > 300000000
RETURN u
ORDER BY u.betweenness DESC
LIMIT 5",Verbose query,twitter,False,False,False
"MATCH (u:User {location: 'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet)
WHERE t.created_at > datetime('2020-12-31T23:59:59Z')
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (n:User {screen_name: 'neo4j'})-[:FOLLOWS]->(u:User)-[:FOLLOWS]->(n)
RETURN u
ORDER BY u.followers DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)
WHERE u.statuses IS NOT NULL
RETURN u.location AS Location, count(u) AS NumberOfUsers
ORDER BY NumberOfUsers DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (n:User {name: 'Neo4j'})-[:FOLLOWS]->(u:User)
RETURN u
ORDER BY u.followers DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.retweets DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(followed:User)
WITH followed, count(u) AS followersCount
ORDER BY followersCount DESC
LIMIT 5
RETURN followed.screen_name AS ScreenName, followersCount",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:FOLLOWS]->(followed:User)
RETURN followed
ORDER BY followed.followers DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name, count(t) AS mentions
ORDER BY mentions DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
RETURN u.name, u.betweenness
ORDER BY u.betweenness DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:USING]->(s:Source)
RETURN s.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
RETURN l.url AS ExternalURL, count(l) AS LinksCount
ORDER BY LinksCount DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:SIMILAR_TO]->(similar:User)
RETURN similar.name, similar.screen_name, similar.location, similar.profile_image_url
ORDER BY similar.score DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,False
"MATCH (u:User)-[:POSTS]->(t:Tweet)
WITH u, count(t) AS posts_count
ORDER BY posts_count DESC
LIMIT 5
RETURN u, posts_count",Complex Aggregation Queries,twitter,False,False,True
"MATCH (:Tweet)-[r:TAGS]->(h:Hashtag)
RETURN h.name, count(r) AS usage
ORDER BY usage DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.created_at DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User)
WITH t, count(u) AS mentions_count
ORDER BY mentions_count DESC
LIMIT 3
RETURN t, mentions_count",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.betweenness > 300000000
RETURN u.name
ORDER BY u.betweenness DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)
WITH u, MAX(t.created_at) AS LatestDate
WHERE t.created_at = LatestDate
RETURN u.name AS UserName, COUNT(t) AS TweetsCount
ORDER BY TweetsCount DESC
LIMIT 3",Complex Aggregation Queries,twitter,True,False,False
"MATCH (u:User)
RETURN u
ORDER BY u.followers DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'}),
      (t)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User)-[:FOLLOWS]->(neo:User {screen_name: 'neo4j'}),
      (u)-[:FOLLOWS]->(me:Me)
RETURN u
LIMIT 5",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
WHERE exists {
  MATCH (other:User)-[:RETWEETS]->(t)
  WITH count(DISTINCT other) AS retweeters
  WHERE retweeters > 5
  RETURN retweeters
}
RETURN t",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)
RETURN t.text AS TweetText, t.favorites AS Favorites
ORDER BY t.favorites DESC
LIMIT 1",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {screen_name: 'neo4j'})
RETURN u.location AS Location, count(u) AS NumberOfUsers
WHERE u.location IS NOT NULL
GROUP BY u.location
ORDER BY NumberOfUsers DESC",Pathfinding Queries,twitter,True,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:SIMILAR_TO]->(similar:User)
RETURN similar
ORDER BY similar.score DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,False
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:FOLLOWS]->(followed:User)
WITH followed
MATCH (followed)-[:POSTS]->(t:Tweet)
RETURN followed.name, followed.screen_name, count(t) AS tweets_count
ORDER BY tweets_count DESC",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
WHERE u.followers IS NOT NULL
RETURN u.name, u.followers
ORDER BY u.followers DESC
LIMIT 3",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link)
WHERE exists{(t)-[:RETWEETS]->(:Tweet)}
RETURN t, l",Pathfinding Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(mentioned:User)
RETURN mentioned.screen_name, count(t) AS mentions_count
ORDER BY mentions_count DESC",Pathfinding Queries,twitter,False,False,True
"MATCH (t:Tweet)
WHERE t.text CONTAINS 'graph'
RETURN t
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
WHERE u.followers > 10000 AND u.location = 'Graphs Are Everywhere'
RETURN u",Simple Retrieval Queries,twitter,False,False,True
"MATCH (u:User)
WITH u ORDER BY u.followers DESC LIMIT 1
MATCH (t:Tweet)-[:MENTIONS]->(u)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)
RETURN rt.url AS RetweetedURL
ORDER BY rt.favorites DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
WHERE t.favorites > 200
RETURN l.url
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {screen_name: 'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag)
RETURN h.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (t:Tweet)-[:REPLY_TO]->(:Tweet)
WHERE t.created_at < datetime('2021-03-01T00:00:00Z')
RETURN t
ORDER BY t.created_at DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j'})
WHERE u.profile_image_url ENDS WITH 'normal.jpg'
RETURN u
ORDER BY u.followers DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:AMPLIFIES]->(m:Me {name: 'Neo4j'})
WHERE u.following > 1000
RETURN u
LIMIT 3",Verbose query,twitter,False,False,False
"MATCH (u:User)-[r:INTERACTS_WITH]->(m:User {name: 'Neo4j'})
WITH u, count(r) AS interactions
ORDER BY interactions DESC
LIMIT 3
RETURN u.name, interactions",Verbose query,twitter,False,False,False
"MATCH (t:Tweet)-[:USING]->(s:Source)
WHERE t.favorites > 50
RETURN s.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (t:Tweet)-[:MENTIONS]->(u:User {name: 'Neo4j'})
WHERE exists{(t)-[:TAGS]->(:Hashtag)}
RETURN t
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)
RETURN rt
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (me:Me)-[:FOLLOWS]->(user:User)
RETURN user
ORDER BY user.betweenness DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)
RETURN u.name, u.screen_name, u.statuses
ORDER BY u.statuses DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (t:Tweet)-[:CONTAINS]->(l:Link)
WHERE l.url STARTS WITH 'https://twitter.com'
RETURN t
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User {name: 'Neo4j'})
RETURN u
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:SIMILAR_TO]->(similar:User)
RETURN similar.name, similar.screen_name, similar.location, similar.followers
ORDER BY similar.score DESC
LIMIT 5",Verbose query,twitter,False,False,False
"MATCH (t:Tweet)-[:USING]->(s:Source {name: 'Buffer'})
RETURN t
ORDER BY t.created_at
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (n:User {name: 'Neo4j'})-[:FOLLOWS]->(u:User)
RETURN u.name, u.followers
ORDER BY u.followers DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (t:Tweet)
WHERE t.favorites > 100
RETURN t
ORDER BY t.created_at ASC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)-[:FOLLOWS]->(m:Me {name: 'Neo4j', location: 'Graphs Are Everywhere'})
WHERE u.location IS NOT NULL
RETURN u",Verbose query,twitter,False,False,True
"MATCH (u:User)
WHERE u.followers > 10000
RETURN u
ORDER BY u.followers DESC
LIMIT 3",Verbose query,twitter,False,False,True
"MATCH (u:User)
RETURN u
ORDER BY u.betweenness DESC
LIMIT 5",Verbose query,twitter,False,False,True
"MATCH (u:User {name: ""Neo4j""})-[:POSTS]->(t:Tweet)
RETURN t
ORDER BY t.favorites DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)
WHERE EXISTS {
    (t)-[:REPLY_TO]->(:Tweet)
}
RETURN t
ORDER BY t.favorites DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag {name: 'software'})
MATCH (t)-[:CONTAINS]->(l:Link)
MATCH (l)-[:USING]->(s:Source)
RETURN s.name, count(t) AS tweet_count
ORDER BY tweet_count DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,False
"MATCH (t:Tweet)-[:USING]->(s:Source)
WITH s, count(t) AS tweets_count
ORDER BY tweets_count DESC
LIMIT 5
MATCH (t:Tweet)-[:USING]->(s)
RETURN t, s",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)<-[:POSTS]-(retweetUser:User)
RETURN retweetUser.name AS RetweetedUser, count(rt) AS Retweets
ORDER BY Retweets DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)
WITH u, 
     count{(u)-[:FOLLOWS]->(:User)} AS followsCount,
     count{(u)-[:MENTIONS]->(:User)} AS mentionsCount,
     count{(u)-[:RETWEETS]->(:Tweet)} AS retweetsCount
RETURN u.name, u.screen_name, followsCount + mentionsCount + retweetsCount AS totalInteractions
ORDER BY totalInteractions DESC
LIMIT 5",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag {name: 'education'})
WITH u, count(t) AS tweets_about_education
ORDER BY tweets_about_education DESC
LIMIT 3
RETURN u.name, tweets_about_education",Complex Aggregation Queries,twitter,False,False,True
"MATCH (t:Tweet)-[:TAGS]->(h:Hashtag)
WHERE t.text CONTAINS 'technology'
WITH h, count(t) AS tweetCount
ORDER BY tweetCount DESC
LIMIT 3
RETURN h.name AS HashtagName, tweetCount",Complex Aggregation Queries,twitter,False,False,True
"MATCH (u:User)-[:INTERACTS_WITH]->(n:User {name: 'Neo4j'})
RETURN u.name, count(u) AS interactions
ORDER BY interactions DESC
LIMIT 3",Complex Aggregation Queries,twitter,False,False,False
"MATCH (u:User {name: 'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet)-[:USING]->(s:Source)
RETURN s.name
LIMIT 3",Verbose query,twitter,False,False,True
